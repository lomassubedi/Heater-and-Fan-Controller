
heaterFanControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000a78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a04  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  00000a78  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a78  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000aa8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001002  00000000  00000000  00000bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000808  00000000  00000000  00001bb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000095a  00000000  00000000  000023ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a4  00000000  00000000  00002d14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000542  00000000  00000000  00002eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000867  00000000  00000000  000033fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00003c61  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_7>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a7 30       	cpi	r26, 0x07	; 7
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 4b 01 	call	0x296	; 0x296 <main>
  88:	0c 94 00 05 	jmp	0xa00	; 0xa00 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_7>:
}

void pwm_fan(uint8_t p) {
	/*OCR1A = (uint16_t)((p / 100) *  TOP_VAL);*/
	/*OCR1A = TOP_VAL;*/
	OCR1A = p;
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
  9e:	af 93       	push	r26
  a0:	bf 93       	push	r27
  a2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <milliseconds>
  a6:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <milliseconds+0x1>
  aa:	a0 91 05 01 	lds	r26, 0x0105	; 0x800105 <milliseconds+0x2>
  ae:	b0 91 06 01 	lds	r27, 0x0106	; 0x800106 <milliseconds+0x3>
  b2:	01 96       	adiw	r24, 0x01	; 1
  b4:	a1 1d       	adc	r26, r1
  b6:	b1 1d       	adc	r27, r1
  b8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <milliseconds>
  bc:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <milliseconds+0x1>
  c0:	a0 93 05 01 	sts	0x0105, r26	; 0x800105 <milliseconds+0x2>
  c4:	b0 93 06 01 	sts	0x0106, r27	; 0x800106 <milliseconds+0x3>
  c8:	bf 91       	pop	r27
  ca:	af 91       	pop	r26
  cc:	9f 91       	pop	r25
  ce:	8f 91       	pop	r24
  d0:	0f 90       	pop	r0
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	0f 90       	pop	r0
  d6:	1f 90       	pop	r1
  d8:	18 95       	reti

000000da <init_timerModule>:
  da:	e0 e7       	ldi	r30, 0x70	; 112
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	82 60       	ori	r24, 0x02	; 2
  e2:	80 83       	st	Z, r24
  e4:	e0 eb       	ldi	r30, 0xB0	; 176
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	82 60       	ori	r24, 0x02	; 2
  ec:	80 83       	st	Z, r24
  ee:	e1 eb       	ldi	r30, 0xB1	; 177
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	86 60       	ori	r24, 0x06	; 6
  f6:	80 83       	st	Z, r24
  f8:	8f e3       	ldi	r24, 0x3F	; 63
  fa:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
  fe:	08 95       	ret

00000100 <pwm_init>:
 100:	56 9a       	sbi	0x0a, 6	; 10
 102:	5e 98       	cbi	0x0b, 6	; 11
 104:	81 e8       	ldi	r24, 0x81	; 129
 106:	84 bd       	out	0x24, r24	; 36
 108:	83 e0       	ldi	r24, 0x03	; 3
 10a:	85 bd       	out	0x25, r24	; 37
 10c:	16 bc       	out	0x26, r1	; 38
 10e:	17 bc       	out	0x27, r1	; 39
 110:	21 9a       	sbi	0x04, 1	; 4
 112:	29 98       	cbi	0x05, 1	; 5
 114:	80 e8       	ldi	r24, 0x80	; 128
 116:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 11a:	83 e1       	ldi	r24, 0x13	; 19
 11c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 120:	8f ef       	ldi	r24, 0xFF	; 255
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 128:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 12c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 130:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 134:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 138:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 13c:	08 95       	ret

0000013e <init_io>:
 13e:	8a b1       	in	r24, 0x0a	; 10
 140:	88 61       	ori	r24, 0x18	; 24
 142:	8a b9       	out	0x0a, r24	; 10
 144:	8a b1       	in	r24, 0x0a	; 10
 146:	88 7f       	andi	r24, 0xF8	; 248
 148:	8a b9       	out	0x0a, r24	; 10
 14a:	34 b1       	in	r19, 0x04	; 4
 14c:	24 b1       	in	r18, 0x04	; 4
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <init_io+0x1a>
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	3a 95       	dec	r19
 15a:	e2 f7       	brpl	.-8      	; 0x154 <init_io+0x16>
 15c:	82 2b       	or	r24, r18
 15e:	84 b9       	out	0x04, r24	; 4
 160:	08 95       	ret

00000162 <init_adc>:
 162:	ea e7       	ldi	r30, 0x7A	; 122
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	87 68       	ori	r24, 0x87	; 135
 16a:	80 83       	st	Z, r24
 16c:	ec e7       	ldi	r30, 0x7C	; 124
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	87 64       	ori	r24, 0x47	; 71
 174:	80 83       	st	Z, r24
 176:	08 95       	ret

00000178 <get_temp>:
}

float get_temp() {
	float temperature = 0.0;
	// Start conversion
	ADCSRA |= (1 << ADSC);
 178:	ea e7       	ldi	r30, 0x7A	; 122
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	80 64       	ori	r24, 0x40	; 64
 180:	80 83       	st	Z, r24
	
	// Wait until the conversion completes 
	while (ADCSRA & (1 << ADSC));
 182:	80 81       	ld	r24, Z
 184:	86 fd       	sbrc	r24, 6
 186:	fd cf       	rjmp	.-6      	; 0x182 <get_temp+0xa>

	// Temperature calculation goes follows
	// 1 Degree Centigrade = 2.049 steps 
	temperature = ADC / 2.049;
 188:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 18c:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>

	return temperature;
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 27 04 	call	0x84e	; 0x84e <__floatunsisf>
 198:	21 ed       	ldi	r18, 0xD1	; 209
 19a:	32 e2       	ldi	r19, 0x22	; 34
 19c:	43 e0       	ldi	r20, 0x03	; 3
 19e:	50 e4       	ldi	r21, 0x40	; 64
 1a0:	0e 94 b5 03 	call	0x76a	; 0x76a <__divsf3>
}
 1a4:	08 95       	ret

000001a6 <sw_a>:

uint8_t sw_a() {
	if(IO_PORTD_IN & (1 << SW_A)) {
 1a6:	89 b1       	in	r24, 0x09	; 9
		return 1;
	} else {
		return 0;
	}
}
 1a8:	82 fb       	bst	r24, 2
 1aa:	88 27       	eor	r24, r24
 1ac:	80 f9       	bld	r24, 0
 1ae:	08 95       	ret

000001b0 <get_sw_a>:

uint8_t get_sw_a() {
	/*static uint8_t count_sw_a = 0;*/
	
	if(sw_a()) {		
 1b0:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <sw_a>
 1b4:	88 23       	and	r24, r24
 1b6:	c9 f0       	breq	.+50     	; 0x1ea <get_sw_a+0x3a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b8:	2f ef       	ldi	r18, 0xFF	; 255
 1ba:	89 ef       	ldi	r24, 0xF9	; 249
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	21 50       	subi	r18, 0x01	; 1
 1c0:	80 40       	sbci	r24, 0x00	; 0
 1c2:	90 40       	sbci	r25, 0x00	; 0
 1c4:	e1 f7       	brne	.-8      	; 0x1be <get_sw_a+0xe>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <get_sw_a+0x18>
 1c8:	00 00       	nop
		_delay_ms(20);  // De-bounce Time
		while(sw_a());
 1ca:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <sw_a>
 1ce:	81 11       	cpse	r24, r1
 1d0:	fc cf       	rjmp	.-8      	; 0x1ca <get_sw_a+0x1a>
		count_sw_a++;	// Increment the counter
 1d2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count_sw_a>
 1d6:	8f 5f       	subi	r24, 0xFF	; 255
 1d8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <count_sw_a>
		
		if(count_sw_a > 4)	count_sw_a = 1; // Initial Value is 1
 1dc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count_sw_a>
 1e0:	85 30       	cpi	r24, 0x05	; 5
 1e2:	18 f0       	brcs	.+6      	; 0x1ea <get_sw_a+0x3a>
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <count_sw_a>
	}
	
	return count_sw_a;
 1ea:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count_sw_a>
}
 1ee:	08 95       	ret

000001f0 <sw_b>:

uint8_t sw_b() {
	if(IO_PORTD_IN & (1 << SW_B)) {
 1f0:	89 b1       	in	r24, 0x09	; 9
		return 1;
	} else {
		return 0;
	}
}
 1f2:	86 95       	lsr	r24
 1f4:	81 70       	andi	r24, 0x01	; 1
 1f6:	08 95       	ret

000001f8 <get_sw_b>:

uint8_t get_sw_b() {
	
	/*static uint8_t count_sw_b = 0;*/
	
	if(sw_b()) {
 1f8:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <sw_b>
 1fc:	88 23       	and	r24, r24
 1fe:	c9 f0       	breq	.+50     	; 0x232 <get_sw_b+0x3a>
 200:	2f ef       	ldi	r18, 0xFF	; 255
 202:	89 ef       	ldi	r24, 0xF9	; 249
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	21 50       	subi	r18, 0x01	; 1
 208:	80 40       	sbci	r24, 0x00	; 0
 20a:	90 40       	sbci	r25, 0x00	; 0
 20c:	e1 f7       	brne	.-8      	; 0x206 <get_sw_b+0xe>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <get_sw_b+0x18>
 210:	00 00       	nop
		_delay_ms(20);  // De-bounce Time
		while(sw_b());
 212:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <sw_b>
 216:	81 11       	cpse	r24, r1
 218:	fc cf       	rjmp	.-8      	; 0x212 <get_sw_b+0x1a>
		count_sw_b++;	// Increment the counter
 21a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <count_sw_b>
 21e:	8f 5f       	subi	r24, 0xFF	; 255
 220:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <count_sw_b>
		
		if(count_sw_b > 2)	count_sw_b = 1; // Initial Value is 1
 224:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <count_sw_b>
 228:	83 30       	cpi	r24, 0x03	; 3
 22a:	18 f0       	brcs	.+6      	; 0x232 <get_sw_b+0x3a>
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <count_sw_b>
	}
	
	return count_sw_b;
 232:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <count_sw_b>
}
 236:	08 95       	ret

00000238 <sw_c>:

uint8_t sw_c() {
	if(IO_PORTD_IN & (1 << SW_C)) {
 238:	89 b1       	in	r24, 0x09	; 9
		return 1;
	} else {
		return 0;
	}
}
 23a:	81 70       	andi	r24, 0x01	; 1
 23c:	08 95       	ret

0000023e <get_sw_c>:

uint8_t get_sw_c() {
	
	/*static uint8_t count_sw_c = 0;*/
	
	if(sw_c()) {
 23e:	0e 94 1c 01 	call	0x238	; 0x238 <sw_c>
 242:	88 23       	and	r24, r24
 244:	c9 f0       	breq	.+50     	; 0x278 <get_sw_c+0x3a>
 246:	2f ef       	ldi	r18, 0xFF	; 255
 248:	89 ef       	ldi	r24, 0xF9	; 249
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	21 50       	subi	r18, 0x01	; 1
 24e:	80 40       	sbci	r24, 0x00	; 0
 250:	90 40       	sbci	r25, 0x00	; 0
 252:	e1 f7       	brne	.-8      	; 0x24c <get_sw_c+0xe>
 254:	00 c0       	rjmp	.+0      	; 0x256 <get_sw_c+0x18>
 256:	00 00       	nop
		_delay_ms(20);  // De-bounce Time
		while(sw_c());
 258:	0e 94 1c 01 	call	0x238	; 0x238 <sw_c>
 25c:	81 11       	cpse	r24, r1
 25e:	fc cf       	rjmp	.-8      	; 0x258 <get_sw_c+0x1a>
		count_sw_c++;	// Increment the counter
 260:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 264:	8f 5f       	subi	r24, 0xFF	; 255
 266:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		
		if(count_sw_c > 4)	count_sw_c = 1; // Initial Value is 1
 26a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 26e:	85 30       	cpi	r24, 0x05	; 5
 270:	18 f0       	brcs	.+6      	; 0x278 <get_sw_c+0x3a>
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	}
	
	return count_sw_c;
 278:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
}
 27c:	08 95       	ret

0000027e <led_heater_on>:

void led_heater_on() {
	IO_PORTD_OUT |= (1 << H_LED_CNTL);
 27e:	5c 9a       	sbi	0x0b, 4	; 11
 280:	08 95       	ret

00000282 <led_heater_off>:
	return;
}

void led_heater_off() {
	IO_PORTD_OUT &= ~(1 << H_LED_CNTL);
 282:	5c 98       	cbi	0x0b, 4	; 11
 284:	08 95       	ret

00000286 <led_fan_on>:
	return;
}

void led_fan_on() {
	IO_PORTD_OUT |= (1 << F_LED_CNTL);
 286:	5b 9a       	sbi	0x0b, 3	; 11
 288:	08 95       	ret

0000028a <led_fan_off>:
	return;
}

void led_fan_off() {
	IO_PORTD_OUT &= ~(1 << F_LED_CNTL);
 28a:	5b 98       	cbi	0x0b, 3	; 11
 28c:	08 95       	ret

0000028e <led_sig_on>:
	return;
}

void led_sig_on() {
	IO_PORTB_OUT |= (1 << LED_SIG);
 28e:	2a 9a       	sbi	0x05, 2	; 5
 290:	08 95       	ret

00000292 <led_sig_off>:
	return;
}

void led_sig_off() {
	IO_PORTB_OUT &= ~(1 << LED_SIG);
 292:	2a 98       	cbi	0x05, 2	; 5
 294:	08 95       	ret

00000296 <main>:
	return;
}

int main(void) {    
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	cd b7       	in	r28, 0x3d	; 61
 29c:	de b7       	in	r29, 0x3e	; 62
 29e:	2a 97       	sbiw	r28, 0x0a	; 10
 2a0:	0f b6       	in	r0, 0x3f	; 63
 2a2:	f8 94       	cli
 2a4:	de bf       	out	0x3e, r29	; 62
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	cd bf       	out	0x3d, r28	; 61
	
	pwm_init();
 2aa:	0e 94 80 00 	call	0x100	; 0x100 <pwm_init>
	init_timerModule();
 2ae:	0e 94 6d 00 	call	0xda	; 0xda <init_timerModule>
	sei();
 2b2:	78 94       	sei
	init_adc();
 2b4:	0e 94 b1 00 	call	0x162	; 0x162 <init_adc>
	init_io();
 2b8:	0e 94 9f 00 	call	0x13e	; 0x13e <init_io>
	unsigned long time_val_heater_start = 0;
	unsigned long time_val_fan_start = 0;
	unsigned long time_val_led_start = 0;
	
	float temp_avg  = 0.0;
	double temp_sum = 0.0;
 2bc:	19 82       	std	Y+1, r1	; 0x01
 2be:	1a 82       	std	Y+2, r1	; 0x02
 2c0:	1b 82       	std	Y+3, r1	; 0x03
 2c2:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t swc_val = 0;
	uint8_t swc_prev_val = 0;

	unsigned long time_val_heater_start = 0;
	unsigned long time_val_fan_start = 0;
	unsigned long time_val_led_start = 0;
 2c4:	81 2c       	mov	r8, r1
 2c6:	91 2c       	mov	r9, r1
 2c8:	54 01       	movw	r10, r8

	uint8_t swc_val = 0;
	uint8_t swc_prev_val = 0;

	unsigned long time_val_heater_start = 0;
	unsigned long time_val_fan_start = 0;
 2ca:	21 2c       	mov	r2, r1
 2cc:	31 2c       	mov	r3, r1
 2ce:	21 01       	movw	r4, r2
	uint8_t swb_prev_val = 0;

	uint8_t swc_val = 0;
	uint8_t swc_prev_val = 0;

	unsigned long time_val_heater_start = 0;
 2d0:	c1 2c       	mov	r12, r1
 2d2:	d1 2c       	mov	r13, r1
 2d4:	76 01       	movw	r14, r12

	uint8_t swb_val = 0;
	uint8_t swb_prev_val = 0;

	uint8_t swc_val = 0;
	uint8_t swc_prev_val = 0;
 2d6:	61 2c       	mov	r6, r1
	
	uint8_t swa_val = 0;
	uint8_t swa_prev_val = 0;

	uint8_t swb_val = 0;
	uint8_t swb_prev_val = 0;
 2d8:	00 e0       	ldi	r16, 0x00	; 0
	sei();
	init_adc();
	init_io();
	
	uint8_t swa_val = 0;
	uint8_t swa_prev_val = 0;
 2da:	10 e0       	ldi	r17, 0x00	; 0
 2dc:	01 c0       	rjmp	.+2      	; 0x2e0 <main+0x4a>
		}

		if((millis() - time_val_fan_start) > TIMER_VAL_FAN) {
			pwm_fan(PWM_FAN_PERCENT_OFF);
			led_fan_off();
			count_sw_c = 0; swc_prev_val = 0;
 2de:	61 2c       	mov	r6, r1
	float temp_avg  = 0.0;
	double temp_sum = 0.0;

    while (1) {		
		
		swa_val = get_sw_a();
 2e0:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <get_sw_a>
 2e4:	89 87       	std	Y+9, r24	; 0x09

		// ------- Heater Control -------------
		if(swa_val != swa_prev_val) {
 2e6:	18 17       	cp	r17, r24
 2e8:	09 f4       	brne	.+2      	; 0x2ec <main+0x56>
 2ea:	47 c0       	rjmp	.+142    	; 0x37a <main+0xe4>
}

void pwm_fan(uint8_t p) {
	/*OCR1A = (uint16_t)((p / 100) *  TOP_VAL);*/
	/*OCR1A = TOP_VAL;*/
	OCR1A = p;
 2ec:	e8 e8       	ldi	r30, 0x88	; 136
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	11 82       	std	Z+1, r1	; 0x01
 2f2:	10 82       	st	Z, r1
		// ------- Heater Control -------------
		if(swa_val != swa_prev_val) {
			
			// --- Clear all other stuffs (fan/led)-----
			pwm_fan(PWM_FAN_PERCENT_OFF);
			led_fan_off();
 2f4:	0e 94 45 01 	call	0x28a	; 0x28a <led_fan_off>
			led_sig_off();
 2f8:	0e 94 49 01 	call	0x292	; 0x292 <led_sig_off>

			// Clear the tap history
			count_sw_b = 0; swb_prev_val = 0;
 2fc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <count_sw_b>
			count_sw_c = 0; swc_prev_val = 0;
 300:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
ISR(TIMER2_COMPA_vect) {
	++milliseconds;
}

unsigned long millis(void) {
	return milliseconds;
 304:	c0 90 03 01 	lds	r12, 0x0103	; 0x800103 <milliseconds>
 308:	d0 90 04 01 	lds	r13, 0x0104	; 0x800104 <milliseconds+0x1>
 30c:	e0 90 05 01 	lds	r14, 0x0105	; 0x800105 <milliseconds+0x2>
 310:	f0 90 06 01 	lds	r15, 0x0106	; 0x800106 <milliseconds+0x3>
			
			// ---- Proceed to heater work
			time_val_heater_start = millis(); 
			swa_prev_val = swa_val;

			switch (swa_val) {
 314:	f9 85       	ldd	r31, Y+9	; 0x09
 316:	f2 30       	cpi	r31, 0x02	; 2
 318:	91 f0       	breq	.+36     	; 0x33e <main+0xa8>
 31a:	18 f4       	brcc	.+6      	; 0x322 <main+0x8c>
 31c:	f1 30       	cpi	r31, 0x01	; 1
 31e:	39 f0       	breq	.+14     	; 0x32e <main+0x98>
 320:	25 c0       	rjmp	.+74     	; 0x36c <main+0xd6>
 322:	29 85       	ldd	r18, Y+9	; 0x09
 324:	23 30       	cpi	r18, 0x03	; 3
 326:	99 f0       	breq	.+38     	; 0x34e <main+0xb8>
 328:	24 30       	cpi	r18, 0x04	; 4
 32a:	c9 f0       	breq	.+50     	; 0x35e <main+0xc8>
 32c:	1f c0       	rjmp	.+62     	; 0x36c <main+0xd6>
	return;
}

void pwm_heater(uint8_t p) {
	/*OCR0A = (uint8_t)((p / 100) * 255);*/
	OCR0A = p;
 32e:	83 e3       	ldi	r24, 0x33	; 51
 330:	87 bd       	out	0x27, r24	; 39
			swa_prev_val = swa_val;

			switch (swa_val) {
				case 1:
					pwm_heater(PWM_HEATER_PERCENT_20);
					led_heater_on();
 332:	0e 94 3f 01 	call	0x27e	; 0x27e <led_heater_on>
			count_sw_b = 0; swb_prev_val = 0;
			count_sw_c = 0; swc_prev_val = 0;
			
			// ---- Proceed to heater work
			time_val_heater_start = millis(); 
			swa_prev_val = swa_val;
 336:	19 85       	ldd	r17, Y+9	; 0x09
			led_fan_off();
			led_sig_off();

			// Clear the tap history
			count_sw_b = 0; swb_prev_val = 0;
			count_sw_c = 0; swc_prev_val = 0;
 338:	61 2c       	mov	r6, r1
			pwm_fan(PWM_FAN_PERCENT_OFF);
			led_fan_off();
			led_sig_off();

			// Clear the tap history
			count_sw_b = 0; swb_prev_val = 0;
 33a:	00 e0       	ldi	r16, 0x00	; 0

			switch (swa_val) {
				case 1:
					pwm_heater(PWM_HEATER_PERCENT_20);
					led_heater_on();
				break;
 33c:	1f c0       	rjmp	.+62     	; 0x37c <main+0xe6>
	return;
}

void pwm_heater(uint8_t p) {
	/*OCR0A = (uint8_t)((p / 100) * 255);*/
	OCR0A = p;
 33e:	96 e6       	ldi	r25, 0x66	; 102
 340:	97 bd       	out	0x27, r25	; 39
					led_heater_on();
				break;
				
				case 2:
					pwm_heater(PWM_HEATER_PERCENT_40);
					led_heater_on();
 342:	0e 94 3f 01 	call	0x27e	; 0x27e <led_heater_on>
			count_sw_b = 0; swb_prev_val = 0;
			count_sw_c = 0; swc_prev_val = 0;
			
			// ---- Proceed to heater work
			time_val_heater_start = millis(); 
			swa_prev_val = swa_val;
 346:	19 85       	ldd	r17, Y+9	; 0x09
			led_fan_off();
			led_sig_off();

			// Clear the tap history
			count_sw_b = 0; swb_prev_val = 0;
			count_sw_c = 0; swc_prev_val = 0;
 348:	61 2c       	mov	r6, r1
			pwm_fan(PWM_FAN_PERCENT_OFF);
			led_fan_off();
			led_sig_off();

			// Clear the tap history
			count_sw_b = 0; swb_prev_val = 0;
 34a:	00 e0       	ldi	r16, 0x00	; 0
				break;
				
				case 2:
					pwm_heater(PWM_HEATER_PERCENT_40);
					led_heater_on();
				break;
 34c:	17 c0       	rjmp	.+46     	; 0x37c <main+0xe6>
	return;
}

void pwm_heater(uint8_t p) {
	/*OCR0A = (uint8_t)((p / 100) * 255);*/
	OCR0A = p;
 34e:	e9 e9       	ldi	r30, 0x99	; 153
 350:	e7 bd       	out	0x27, r30	; 39
					led_heater_on();
				break;
				
				case 3:
					pwm_heater(PWM_HEATER_PERCENT_60);
					led_heater_on();
 352:	0e 94 3f 01 	call	0x27e	; 0x27e <led_heater_on>
			count_sw_b = 0; swb_prev_val = 0;
			count_sw_c = 0; swc_prev_val = 0;
			
			// ---- Proceed to heater work
			time_val_heater_start = millis(); 
			swa_prev_val = swa_val;
 356:	19 85       	ldd	r17, Y+9	; 0x09
			led_fan_off();
			led_sig_off();

			// Clear the tap history
			count_sw_b = 0; swb_prev_val = 0;
			count_sw_c = 0; swc_prev_val = 0;
 358:	61 2c       	mov	r6, r1
			pwm_fan(PWM_FAN_PERCENT_OFF);
			led_fan_off();
			led_sig_off();

			// Clear the tap history
			count_sw_b = 0; swb_prev_val = 0;
 35a:	00 e0       	ldi	r16, 0x00	; 0
				break;
				
				case 3:
					pwm_heater(PWM_HEATER_PERCENT_60);
					led_heater_on();
				break;
 35c:	0f c0       	rjmp	.+30     	; 0x37c <main+0xe6>
	return;
}

void pwm_heater(uint8_t p) {
	/*OCR0A = (uint8_t)((p / 100) * 255);*/
	OCR0A = p;
 35e:	17 bc       	out	0x27, r1	; 39
					led_heater_on();
				break;
				
				case 4:
					pwm_heater(PWM_HEATER_PERCENT_OFF);
					led_heater_off();
 360:	0e 94 41 01 	call	0x282	; 0x282 <led_heater_off>
			count_sw_b = 0; swb_prev_val = 0;
			count_sw_c = 0; swc_prev_val = 0;
			
			// ---- Proceed to heater work
			time_val_heater_start = millis(); 
			swa_prev_val = swa_val;
 364:	19 85       	ldd	r17, Y+9	; 0x09
			led_fan_off();
			led_sig_off();

			// Clear the tap history
			count_sw_b = 0; swb_prev_val = 0;
			count_sw_c = 0; swc_prev_val = 0;
 366:	61 2c       	mov	r6, r1
			pwm_fan(PWM_FAN_PERCENT_OFF);
			led_fan_off();
			led_sig_off();

			// Clear the tap history
			count_sw_b = 0; swb_prev_val = 0;
 368:	00 e0       	ldi	r16, 0x00	; 0
				break;
				
				case 4:
					pwm_heater(PWM_HEATER_PERCENT_OFF);
					led_heater_off();
				break;
 36a:	08 c0       	rjmp	.+16     	; 0x37c <main+0xe6>
	return;
}

void pwm_heater(uint8_t p) {
	/*OCR0A = (uint8_t)((p / 100) * 255);*/
	OCR0A = p;
 36c:	17 bc       	out	0x27, r1	; 39
					led_heater_off();
				break;
				
				default:
					pwm_heater(PWM_HEATER_PERCENT_OFF);
					led_heater_off();
 36e:	0e 94 41 01 	call	0x282	; 0x282 <led_heater_off>
			count_sw_b = 0; swb_prev_val = 0;
			count_sw_c = 0; swc_prev_val = 0;
			
			// ---- Proceed to heater work
			time_val_heater_start = millis(); 
			swa_prev_val = swa_val;
 372:	19 85       	ldd	r17, Y+9	; 0x09
			led_fan_off();
			led_sig_off();

			// Clear the tap history
			count_sw_b = 0; swb_prev_val = 0;
			count_sw_c = 0; swc_prev_val = 0;
 374:	61 2c       	mov	r6, r1
			pwm_fan(PWM_FAN_PERCENT_OFF);
			led_fan_off();
			led_sig_off();

			// Clear the tap history
			count_sw_b = 0; swb_prev_val = 0;
 376:	00 e0       	ldi	r16, 0x00	; 0
				break;
				
				default:
					pwm_heater(PWM_HEATER_PERCENT_OFF);
					led_heater_off();
				break;
 378:	01 c0       	rjmp	.+2      	; 0x37c <main+0xe6>
 37a:	19 85       	ldd	r17, Y+9	; 0x09
ISR(TIMER2_COMPA_vect) {
	++milliseconds;
}

unsigned long millis(void) {
	return milliseconds;
 37c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <milliseconds>
 380:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <milliseconds+0x1>
 384:	a0 91 05 01 	lds	r26, 0x0105	; 0x800105 <milliseconds+0x2>
 388:	b0 91 06 01 	lds	r27, 0x0106	; 0x800106 <milliseconds+0x3>
					led_heater_off();
				break;
			}
		}

		if((millis() - time_val_heater_start) > TIMER_VAL_HEATER) {
 38c:	8c 19       	sub	r24, r12
 38e:	9d 09       	sbc	r25, r13
 390:	ae 09       	sbc	r26, r14
 392:	bf 09       	sbc	r27, r15
 394:	81 32       	cpi	r24, 0x21	; 33
 396:	9e 44       	sbci	r25, 0x4E	; 78
 398:	a1 05       	cpc	r26, r1
 39a:	b1 05       	cpc	r27, r1
 39c:	30 f0       	brcs	.+12     	; 0x3aa <main+0x114>
	return;
}

void pwm_heater(uint8_t p) {
	/*OCR0A = (uint8_t)((p / 100) * 255);*/
	OCR0A = p;
 39e:	17 bc       	out	0x27, r1	; 39
			}
		}

		if((millis() - time_val_heater_start) > TIMER_VAL_HEATER) {
			pwm_heater(PWM_HEATER_PERCENT_OFF);
			led_heater_off();
 3a0:	0e 94 41 01 	call	0x282	; 0x282 <led_heater_off>
			count_sw_a = 0; swa_prev_val = 0;
 3a4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <count_sw_a>
 3a8:	10 e0       	ldi	r17, 0x00	; 0

		// ------- End Heater Control -------------
		

		//----------- LED Control -----------------
		swb_val = get_sw_b();
 3aa:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <get_sw_b>
 3ae:	78 2e       	mov	r7, r24

		if(swb_val != swb_prev_val) {
 3b0:	08 17       	cp	r16, r24
 3b2:	51 f1       	breq	.+84     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
	return;
}

void pwm_heater(uint8_t p) {
	/*OCR0A = (uint8_t)((p / 100) * 255);*/
	OCR0A = p;
 3b4:	17 bc       	out	0x27, r1	; 39

		if(swb_val != swb_prev_val) {
			
			// --- Clear all other stuffs (heater/led)-----
			pwm_heater(PWM_HEATER_PERCENT_OFF);
			led_heater_off();
 3b6:	0e 94 41 01 	call	0x282	; 0x282 <led_heater_off>
}

void pwm_fan(uint8_t p) {
	/*OCR1A = (uint16_t)((p / 100) *  TOP_VAL);*/
	/*OCR1A = TOP_VAL;*/
	OCR1A = p;
 3ba:	e8 e8       	ldi	r30, 0x88	; 136
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	11 82       	std	Z+1, r1	; 0x01
 3c0:	10 82       	st	Z, r1
			// --- Clear all other stuffs (heater/led)-----
			pwm_heater(PWM_HEATER_PERCENT_OFF);
			led_heater_off();
			
			pwm_fan(PWM_FAN_PERCENT_OFF);
			led_fan_off();
 3c2:	0e 94 45 01 	call	0x28a	; 0x28a <led_fan_off>
			

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
 3c6:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <count_sw_a>
			count_sw_c = 0; swc_prev_val = 0;
 3ca:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
ISR(TIMER2_COMPA_vect) {
	++milliseconds;
}

unsigned long millis(void) {
	return milliseconds;
 3ce:	80 90 03 01 	lds	r8, 0x0103	; 0x800103 <milliseconds>
 3d2:	90 90 04 01 	lds	r9, 0x0104	; 0x800104 <milliseconds+0x1>
 3d6:	a0 90 05 01 	lds	r10, 0x0105	; 0x800105 <milliseconds+0x2>
 3da:	b0 90 06 01 	lds	r11, 0x0106	; 0x800106 <milliseconds+0x3>
			
			// ---- Proceed to LED work
			time_val_led_start = millis();
			swb_prev_val = swb_val;

			switch (swb_val) {
 3de:	f1 e0       	ldi	r31, 0x01	; 1
 3e0:	7f 16       	cp	r7, r31
 3e2:	21 f0       	breq	.+8      	; 0x3ec <main+0x156>
 3e4:	22 e0       	ldi	r18, 0x02	; 2
 3e6:	72 16       	cp	r7, r18
 3e8:	31 f0       	breq	.+12     	; 0x3f6 <main+0x160>
 3ea:	0a c0       	rjmp	.+20     	; 0x400 <__LOCK_REGION_LENGTH__>
				case 1:
					led_sig_on();
 3ec:	0e 94 47 01 	call	0x28e	; 0x28e <led_sig_on>
			led_fan_off();
			

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
			count_sw_c = 0; swc_prev_val = 0;
 3f0:	61 2c       	mov	r6, r1
			pwm_fan(PWM_FAN_PERCENT_OFF);
			led_fan_off();
			

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
 3f2:	10 e0       	ldi	r17, 0x00	; 0
			swb_prev_val = swb_val;

			switch (swb_val) {
				case 1:
					led_sig_on();
				break;
 3f4:	09 c0       	rjmp	.+18     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
				
				case 2:
					led_sig_off();
 3f6:	0e 94 49 01 	call	0x292	; 0x292 <led_sig_off>
			led_fan_off();
			

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
			count_sw_c = 0; swc_prev_val = 0;
 3fa:	61 2c       	mov	r6, r1
			pwm_fan(PWM_FAN_PERCENT_OFF);
			led_fan_off();
			

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
 3fc:	10 e0       	ldi	r17, 0x00	; 0
					led_sig_on();
				break;
				
				case 2:
					led_sig_off();
				break;
 3fe:	04 c0       	rjmp	.+8      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
				
				default:
					led_sig_off();
 400:	0e 94 49 01 	call	0x292	; 0x292 <led_sig_off>
			led_fan_off();
			

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
			count_sw_c = 0; swc_prev_val = 0;
 404:	61 2c       	mov	r6, r1
			pwm_fan(PWM_FAN_PERCENT_OFF);
			led_fan_off();
			

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
 406:	10 e0       	ldi	r17, 0x00	; 0
ISR(TIMER2_COMPA_vect) {
	++milliseconds;
}

unsigned long millis(void) {
	return milliseconds;
 408:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <milliseconds>
 40c:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <milliseconds+0x1>
 410:	a0 91 05 01 	lds	r26, 0x0105	; 0x800105 <milliseconds+0x2>
 414:	b0 91 06 01 	lds	r27, 0x0106	; 0x800106 <milliseconds+0x3>
					led_sig_off();
				break;
			}
		}

		if((millis() - time_val_led_start) > TIMER_VAL_LED) {
 418:	88 19       	sub	r24, r8
 41a:	99 09       	sbc	r25, r9
 41c:	aa 09       	sbc	r26, r10
 41e:	bb 09       	sbc	r27, r11
 420:	81 32       	cpi	r24, 0x21	; 33
 422:	9e 44       	sbci	r25, 0x4E	; 78
 424:	a1 05       	cpc	r26, r1
 426:	b1 05       	cpc	r27, r1
 428:	28 f0       	brcs	.+10     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
			led_sig_off();
 42a:	0e 94 49 01 	call	0x292	; 0x292 <led_sig_off>
			count_sw_b = 0; swb_prev_val = 0;
 42e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <count_sw_b>
 432:	71 2c       	mov	r7, r1
		}
		// ------- End SIG LED control ---------------------------------


		//----------- Fan Control -----------------
		swc_val = get_sw_c();
 434:	0e 94 1f 01 	call	0x23e	; 0x23e <get_sw_c>
 438:	8a 87       	std	Y+10, r24	; 0x0a
		if(swc_val != swc_prev_val) {
 43a:	68 16       	cp	r6, r24
 43c:	09 f4       	brne	.+2      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 43e:	51 c0       	rjmp	.+162    	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
	return;
}

void pwm_heater(uint8_t p) {
	/*OCR0A = (uint8_t)((p / 100) * 255);*/
	OCR0A = p;
 440:	17 bc       	out	0x27, r1	; 39
		swc_val = get_sw_c();
		if(swc_val != swc_prev_val) {
	
			// --- Clear all other stuffs (heater/led)-----
			pwm_heater(PWM_HEATER_PERCENT_OFF);
			led_heater_off();
 442:	0e 94 41 01 	call	0x282	; 0x282 <led_heater_off>
			led_sig_off();
 446:	0e 94 49 01 	call	0x292	; 0x292 <led_sig_off>

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
 44a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <count_sw_a>
			count_sw_b = 0; swb_prev_val = 0;
 44e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <count_sw_b>
ISR(TIMER2_COMPA_vect) {
	++milliseconds;
}

unsigned long millis(void) {
	return milliseconds;
 452:	20 90 03 01 	lds	r2, 0x0103	; 0x800103 <milliseconds>
 456:	30 90 04 01 	lds	r3, 0x0104	; 0x800104 <milliseconds+0x1>
 45a:	40 90 05 01 	lds	r4, 0x0105	; 0x800105 <milliseconds+0x2>
 45e:	50 90 06 01 	lds	r5, 0x0106	; 0x800106 <milliseconds+0x3>
	
			// ---- Proceed to fan work
			time_val_fan_start = millis();
			swc_prev_val = swc_val;

			switch (swc_val) {
 462:	fa 85       	ldd	r31, Y+10	; 0x0a
 464:	f2 30       	cpi	r31, 0x02	; 2
 466:	a9 f0       	breq	.+42     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 468:	18 f4       	brcc	.+6      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 46a:	f1 30       	cpi	r31, 0x01	; 1
 46c:	39 f0       	breq	.+14     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 46e:	30 c0       	rjmp	.+96     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 470:	2a 85       	ldd	r18, Y+10	; 0x0a
 472:	23 30       	cpi	r18, 0x03	; 3
 474:	c9 f0       	breq	.+50     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 476:	24 30       	cpi	r18, 0x04	; 4
 478:	11 f1       	breq	.+68     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 47a:	2a c0       	rjmp	.+84     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
}

void pwm_fan(uint8_t p) {
	/*OCR1A = (uint16_t)((p / 100) *  TOP_VAL);*/
	/*OCR1A = TOP_VAL;*/
	OCR1A = p;
 47c:	84 e5       	ldi	r24, 0x54	; 84
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	e8 e8       	ldi	r30, 0x88	; 136
 482:	f0 e0       	ldi	r31, 0x00	; 0
 484:	91 83       	std	Z+1, r25	; 0x01
 486:	80 83       	st	Z, r24
			swc_prev_val = swc_val;

			switch (swc_val) {
				case 1:
					pwm_fan(PWM_FAN_PERCENT_33);
					led_fan_on();
 488:	0e 94 43 01 	call	0x286	; 0x286 <led_fan_on>
			led_heater_off();
			led_sig_off();

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
			count_sw_b = 0; swb_prev_val = 0;
 48c:	00 e0       	ldi	r16, 0x00	; 0
			pwm_heater(PWM_HEATER_PERCENT_OFF);
			led_heater_off();
			led_sig_off();

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
 48e:	10 e0       	ldi	r17, 0x00	; 0

			switch (swc_val) {
				case 1:
					pwm_fan(PWM_FAN_PERCENT_33);
					led_fan_on();
				break;
 490:	29 c0       	rjmp	.+82     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
}

void pwm_fan(uint8_t p) {
	/*OCR1A = (uint16_t)((p / 100) *  TOP_VAL);*/
	/*OCR1A = TOP_VAL;*/
	OCR1A = p;
 492:	86 ea       	ldi	r24, 0xA6	; 166
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	e8 e8       	ldi	r30, 0x88	; 136
 498:	f0 e0       	ldi	r31, 0x00	; 0
 49a:	91 83       	std	Z+1, r25	; 0x01
 49c:	80 83       	st	Z, r24
					led_fan_on();
				break;
		
				case 2:
					pwm_fan(PWM_FAN_PERCENT_66);
					led_fan_on();
 49e:	0e 94 43 01 	call	0x286	; 0x286 <led_fan_on>
			led_heater_off();
			led_sig_off();

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
			count_sw_b = 0; swb_prev_val = 0;
 4a2:	00 e0       	ldi	r16, 0x00	; 0
			pwm_heater(PWM_HEATER_PERCENT_OFF);
			led_heater_off();
			led_sig_off();

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
 4a4:	10 e0       	ldi	r17, 0x00	; 0
				break;
		
				case 2:
					pwm_fan(PWM_FAN_PERCENT_66);
					led_fan_on();
				break;
 4a6:	1e c0       	rjmp	.+60     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
}

void pwm_fan(uint8_t p) {
	/*OCR1A = (uint16_t)((p / 100) *  TOP_VAL);*/
	/*OCR1A = TOP_VAL;*/
	OCR1A = p;
 4a8:	8f ef       	ldi	r24, 0xFF	; 255
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	e8 e8       	ldi	r30, 0x88	; 136
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	91 83       	std	Z+1, r25	; 0x01
 4b2:	80 83       	st	Z, r24
					led_fan_on();
				break;
		
				case 3:
					pwm_fan(PWM_FAN_PERCENT_100);
					led_fan_on();
 4b4:	0e 94 43 01 	call	0x286	; 0x286 <led_fan_on>
			led_heater_off();
			led_sig_off();

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
			count_sw_b = 0; swb_prev_val = 0;
 4b8:	00 e0       	ldi	r16, 0x00	; 0
			pwm_heater(PWM_HEATER_PERCENT_OFF);
			led_heater_off();
			led_sig_off();

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
 4ba:	10 e0       	ldi	r17, 0x00	; 0
				break;
		
				case 3:
					pwm_fan(PWM_FAN_PERCENT_100);
					led_fan_on();
				break;
 4bc:	13 c0       	rjmp	.+38     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
}

void pwm_fan(uint8_t p) {
	/*OCR1A = (uint16_t)((p / 100) *  TOP_VAL);*/
	/*OCR1A = TOP_VAL;*/
	OCR1A = p;
 4be:	e8 e8       	ldi	r30, 0x88	; 136
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	11 82       	std	Z+1, r1	; 0x01
 4c4:	10 82       	st	Z, r1
					led_fan_on();
				break;
		
				case 4:
					pwm_fan(PWM_FAN_PERCENT_OFF);
					led_fan_off();
 4c6:	0e 94 45 01 	call	0x28a	; 0x28a <led_fan_off>
			led_heater_off();
			led_sig_off();

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
			count_sw_b = 0; swb_prev_val = 0;
 4ca:	00 e0       	ldi	r16, 0x00	; 0
			pwm_heater(PWM_HEATER_PERCENT_OFF);
			led_heater_off();
			led_sig_off();

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
 4cc:	10 e0       	ldi	r17, 0x00	; 0
				break;
		
				case 4:
					pwm_fan(PWM_FAN_PERCENT_OFF);
					led_fan_off();
				break;
 4ce:	0a c0       	rjmp	.+20     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
}

void pwm_fan(uint8_t p) {
	/*OCR1A = (uint16_t)((p / 100) *  TOP_VAL);*/
	/*OCR1A = TOP_VAL;*/
	OCR1A = p;
 4d0:	e8 e8       	ldi	r30, 0x88	; 136
 4d2:	f0 e0       	ldi	r31, 0x00	; 0
 4d4:	11 82       	std	Z+1, r1	; 0x01
 4d6:	10 82       	st	Z, r1
					led_fan_off();
				break;
		
				default:
					pwm_fan(PWM_FAN_PERCENT_OFF);
					led_fan_off();
 4d8:	0e 94 45 01 	call	0x28a	; 0x28a <led_fan_off>
			led_heater_off();
			led_sig_off();

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
			count_sw_b = 0; swb_prev_val = 0;
 4dc:	00 e0       	ldi	r16, 0x00	; 0
			pwm_heater(PWM_HEATER_PERCENT_OFF);
			led_heater_off();
			led_sig_off();

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
 4de:	10 e0       	ldi	r17, 0x00	; 0
				break;
		
				default:
					pwm_fan(PWM_FAN_PERCENT_OFF);
					led_fan_off();
				break;
 4e0:	01 c0       	rjmp	.+2      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4e2:	07 2d       	mov	r16, r7
ISR(TIMER2_COMPA_vect) {
	++milliseconds;
}

unsigned long millis(void) {
	return milliseconds;
 4e4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <milliseconds>
 4e8:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <milliseconds+0x1>
 4ec:	a0 91 05 01 	lds	r26, 0x0105	; 0x800105 <milliseconds+0x2>
 4f0:	b0 91 06 01 	lds	r27, 0x0106	; 0x800106 <milliseconds+0x3>
					led_fan_off();
				break;
			}
		}

		if((millis() - time_val_fan_start) > TIMER_VAL_FAN) {
 4f4:	82 19       	sub	r24, r2
 4f6:	93 09       	sbc	r25, r3
 4f8:	a4 09       	sbc	r26, r4
 4fa:	b5 09       	sbc	r27, r5
 4fc:	81 32       	cpi	r24, 0x21	; 33
 4fe:	9e 44       	sbci	r25, 0x4E	; 78
 500:	a1 05       	cpc	r26, r1
 502:	b1 05       	cpc	r27, r1
 504:	08 f4       	brcc	.+2      	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 506:	aa c0       	rjmp	.+340    	; 0x65c <__LOCK_REGION_LENGTH__+0x25c>
}

void pwm_fan(uint8_t p) {
	/*OCR1A = (uint16_t)((p / 100) *  TOP_VAL);*/
	/*OCR1A = TOP_VAL;*/
	OCR1A = p;
 508:	e8 e8       	ldi	r30, 0x88	; 136
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	11 82       	std	Z+1, r1	; 0x01
 50e:	10 82       	st	Z, r1
			}
		}

		if((millis() - time_val_fan_start) > TIMER_VAL_FAN) {
			pwm_fan(PWM_FAN_PERCENT_OFF);
			led_fan_off();
 510:	0e 94 45 01 	call	0x28a	; 0x28a <led_fan_off>
			count_sw_c = 0; swc_prev_val = 0;
 514:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
ISR(TIMER2_COMPA_vect) {
	++milliseconds;
}

unsigned long millis(void) {
	return milliseconds;
 518:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <milliseconds>
 51c:	70 91 04 01 	lds	r23, 0x0104	; 0x800104 <milliseconds+0x1>
 520:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <milliseconds+0x2>
 524:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <milliseconds+0x3>
		// ------- End fan control ---------------------------------
	

		// --------------- Temperature sensing and Control ----------
		// ---- Check sensor each 120 seconds -------------------------
		if(!(millis() % SENSOR_CHECK_TIME)) {
 528:	28 eb       	ldi	r18, 0xB8	; 184
 52a:	3b e0       	ldi	r19, 0x0B	; 11
 52c:	40 e0       	ldi	r20, 0x00	; 0
 52e:	50 e0       	ldi	r21, 0x00	; 0
 530:	0e 94 de 04 	call	0x9bc	; 0x9bc <__udivmodsi4>
 534:	67 2b       	or	r22, r23
 536:	68 2b       	or	r22, r24
 538:	69 2b       	or	r22, r25
 53a:	09 f0       	breq	.+2      	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 53c:	d0 ce       	rjmp	.-608    	; 0x2de <main+0x48>
		}

		if((millis() - time_val_fan_start) > TIMER_VAL_FAN) {
			pwm_fan(PWM_FAN_PERCENT_OFF);
			led_fan_off();
			count_sw_c = 0; swc_prev_val = 0;
 53e:	1a 86       	std	Y+10, r1	; 0x0a
 540:	0f 2e       	mov	r0, r31
 542:	f5 e0       	ldi	r31, 0x05	; 5
 544:	7f 2e       	mov	r7, r31
 546:	f0 2d       	mov	r31, r0
		// --------------- Temperature sensing and Control ----------
		// ---- Check sensor each 120 seconds -------------------------
		if(!(millis() % SENSOR_CHECK_TIME)) {

			for(uint8_t i = 0; i < 5; i++) {
				temp_sum += get_temp();
 548:	0e 94 bc 00 	call	0x178	; 0x178 <get_temp>
 54c:	9b 01       	movw	r18, r22
 54e:	ac 01       	movw	r20, r24
 550:	69 81       	ldd	r22, Y+1	; 0x01
 552:	7a 81       	ldd	r23, Y+2	; 0x02
 554:	8b 81       	ldd	r24, Y+3	; 0x03
 556:	9c 81       	ldd	r25, Y+4	; 0x04
 558:	0e 94 44 03 	call	0x688	; 0x688 <__addsf3>
 55c:	69 83       	std	Y+1, r22	; 0x01
 55e:	7a 83       	std	Y+2, r23	; 0x02
 560:	8b 83       	std	Y+3, r24	; 0x03
 562:	9c 83       	std	Y+4, r25	; 0x04
 564:	7a 94       	dec	r7

		// --------------- Temperature sensing and Control ----------
		// ---- Check sensor each 120 seconds -------------------------
		if(!(millis() % SENSOR_CHECK_TIME)) {

			for(uint8_t i = 0; i < 5; i++) {
 566:	71 10       	cpse	r7, r1
 568:	ef cf       	rjmp	.-34     	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
				temp_sum += get_temp();
			}

			temp_avg = temp_sum / 5;
 56a:	20 e0       	ldi	r18, 0x00	; 0
 56c:	30 e0       	ldi	r19, 0x00	; 0
 56e:	40 ea       	ldi	r20, 0xA0	; 160
 570:	50 e4       	ldi	r21, 0x40	; 64
 572:	69 81       	ldd	r22, Y+1	; 0x01
 574:	7a 81       	ldd	r23, Y+2	; 0x02
 576:	8b 81       	ldd	r24, Y+3	; 0x03
 578:	9c 81       	ldd	r25, Y+4	; 0x04
 57a:	0e 94 b5 03 	call	0x76a	; 0x76a <__divsf3>
 57e:	6d 83       	std	Y+5, r22	; 0x05
 580:	7e 83       	std	Y+6, r23	; 0x06
 582:	8f 83       	std	Y+7, r24	; 0x07
 584:	98 87       	std	Y+8, r25	; 0x08


			if(temp_avg < TEMP_CRITICAL_VAL) {
 586:	20 e0       	ldi	r18, 0x00	; 0
 588:	30 e0       	ldi	r19, 0x00	; 0
 58a:	40 ea       	ldi	r20, 0xA0	; 160
 58c:	52 e4       	ldi	r21, 0x42	; 66
 58e:	0e 94 b0 03 	call	0x760	; 0x760 <__cmpsf2>
 592:	88 23       	and	r24, r24
 594:	0c f0       	brlt	.+2      	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
 596:	5d c0       	rjmp	.+186    	; 0x652 <__LOCK_REGION_LENGTH__+0x252>

				switch (swa_val) {
 598:	e9 85       	ldd	r30, Y+9	; 0x09
 59a:	e2 30       	cpi	r30, 0x02	; 2
 59c:	11 f1       	breq	.+68     	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
 59e:	18 f4       	brcc	.+6      	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
 5a0:	e1 30       	cpi	r30, 0x01	; 1
 5a2:	41 f0       	breq	.+16     	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
 5a4:	51 c0       	rjmp	.+162    	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
 5a6:	f9 85       	ldd	r31, Y+9	; 0x09
 5a8:	f3 30       	cpi	r31, 0x03	; 3
 5aa:	91 f1       	breq	.+100    	; 0x610 <__LOCK_REGION_LENGTH__+0x210>
 5ac:	f4 30       	cpi	r31, 0x04	; 4
 5ae:	09 f4       	brne	.+2      	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
 5b0:	46 c0       	rjmp	.+140    	; 0x63e <__LOCK_REGION_LENGTH__+0x23e>
 5b2:	4a c0       	rjmp	.+148    	; 0x648 <__LOCK_REGION_LENGTH__+0x248>

					case 1:
						if(temp_avg >= TEMP_LOW_VAL) {
 5b4:	20 e0       	ldi	r18, 0x00	; 0
 5b6:	30 e0       	ldi	r19, 0x00	; 0
 5b8:	40 ef       	ldi	r20, 0xF0	; 240
 5ba:	51 e4       	ldi	r21, 0x41	; 65
 5bc:	6d 81       	ldd	r22, Y+5	; 0x05
 5be:	7e 81       	ldd	r23, Y+6	; 0x06
 5c0:	8f 81       	ldd	r24, Y+7	; 0x07
 5c2:	98 85       	ldd	r25, Y+8	; 0x08
 5c4:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__gesf2>
 5c8:	88 23       	and	r24, r24
 5ca:	2c f0       	brlt	.+10     	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
	return;
}

void pwm_heater(uint8_t p) {
	/*OCR0A = (uint8_t)((p / 100) * 255);*/
	OCR0A = p;
 5cc:	17 bc       	out	0x27, r1	; 39
				switch (swa_val) {

					case 1:
						if(temp_avg >= TEMP_LOW_VAL) {
							pwm_heater(PWM_HEATER_PERCENT_OFF);
							led_heater_off();
 5ce:	0e 94 41 01 	call	0x282	; 0x282 <led_heater_off>
 5d2:	6a 84       	ldd	r6, Y+10	; 0x0a
 5d4:	85 ce       	rjmp	.-758    	; 0x2e0 <main+0x4a>
	return;
}

void pwm_heater(uint8_t p) {
	/*OCR0A = (uint8_t)((p / 100) * 255);*/
	OCR0A = p;
 5d6:	23 e3       	ldi	r18, 0x33	; 51
 5d8:	27 bd       	out	0x27, r18	; 39
						if(temp_avg >= TEMP_LOW_VAL) {
							pwm_heater(PWM_HEATER_PERCENT_OFF);
							led_heater_off();
						} else {
							pwm_heater(PWM_HEATER_PERCENT_20);
							led_heater_on();
 5da:	0e 94 3f 01 	call	0x27e	; 0x27e <led_heater_on>
 5de:	6a 84       	ldd	r6, Y+10	; 0x0a
 5e0:	7f ce       	rjmp	.-770    	; 0x2e0 <main+0x4a>
						}
					break;
						
					case 2:
						if(temp_avg >= TEMP_MID_VAL) {
 5e2:	20 e0       	ldi	r18, 0x00	; 0
 5e4:	30 e0       	ldi	r19, 0x00	; 0
 5e6:	48 e4       	ldi	r20, 0x48	; 72
 5e8:	52 e4       	ldi	r21, 0x42	; 66
 5ea:	6d 81       	ldd	r22, Y+5	; 0x05
 5ec:	7e 81       	ldd	r23, Y+6	; 0x06
 5ee:	8f 81       	ldd	r24, Y+7	; 0x07
 5f0:	98 85       	ldd	r25, Y+8	; 0x08
 5f2:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__gesf2>
 5f6:	88 23       	and	r24, r24
 5f8:	2c f0       	brlt	.+10     	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
	return;
}

void pwm_heater(uint8_t p) {
	/*OCR0A = (uint8_t)((p / 100) * 255);*/
	OCR0A = p;
 5fa:	17 bc       	out	0x27, r1	; 39
					break;
						
					case 2:
						if(temp_avg >= TEMP_MID_VAL) {
							pwm_heater(PWM_HEATER_PERCENT_OFF);
							led_heater_off();
 5fc:	0e 94 41 01 	call	0x282	; 0x282 <led_heater_off>
 600:	6a 84       	ldd	r6, Y+10	; 0x0a
 602:	6e ce       	rjmp	.-804    	; 0x2e0 <main+0x4a>
	return;
}

void pwm_heater(uint8_t p) {
	/*OCR0A = (uint8_t)((p / 100) * 255);*/
	OCR0A = p;
 604:	86 e6       	ldi	r24, 0x66	; 102
 606:	87 bd       	out	0x27, r24	; 39
						if(temp_avg >= TEMP_MID_VAL) {
							pwm_heater(PWM_HEATER_PERCENT_OFF);
							led_heater_off();
						} else {
							pwm_heater(PWM_HEATER_PERCENT_40);
							led_heater_on();
 608:	0e 94 3f 01 	call	0x27e	; 0x27e <led_heater_on>
 60c:	6a 84       	ldd	r6, Y+10	; 0x0a
 60e:	68 ce       	rjmp	.-816    	; 0x2e0 <main+0x4a>
						}
					break;
						
					case 3:
						if(temp_avg >= TEMP_HIGH_VAL) {
 610:	20 e0       	ldi	r18, 0x00	; 0
 612:	30 e0       	ldi	r19, 0x00	; 0
 614:	4c e8       	ldi	r20, 0x8C	; 140
 616:	52 e4       	ldi	r21, 0x42	; 66
 618:	6d 81       	ldd	r22, Y+5	; 0x05
 61a:	7e 81       	ldd	r23, Y+6	; 0x06
 61c:	8f 81       	ldd	r24, Y+7	; 0x07
 61e:	98 85       	ldd	r25, Y+8	; 0x08
 620:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__gesf2>
 624:	88 23       	and	r24, r24
 626:	2c f0       	brlt	.+10     	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
	return;
}

void pwm_heater(uint8_t p) {
	/*OCR0A = (uint8_t)((p / 100) * 255);*/
	OCR0A = p;
 628:	17 bc       	out	0x27, r1	; 39
					break;
						
					case 3:
						if(temp_avg >= TEMP_HIGH_VAL) {
							pwm_heater(PWM_HEATER_PERCENT_OFF);
							led_heater_off();
 62a:	0e 94 41 01 	call	0x282	; 0x282 <led_heater_off>
 62e:	6a 84       	ldd	r6, Y+10	; 0x0a
 630:	57 ce       	rjmp	.-850    	; 0x2e0 <main+0x4a>
	return;
}

void pwm_heater(uint8_t p) {
	/*OCR0A = (uint8_t)((p / 100) * 255);*/
	OCR0A = p;
 632:	99 e9       	ldi	r25, 0x99	; 153
 634:	97 bd       	out	0x27, r25	; 39
						if(temp_avg >= TEMP_HIGH_VAL) {
							pwm_heater(PWM_HEATER_PERCENT_OFF);
							led_heater_off();
						} else {
							pwm_heater(PWM_HEATER_PERCENT_60);
							led_heater_on();
 636:	0e 94 3f 01 	call	0x27e	; 0x27e <led_heater_on>
 63a:	6a 84       	ldd	r6, Y+10	; 0x0a
 63c:	51 ce       	rjmp	.-862    	; 0x2e0 <main+0x4a>
	return;
}

void pwm_heater(uint8_t p) {
	/*OCR0A = (uint8_t)((p / 100) * 255);*/
	OCR0A = p;
 63e:	17 bc       	out	0x27, r1	; 39
						}
					break;
						
					case 4:
						pwm_heater(PWM_HEATER_PERCENT_OFF);
						led_heater_off();
 640:	0e 94 41 01 	call	0x282	; 0x282 <led_heater_off>
					break;
 644:	6a 84       	ldd	r6, Y+10	; 0x0a
 646:	4c ce       	rjmp	.-872    	; 0x2e0 <main+0x4a>
	return;
}

void pwm_heater(uint8_t p) {
	/*OCR0A = (uint8_t)((p / 100) * 255);*/
	OCR0A = p;
 648:	17 bc       	out	0x27, r1	; 39
						led_heater_off();
					break;
						
					default:
						pwm_heater(PWM_HEATER_PERCENT_OFF);
						led_heater_off();
 64a:	0e 94 41 01 	call	0x282	; 0x282 <led_heater_off>
					break;
 64e:	6a 84       	ldd	r6, Y+10	; 0x0a
 650:	47 ce       	rjmp	.-882    	; 0x2e0 <main+0x4a>
	return;
}

void pwm_heater(uint8_t p) {
	/*OCR0A = (uint8_t)((p / 100) * 255);*/
	OCR0A = p;
 652:	17 bc       	out	0x27, r1	; 39
						led_heater_off();
					break;
				}
			} else {
				pwm_heater(PWM_HEATER_PERCENT_OFF);
				led_heater_off();
 654:	0e 94 41 01 	call	0x282	; 0x282 <led_heater_off>
 658:	6a 84       	ldd	r6, Y+10	; 0x0a
 65a:	42 ce       	rjmp	.-892    	; 0x2e0 <main+0x4a>
ISR(TIMER2_COMPA_vect) {
	++milliseconds;
}

unsigned long millis(void) {
	return milliseconds;
 65c:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <milliseconds>
 660:	70 91 04 01 	lds	r23, 0x0104	; 0x800104 <milliseconds+0x1>
 664:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <milliseconds+0x2>
 668:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <milliseconds+0x3>
		// ------- End fan control ---------------------------------
	

		// --------------- Temperature sensing and Control ----------
		// ---- Check sensor each 120 seconds -------------------------
		if(!(millis() % SENSOR_CHECK_TIME)) {
 66c:	28 eb       	ldi	r18, 0xB8	; 184
 66e:	3b e0       	ldi	r19, 0x0B	; 11
 670:	40 e0       	ldi	r20, 0x00	; 0
 672:	50 e0       	ldi	r21, 0x00	; 0
 674:	0e 94 de 04 	call	0x9bc	; 0x9bc <__udivmodsi4>
 678:	67 2b       	or	r22, r23
 67a:	68 2b       	or	r22, r24
 67c:	69 2b       	or	r22, r25
 67e:	09 f4       	brne	.+2      	; 0x682 <__LOCK_REGION_LENGTH__+0x282>
 680:	5f cf       	rjmp	.-322    	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
 682:	6a 84       	ldd	r6, Y+10	; 0x0a
 684:	2d ce       	rjmp	.-934    	; 0x2e0 <main+0x4a>

00000686 <__subsf3>:
 686:	50 58       	subi	r21, 0x80	; 128

00000688 <__addsf3>:
 688:	bb 27       	eor	r27, r27
 68a:	aa 27       	eor	r26, r26
 68c:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__addsf3x>
 690:	0c 94 9f 04 	jmp	0x93e	; 0x93e <__fp_round>
 694:	0e 94 91 04 	call	0x922	; 0x922 <__fp_pscA>
 698:	38 f0       	brcs	.+14     	; 0x6a8 <__addsf3+0x20>
 69a:	0e 94 98 04 	call	0x930	; 0x930 <__fp_pscB>
 69e:	20 f0       	brcs	.+8      	; 0x6a8 <__addsf3+0x20>
 6a0:	39 f4       	brne	.+14     	; 0x6b0 <__addsf3+0x28>
 6a2:	9f 3f       	cpi	r25, 0xFF	; 255
 6a4:	19 f4       	brne	.+6      	; 0x6ac <__addsf3+0x24>
 6a6:	26 f4       	brtc	.+8      	; 0x6b0 <__addsf3+0x28>
 6a8:	0c 94 8e 04 	jmp	0x91c	; 0x91c <__fp_nan>
 6ac:	0e f4       	brtc	.+2      	; 0x6b0 <__addsf3+0x28>
 6ae:	e0 95       	com	r30
 6b0:	e7 fb       	bst	r30, 7
 6b2:	0c 94 88 04 	jmp	0x910	; 0x910 <__fp_inf>

000006b6 <__addsf3x>:
 6b6:	e9 2f       	mov	r30, r25
 6b8:	0e 94 b0 04 	call	0x960	; 0x960 <__fp_split3>
 6bc:	58 f3       	brcs	.-42     	; 0x694 <__addsf3+0xc>
 6be:	ba 17       	cp	r27, r26
 6c0:	62 07       	cpc	r22, r18
 6c2:	73 07       	cpc	r23, r19
 6c4:	84 07       	cpc	r24, r20
 6c6:	95 07       	cpc	r25, r21
 6c8:	20 f0       	brcs	.+8      	; 0x6d2 <__addsf3x+0x1c>
 6ca:	79 f4       	brne	.+30     	; 0x6ea <__addsf3x+0x34>
 6cc:	a6 f5       	brtc	.+104    	; 0x736 <__addsf3x+0x80>
 6ce:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__fp_zero>
 6d2:	0e f4       	brtc	.+2      	; 0x6d6 <__addsf3x+0x20>
 6d4:	e0 95       	com	r30
 6d6:	0b 2e       	mov	r0, r27
 6d8:	ba 2f       	mov	r27, r26
 6da:	a0 2d       	mov	r26, r0
 6dc:	0b 01       	movw	r0, r22
 6de:	b9 01       	movw	r22, r18
 6e0:	90 01       	movw	r18, r0
 6e2:	0c 01       	movw	r0, r24
 6e4:	ca 01       	movw	r24, r20
 6e6:	a0 01       	movw	r20, r0
 6e8:	11 24       	eor	r1, r1
 6ea:	ff 27       	eor	r31, r31
 6ec:	59 1b       	sub	r21, r25
 6ee:	99 f0       	breq	.+38     	; 0x716 <__addsf3x+0x60>
 6f0:	59 3f       	cpi	r21, 0xF9	; 249
 6f2:	50 f4       	brcc	.+20     	; 0x708 <__addsf3x+0x52>
 6f4:	50 3e       	cpi	r21, 0xE0	; 224
 6f6:	68 f1       	brcs	.+90     	; 0x752 <__addsf3x+0x9c>
 6f8:	1a 16       	cp	r1, r26
 6fa:	f0 40       	sbci	r31, 0x00	; 0
 6fc:	a2 2f       	mov	r26, r18
 6fe:	23 2f       	mov	r18, r19
 700:	34 2f       	mov	r19, r20
 702:	44 27       	eor	r20, r20
 704:	58 5f       	subi	r21, 0xF8	; 248
 706:	f3 cf       	rjmp	.-26     	; 0x6ee <__addsf3x+0x38>
 708:	46 95       	lsr	r20
 70a:	37 95       	ror	r19
 70c:	27 95       	ror	r18
 70e:	a7 95       	ror	r26
 710:	f0 40       	sbci	r31, 0x00	; 0
 712:	53 95       	inc	r21
 714:	c9 f7       	brne	.-14     	; 0x708 <__addsf3x+0x52>
 716:	7e f4       	brtc	.+30     	; 0x736 <__addsf3x+0x80>
 718:	1f 16       	cp	r1, r31
 71a:	ba 0b       	sbc	r27, r26
 71c:	62 0b       	sbc	r22, r18
 71e:	73 0b       	sbc	r23, r19
 720:	84 0b       	sbc	r24, r20
 722:	ba f0       	brmi	.+46     	; 0x752 <__addsf3x+0x9c>
 724:	91 50       	subi	r25, 0x01	; 1
 726:	a1 f0       	breq	.+40     	; 0x750 <__addsf3x+0x9a>
 728:	ff 0f       	add	r31, r31
 72a:	bb 1f       	adc	r27, r27
 72c:	66 1f       	adc	r22, r22
 72e:	77 1f       	adc	r23, r23
 730:	88 1f       	adc	r24, r24
 732:	c2 f7       	brpl	.-16     	; 0x724 <__addsf3x+0x6e>
 734:	0e c0       	rjmp	.+28     	; 0x752 <__addsf3x+0x9c>
 736:	ba 0f       	add	r27, r26
 738:	62 1f       	adc	r22, r18
 73a:	73 1f       	adc	r23, r19
 73c:	84 1f       	adc	r24, r20
 73e:	48 f4       	brcc	.+18     	; 0x752 <__addsf3x+0x9c>
 740:	87 95       	ror	r24
 742:	77 95       	ror	r23
 744:	67 95       	ror	r22
 746:	b7 95       	ror	r27
 748:	f7 95       	ror	r31
 74a:	9e 3f       	cpi	r25, 0xFE	; 254
 74c:	08 f0       	brcs	.+2      	; 0x750 <__addsf3x+0x9a>
 74e:	b0 cf       	rjmp	.-160    	; 0x6b0 <__addsf3+0x28>
 750:	93 95       	inc	r25
 752:	88 0f       	add	r24, r24
 754:	08 f0       	brcs	.+2      	; 0x758 <__addsf3x+0xa2>
 756:	99 27       	eor	r25, r25
 758:	ee 0f       	add	r30, r30
 75a:	97 95       	ror	r25
 75c:	87 95       	ror	r24
 75e:	08 95       	ret

00000760 <__cmpsf2>:
 760:	0e 94 64 04 	call	0x8c8	; 0x8c8 <__fp_cmp>
 764:	08 f4       	brcc	.+2      	; 0x768 <__cmpsf2+0x8>
 766:	81 e0       	ldi	r24, 0x01	; 1
 768:	08 95       	ret

0000076a <__divsf3>:
 76a:	0e 94 c9 03 	call	0x792	; 0x792 <__divsf3x>
 76e:	0c 94 9f 04 	jmp	0x93e	; 0x93e <__fp_round>
 772:	0e 94 98 04 	call	0x930	; 0x930 <__fp_pscB>
 776:	58 f0       	brcs	.+22     	; 0x78e <__divsf3+0x24>
 778:	0e 94 91 04 	call	0x922	; 0x922 <__fp_pscA>
 77c:	40 f0       	brcs	.+16     	; 0x78e <__divsf3+0x24>
 77e:	29 f4       	brne	.+10     	; 0x78a <__divsf3+0x20>
 780:	5f 3f       	cpi	r21, 0xFF	; 255
 782:	29 f0       	breq	.+10     	; 0x78e <__divsf3+0x24>
 784:	0c 94 88 04 	jmp	0x910	; 0x910 <__fp_inf>
 788:	51 11       	cpse	r21, r1
 78a:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <__fp_szero>
 78e:	0c 94 8e 04 	jmp	0x91c	; 0x91c <__fp_nan>

00000792 <__divsf3x>:
 792:	0e 94 b0 04 	call	0x960	; 0x960 <__fp_split3>
 796:	68 f3       	brcs	.-38     	; 0x772 <__divsf3+0x8>

00000798 <__divsf3_pse>:
 798:	99 23       	and	r25, r25
 79a:	b1 f3       	breq	.-20     	; 0x788 <__divsf3+0x1e>
 79c:	55 23       	and	r21, r21
 79e:	91 f3       	breq	.-28     	; 0x784 <__divsf3+0x1a>
 7a0:	95 1b       	sub	r25, r21
 7a2:	55 0b       	sbc	r21, r21
 7a4:	bb 27       	eor	r27, r27
 7a6:	aa 27       	eor	r26, r26
 7a8:	62 17       	cp	r22, r18
 7aa:	73 07       	cpc	r23, r19
 7ac:	84 07       	cpc	r24, r20
 7ae:	38 f0       	brcs	.+14     	; 0x7be <__divsf3_pse+0x26>
 7b0:	9f 5f       	subi	r25, 0xFF	; 255
 7b2:	5f 4f       	sbci	r21, 0xFF	; 255
 7b4:	22 0f       	add	r18, r18
 7b6:	33 1f       	adc	r19, r19
 7b8:	44 1f       	adc	r20, r20
 7ba:	aa 1f       	adc	r26, r26
 7bc:	a9 f3       	breq	.-22     	; 0x7a8 <__divsf3_pse+0x10>
 7be:	35 d0       	rcall	.+106    	; 0x82a <__divsf3_pse+0x92>
 7c0:	0e 2e       	mov	r0, r30
 7c2:	3a f0       	brmi	.+14     	; 0x7d2 <__divsf3_pse+0x3a>
 7c4:	e0 e8       	ldi	r30, 0x80	; 128
 7c6:	32 d0       	rcall	.+100    	; 0x82c <__divsf3_pse+0x94>
 7c8:	91 50       	subi	r25, 0x01	; 1
 7ca:	50 40       	sbci	r21, 0x00	; 0
 7cc:	e6 95       	lsr	r30
 7ce:	00 1c       	adc	r0, r0
 7d0:	ca f7       	brpl	.-14     	; 0x7c4 <__divsf3_pse+0x2c>
 7d2:	2b d0       	rcall	.+86     	; 0x82a <__divsf3_pse+0x92>
 7d4:	fe 2f       	mov	r31, r30
 7d6:	29 d0       	rcall	.+82     	; 0x82a <__divsf3_pse+0x92>
 7d8:	66 0f       	add	r22, r22
 7da:	77 1f       	adc	r23, r23
 7dc:	88 1f       	adc	r24, r24
 7de:	bb 1f       	adc	r27, r27
 7e0:	26 17       	cp	r18, r22
 7e2:	37 07       	cpc	r19, r23
 7e4:	48 07       	cpc	r20, r24
 7e6:	ab 07       	cpc	r26, r27
 7e8:	b0 e8       	ldi	r27, 0x80	; 128
 7ea:	09 f0       	breq	.+2      	; 0x7ee <__divsf3_pse+0x56>
 7ec:	bb 0b       	sbc	r27, r27
 7ee:	80 2d       	mov	r24, r0
 7f0:	bf 01       	movw	r22, r30
 7f2:	ff 27       	eor	r31, r31
 7f4:	93 58       	subi	r25, 0x83	; 131
 7f6:	5f 4f       	sbci	r21, 0xFF	; 255
 7f8:	3a f0       	brmi	.+14     	; 0x808 <__divsf3_pse+0x70>
 7fa:	9e 3f       	cpi	r25, 0xFE	; 254
 7fc:	51 05       	cpc	r21, r1
 7fe:	78 f0       	brcs	.+30     	; 0x81e <__divsf3_pse+0x86>
 800:	0c 94 88 04 	jmp	0x910	; 0x910 <__fp_inf>
 804:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <__fp_szero>
 808:	5f 3f       	cpi	r21, 0xFF	; 255
 80a:	e4 f3       	brlt	.-8      	; 0x804 <__divsf3_pse+0x6c>
 80c:	98 3e       	cpi	r25, 0xE8	; 232
 80e:	d4 f3       	brlt	.-12     	; 0x804 <__divsf3_pse+0x6c>
 810:	86 95       	lsr	r24
 812:	77 95       	ror	r23
 814:	67 95       	ror	r22
 816:	b7 95       	ror	r27
 818:	f7 95       	ror	r31
 81a:	9f 5f       	subi	r25, 0xFF	; 255
 81c:	c9 f7       	brne	.-14     	; 0x810 <__divsf3_pse+0x78>
 81e:	88 0f       	add	r24, r24
 820:	91 1d       	adc	r25, r1
 822:	96 95       	lsr	r25
 824:	87 95       	ror	r24
 826:	97 f9       	bld	r25, 7
 828:	08 95       	ret
 82a:	e1 e0       	ldi	r30, 0x01	; 1
 82c:	66 0f       	add	r22, r22
 82e:	77 1f       	adc	r23, r23
 830:	88 1f       	adc	r24, r24
 832:	bb 1f       	adc	r27, r27
 834:	62 17       	cp	r22, r18
 836:	73 07       	cpc	r23, r19
 838:	84 07       	cpc	r24, r20
 83a:	ba 07       	cpc	r27, r26
 83c:	20 f0       	brcs	.+8      	; 0x846 <__divsf3_pse+0xae>
 83e:	62 1b       	sub	r22, r18
 840:	73 0b       	sbc	r23, r19
 842:	84 0b       	sbc	r24, r20
 844:	ba 0b       	sbc	r27, r26
 846:	ee 1f       	adc	r30, r30
 848:	88 f7       	brcc	.-30     	; 0x82c <__divsf3_pse+0x94>
 84a:	e0 95       	com	r30
 84c:	08 95       	ret

0000084e <__floatunsisf>:
 84e:	e8 94       	clt
 850:	09 c0       	rjmp	.+18     	; 0x864 <__floatsisf+0x12>

00000852 <__floatsisf>:
 852:	97 fb       	bst	r25, 7
 854:	3e f4       	brtc	.+14     	; 0x864 <__floatsisf+0x12>
 856:	90 95       	com	r25
 858:	80 95       	com	r24
 85a:	70 95       	com	r23
 85c:	61 95       	neg	r22
 85e:	7f 4f       	sbci	r23, 0xFF	; 255
 860:	8f 4f       	sbci	r24, 0xFF	; 255
 862:	9f 4f       	sbci	r25, 0xFF	; 255
 864:	99 23       	and	r25, r25
 866:	a9 f0       	breq	.+42     	; 0x892 <__floatsisf+0x40>
 868:	f9 2f       	mov	r31, r25
 86a:	96 e9       	ldi	r25, 0x96	; 150
 86c:	bb 27       	eor	r27, r27
 86e:	93 95       	inc	r25
 870:	f6 95       	lsr	r31
 872:	87 95       	ror	r24
 874:	77 95       	ror	r23
 876:	67 95       	ror	r22
 878:	b7 95       	ror	r27
 87a:	f1 11       	cpse	r31, r1
 87c:	f8 cf       	rjmp	.-16     	; 0x86e <__floatsisf+0x1c>
 87e:	fa f4       	brpl	.+62     	; 0x8be <__floatsisf+0x6c>
 880:	bb 0f       	add	r27, r27
 882:	11 f4       	brne	.+4      	; 0x888 <__floatsisf+0x36>
 884:	60 ff       	sbrs	r22, 0
 886:	1b c0       	rjmp	.+54     	; 0x8be <__floatsisf+0x6c>
 888:	6f 5f       	subi	r22, 0xFF	; 255
 88a:	7f 4f       	sbci	r23, 0xFF	; 255
 88c:	8f 4f       	sbci	r24, 0xFF	; 255
 88e:	9f 4f       	sbci	r25, 0xFF	; 255
 890:	16 c0       	rjmp	.+44     	; 0x8be <__floatsisf+0x6c>
 892:	88 23       	and	r24, r24
 894:	11 f0       	breq	.+4      	; 0x89a <__floatsisf+0x48>
 896:	96 e9       	ldi	r25, 0x96	; 150
 898:	11 c0       	rjmp	.+34     	; 0x8bc <__floatsisf+0x6a>
 89a:	77 23       	and	r23, r23
 89c:	21 f0       	breq	.+8      	; 0x8a6 <__floatsisf+0x54>
 89e:	9e e8       	ldi	r25, 0x8E	; 142
 8a0:	87 2f       	mov	r24, r23
 8a2:	76 2f       	mov	r23, r22
 8a4:	05 c0       	rjmp	.+10     	; 0x8b0 <__floatsisf+0x5e>
 8a6:	66 23       	and	r22, r22
 8a8:	71 f0       	breq	.+28     	; 0x8c6 <__floatsisf+0x74>
 8aa:	96 e8       	ldi	r25, 0x86	; 134
 8ac:	86 2f       	mov	r24, r22
 8ae:	70 e0       	ldi	r23, 0x00	; 0
 8b0:	60 e0       	ldi	r22, 0x00	; 0
 8b2:	2a f0       	brmi	.+10     	; 0x8be <__floatsisf+0x6c>
 8b4:	9a 95       	dec	r25
 8b6:	66 0f       	add	r22, r22
 8b8:	77 1f       	adc	r23, r23
 8ba:	88 1f       	adc	r24, r24
 8bc:	da f7       	brpl	.-10     	; 0x8b4 <__floatsisf+0x62>
 8be:	88 0f       	add	r24, r24
 8c0:	96 95       	lsr	r25
 8c2:	87 95       	ror	r24
 8c4:	97 f9       	bld	r25, 7
 8c6:	08 95       	ret

000008c8 <__fp_cmp>:
 8c8:	99 0f       	add	r25, r25
 8ca:	00 08       	sbc	r0, r0
 8cc:	55 0f       	add	r21, r21
 8ce:	aa 0b       	sbc	r26, r26
 8d0:	e0 e8       	ldi	r30, 0x80	; 128
 8d2:	fe ef       	ldi	r31, 0xFE	; 254
 8d4:	16 16       	cp	r1, r22
 8d6:	17 06       	cpc	r1, r23
 8d8:	e8 07       	cpc	r30, r24
 8da:	f9 07       	cpc	r31, r25
 8dc:	c0 f0       	brcs	.+48     	; 0x90e <__stack+0xf>
 8de:	12 16       	cp	r1, r18
 8e0:	13 06       	cpc	r1, r19
 8e2:	e4 07       	cpc	r30, r20
 8e4:	f5 07       	cpc	r31, r21
 8e6:	98 f0       	brcs	.+38     	; 0x90e <__stack+0xf>
 8e8:	62 1b       	sub	r22, r18
 8ea:	73 0b       	sbc	r23, r19
 8ec:	84 0b       	sbc	r24, r20
 8ee:	95 0b       	sbc	r25, r21
 8f0:	39 f4       	brne	.+14     	; 0x900 <__stack+0x1>
 8f2:	0a 26       	eor	r0, r26
 8f4:	61 f0       	breq	.+24     	; 0x90e <__stack+0xf>
 8f6:	23 2b       	or	r18, r19
 8f8:	24 2b       	or	r18, r20
 8fa:	25 2b       	or	r18, r21
 8fc:	21 f4       	brne	.+8      	; 0x906 <__stack+0x7>
 8fe:	08 95       	ret
 900:	0a 26       	eor	r0, r26
 902:	09 f4       	brne	.+2      	; 0x906 <__stack+0x7>
 904:	a1 40       	sbci	r26, 0x01	; 1
 906:	a6 95       	lsr	r26
 908:	8f ef       	ldi	r24, 0xFF	; 255
 90a:	81 1d       	adc	r24, r1
 90c:	81 1d       	adc	r24, r1
 90e:	08 95       	ret

00000910 <__fp_inf>:
 910:	97 f9       	bld	r25, 7
 912:	9f 67       	ori	r25, 0x7F	; 127
 914:	80 e8       	ldi	r24, 0x80	; 128
 916:	70 e0       	ldi	r23, 0x00	; 0
 918:	60 e0       	ldi	r22, 0x00	; 0
 91a:	08 95       	ret

0000091c <__fp_nan>:
 91c:	9f ef       	ldi	r25, 0xFF	; 255
 91e:	80 ec       	ldi	r24, 0xC0	; 192
 920:	08 95       	ret

00000922 <__fp_pscA>:
 922:	00 24       	eor	r0, r0
 924:	0a 94       	dec	r0
 926:	16 16       	cp	r1, r22
 928:	17 06       	cpc	r1, r23
 92a:	18 06       	cpc	r1, r24
 92c:	09 06       	cpc	r0, r25
 92e:	08 95       	ret

00000930 <__fp_pscB>:
 930:	00 24       	eor	r0, r0
 932:	0a 94       	dec	r0
 934:	12 16       	cp	r1, r18
 936:	13 06       	cpc	r1, r19
 938:	14 06       	cpc	r1, r20
 93a:	05 06       	cpc	r0, r21
 93c:	08 95       	ret

0000093e <__fp_round>:
 93e:	09 2e       	mov	r0, r25
 940:	03 94       	inc	r0
 942:	00 0c       	add	r0, r0
 944:	11 f4       	brne	.+4      	; 0x94a <__fp_round+0xc>
 946:	88 23       	and	r24, r24
 948:	52 f0       	brmi	.+20     	; 0x95e <__fp_round+0x20>
 94a:	bb 0f       	add	r27, r27
 94c:	40 f4       	brcc	.+16     	; 0x95e <__fp_round+0x20>
 94e:	bf 2b       	or	r27, r31
 950:	11 f4       	brne	.+4      	; 0x956 <__fp_round+0x18>
 952:	60 ff       	sbrs	r22, 0
 954:	04 c0       	rjmp	.+8      	; 0x95e <__fp_round+0x20>
 956:	6f 5f       	subi	r22, 0xFF	; 255
 958:	7f 4f       	sbci	r23, 0xFF	; 255
 95a:	8f 4f       	sbci	r24, 0xFF	; 255
 95c:	9f 4f       	sbci	r25, 0xFF	; 255
 95e:	08 95       	ret

00000960 <__fp_split3>:
 960:	57 fd       	sbrc	r21, 7
 962:	90 58       	subi	r25, 0x80	; 128
 964:	44 0f       	add	r20, r20
 966:	55 1f       	adc	r21, r21
 968:	59 f0       	breq	.+22     	; 0x980 <__fp_splitA+0x10>
 96a:	5f 3f       	cpi	r21, 0xFF	; 255
 96c:	71 f0       	breq	.+28     	; 0x98a <__fp_splitA+0x1a>
 96e:	47 95       	ror	r20

00000970 <__fp_splitA>:
 970:	88 0f       	add	r24, r24
 972:	97 fb       	bst	r25, 7
 974:	99 1f       	adc	r25, r25
 976:	61 f0       	breq	.+24     	; 0x990 <__fp_splitA+0x20>
 978:	9f 3f       	cpi	r25, 0xFF	; 255
 97a:	79 f0       	breq	.+30     	; 0x99a <__fp_splitA+0x2a>
 97c:	87 95       	ror	r24
 97e:	08 95       	ret
 980:	12 16       	cp	r1, r18
 982:	13 06       	cpc	r1, r19
 984:	14 06       	cpc	r1, r20
 986:	55 1f       	adc	r21, r21
 988:	f2 cf       	rjmp	.-28     	; 0x96e <__fp_split3+0xe>
 98a:	46 95       	lsr	r20
 98c:	f1 df       	rcall	.-30     	; 0x970 <__fp_splitA>
 98e:	08 c0       	rjmp	.+16     	; 0x9a0 <__fp_splitA+0x30>
 990:	16 16       	cp	r1, r22
 992:	17 06       	cpc	r1, r23
 994:	18 06       	cpc	r1, r24
 996:	99 1f       	adc	r25, r25
 998:	f1 cf       	rjmp	.-30     	; 0x97c <__fp_splitA+0xc>
 99a:	86 95       	lsr	r24
 99c:	71 05       	cpc	r23, r1
 99e:	61 05       	cpc	r22, r1
 9a0:	08 94       	sec
 9a2:	08 95       	ret

000009a4 <__fp_zero>:
 9a4:	e8 94       	clt

000009a6 <__fp_szero>:
 9a6:	bb 27       	eor	r27, r27
 9a8:	66 27       	eor	r22, r22
 9aa:	77 27       	eor	r23, r23
 9ac:	cb 01       	movw	r24, r22
 9ae:	97 f9       	bld	r25, 7
 9b0:	08 95       	ret

000009b2 <__gesf2>:
 9b2:	0e 94 64 04 	call	0x8c8	; 0x8c8 <__fp_cmp>
 9b6:	08 f4       	brcc	.+2      	; 0x9ba <__gesf2+0x8>
 9b8:	8f ef       	ldi	r24, 0xFF	; 255
 9ba:	08 95       	ret

000009bc <__udivmodsi4>:
 9bc:	a1 e2       	ldi	r26, 0x21	; 33
 9be:	1a 2e       	mov	r1, r26
 9c0:	aa 1b       	sub	r26, r26
 9c2:	bb 1b       	sub	r27, r27
 9c4:	fd 01       	movw	r30, r26
 9c6:	0d c0       	rjmp	.+26     	; 0x9e2 <__udivmodsi4_ep>

000009c8 <__udivmodsi4_loop>:
 9c8:	aa 1f       	adc	r26, r26
 9ca:	bb 1f       	adc	r27, r27
 9cc:	ee 1f       	adc	r30, r30
 9ce:	ff 1f       	adc	r31, r31
 9d0:	a2 17       	cp	r26, r18
 9d2:	b3 07       	cpc	r27, r19
 9d4:	e4 07       	cpc	r30, r20
 9d6:	f5 07       	cpc	r31, r21
 9d8:	20 f0       	brcs	.+8      	; 0x9e2 <__udivmodsi4_ep>
 9da:	a2 1b       	sub	r26, r18
 9dc:	b3 0b       	sbc	r27, r19
 9de:	e4 0b       	sbc	r30, r20
 9e0:	f5 0b       	sbc	r31, r21

000009e2 <__udivmodsi4_ep>:
 9e2:	66 1f       	adc	r22, r22
 9e4:	77 1f       	adc	r23, r23
 9e6:	88 1f       	adc	r24, r24
 9e8:	99 1f       	adc	r25, r25
 9ea:	1a 94       	dec	r1
 9ec:	69 f7       	brne	.-38     	; 0x9c8 <__udivmodsi4_loop>
 9ee:	60 95       	com	r22
 9f0:	70 95       	com	r23
 9f2:	80 95       	com	r24
 9f4:	90 95       	com	r25
 9f6:	9b 01       	movw	r18, r22
 9f8:	ac 01       	movw	r20, r24
 9fa:	bd 01       	movw	r22, r26
 9fc:	cf 01       	movw	r24, r30
 9fe:	08 95       	ret

00000a00 <_exit>:
 a00:	f8 94       	cli

00000a02 <__stop_program>:
 a02:	ff cf       	rjmp	.-2      	; 0xa02 <__stop_program>
