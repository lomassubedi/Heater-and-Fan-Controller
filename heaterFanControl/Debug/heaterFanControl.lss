
heaterFanControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000aa0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a2c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  00000aa0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000aa0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ad0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001006  00000000  00000000  00000bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f9  00000000  00000000  00001bde  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000094a  00000000  00000000  000023d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001cc  00000000  00000000  00002d24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000554  00000000  00000000  00002ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000882  00000000  00000000  00003444  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00003cc6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_7>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 30       	cpi	r26, 0x08	; 8
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 70 01 	call	0x2e0	; 0x2e0 <main>
  88:	0c 94 14 05 	jmp	0xa28	; 0xa28 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_7>:
}

void pwm_fan(uint8_t p) {
	/*OCR1A = (uint16_t)((p / 100) *  TOP_VAL);*/
	/*OCR1A = TOP_VAL;*/
	OCR1A = p;
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	3f 93       	push	r19
  9e:	4f 93       	push	r20
  a0:	5f 93       	push	r21
  a2:	6f 93       	push	r22
  a4:	7f 93       	push	r23
  a6:	8f 93       	push	r24
  a8:	9f 93       	push	r25
  aa:	af 93       	push	r26
  ac:	bf 93       	push	r27
  ae:	ef 93       	push	r30
  b0:	ff 93       	push	r31
  b2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <milliseconds>
  b6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <milliseconds+0x1>
  ba:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <milliseconds+0x2>
  be:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <milliseconds+0x3>
  c2:	01 96       	adiw	r24, 0x01	; 1
  c4:	a1 1d       	adc	r26, r1
  c6:	b1 1d       	adc	r27, r1
  c8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <milliseconds>
  cc:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <milliseconds+0x1>
  d0:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <milliseconds+0x2>
  d4:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <milliseconds+0x3>
  d8:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <milliseconds>
  dc:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <milliseconds+0x1>
  e0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <milliseconds+0x2>
  e4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <milliseconds+0x3>
  e8:	28 e8       	ldi	r18, 0x88	; 136
  ea:	33 e1       	ldi	r19, 0x13	; 19
  ec:	40 e0       	ldi	r20, 0x00	; 0
  ee:	50 e0       	ldi	r21, 0x00	; 0
  f0:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__udivmodsi4>
  f4:	67 2b       	or	r22, r23
  f6:	68 2b       	or	r22, r24
  f8:	69 2b       	or	r22, r25
  fa:	19 f4       	brne	.+6      	; 0x102 <__vector_7+0x72>
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 102:	ff 91       	pop	r31
 104:	ef 91       	pop	r30
 106:	bf 91       	pop	r27
 108:	af 91       	pop	r26
 10a:	9f 91       	pop	r25
 10c:	8f 91       	pop	r24
 10e:	7f 91       	pop	r23
 110:	6f 91       	pop	r22
 112:	5f 91       	pop	r21
 114:	4f 91       	pop	r20
 116:	3f 91       	pop	r19
 118:	2f 91       	pop	r18
 11a:	0f 90       	pop	r0
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	0f 90       	pop	r0
 120:	1f 90       	pop	r1
 122:	18 95       	reti

00000124 <init_timerModule>:
 124:	e0 e7       	ldi	r30, 0x70	; 112
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	82 60       	ori	r24, 0x02	; 2
 12c:	80 83       	st	Z, r24
 12e:	e0 eb       	ldi	r30, 0xB0	; 176
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	82 60       	ori	r24, 0x02	; 2
 136:	80 83       	st	Z, r24
 138:	e1 eb       	ldi	r30, 0xB1	; 177
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	86 60       	ori	r24, 0x06	; 6
 140:	80 83       	st	Z, r24
 142:	8f e3       	ldi	r24, 0x3F	; 63
 144:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 148:	08 95       	ret

0000014a <pwm_init>:
 14a:	56 9a       	sbi	0x0a, 6	; 10
 14c:	5e 98       	cbi	0x0b, 6	; 11
 14e:	81 e8       	ldi	r24, 0x81	; 129
 150:	84 bd       	out	0x24, r24	; 36
 152:	83 e0       	ldi	r24, 0x03	; 3
 154:	85 bd       	out	0x25, r24	; 37
 156:	16 bc       	out	0x26, r1	; 38
 158:	17 bc       	out	0x27, r1	; 39
 15a:	21 9a       	sbi	0x04, 1	; 4
 15c:	29 98       	cbi	0x05, 1	; 5
 15e:	80 e8       	ldi	r24, 0x80	; 128
 160:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 164:	83 e1       	ldi	r24, 0x13	; 19
 166:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 16a:	8f ef       	ldi	r24, 0xFF	; 255
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 172:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 176:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 17a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 17e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 182:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 186:	08 95       	ret

00000188 <init_io>:
 188:	8a b1       	in	r24, 0x0a	; 10
 18a:	88 61       	ori	r24, 0x18	; 24
 18c:	8a b9       	out	0x0a, r24	; 10
 18e:	8a b1       	in	r24, 0x0a	; 10
 190:	88 7f       	andi	r24, 0xF8	; 248
 192:	8a b9       	out	0x0a, r24	; 10
 194:	34 b1       	in	r19, 0x04	; 4
 196:	24 b1       	in	r18, 0x04	; 4
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <init_io+0x1a>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	3a 95       	dec	r19
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <init_io+0x16>
 1a6:	82 2b       	or	r24, r18
 1a8:	84 b9       	out	0x04, r24	; 4
 1aa:	08 95       	ret

000001ac <init_adc>:
 1ac:	ea e7       	ldi	r30, 0x7A	; 122
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	80 81       	ld	r24, Z
 1b2:	87 68       	ori	r24, 0x87	; 135
 1b4:	80 83       	st	Z, r24
 1b6:	ec e7       	ldi	r30, 0x7C	; 124
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	80 81       	ld	r24, Z
 1bc:	87 64       	ori	r24, 0x47	; 71
 1be:	80 83       	st	Z, r24
 1c0:	08 95       	ret

000001c2 <get_temp>:
}

float get_temp() {
	float temperature = 0.0;
	// Start conversion
	ADCSRA |= (1 << ADSC);
 1c2:	ea e7       	ldi	r30, 0x7A	; 122
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	80 64       	ori	r24, 0x40	; 64
 1ca:	80 83       	st	Z, r24
	
	// Wait until the conversion completes 
	while (ADCSRA & (1 << ADSC));
 1cc:	80 81       	ld	r24, Z
 1ce:	86 fd       	sbrc	r24, 6
 1d0:	fd cf       	rjmp	.-6      	; 0x1cc <get_temp+0xa>

	// Temperature calculation goes follows
	// 1 Degree Centigrade = 2.049 steps 
	temperature = ADC / 2.049;
 1d2:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 1d6:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>

	return temperature;
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 3b 04 	call	0x876	; 0x876 <__floatunsisf>
 1e2:	21 ed       	ldi	r18, 0xD1	; 209
 1e4:	32 e2       	ldi	r19, 0x22	; 34
 1e6:	43 e0       	ldi	r20, 0x03	; 3
 1e8:	50 e4       	ldi	r21, 0x40	; 64
 1ea:	0e 94 c9 03 	call	0x792	; 0x792 <__divsf3>
}
 1ee:	08 95       	ret

000001f0 <sw_a>:

uint8_t sw_a() {
	if(IO_PORTD_IN & (1 << SW_A)) {
 1f0:	89 b1       	in	r24, 0x09	; 9
		return 1;
	} else {
		return 0;
	}
}
 1f2:	82 fb       	bst	r24, 2
 1f4:	88 27       	eor	r24, r24
 1f6:	80 f9       	bld	r24, 0
 1f8:	08 95       	ret

000001fa <get_sw_a>:

uint8_t get_sw_a() {
	/*static uint8_t count_sw_a = 0;*/
	
	if(sw_a()) {		
 1fa:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <sw_a>
 1fe:	88 23       	and	r24, r24
 200:	c9 f0       	breq	.+50     	; 0x234 <get_sw_a+0x3a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 202:	2f ef       	ldi	r18, 0xFF	; 255
 204:	89 ef       	ldi	r24, 0xF9	; 249
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	21 50       	subi	r18, 0x01	; 1
 20a:	80 40       	sbci	r24, 0x00	; 0
 20c:	90 40       	sbci	r25, 0x00	; 0
 20e:	e1 f7       	brne	.-8      	; 0x208 <get_sw_a+0xe>
 210:	00 c0       	rjmp	.+0      	; 0x212 <get_sw_a+0x18>
 212:	00 00       	nop
		_delay_ms(20);  // De-bounce Time
		while(sw_a());
 214:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <sw_a>
 218:	81 11       	cpse	r24, r1
 21a:	fc cf       	rjmp	.-8      	; 0x214 <get_sw_a+0x1a>
		count_sw_a++;	// Increment the counter
 21c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <count_sw_a>
 220:	8f 5f       	subi	r24, 0xFF	; 255
 222:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <count_sw_a>
		
		if(count_sw_a > 4)	count_sw_a = 1; // Initial Value is 1
 226:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <count_sw_a>
 22a:	85 30       	cpi	r24, 0x05	; 5
 22c:	18 f0       	brcs	.+6      	; 0x234 <get_sw_a+0x3a>
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <count_sw_a>
	}
	
	return count_sw_a;
 234:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <count_sw_a>
}
 238:	08 95       	ret

0000023a <sw_b>:

uint8_t sw_b() {
	if(IO_PORTD_IN & (1 << SW_B)) {
 23a:	89 b1       	in	r24, 0x09	; 9
		return 1;
	} else {
		return 0;
	}
}
 23c:	86 95       	lsr	r24
 23e:	81 70       	andi	r24, 0x01	; 1
 240:	08 95       	ret

00000242 <get_sw_b>:

uint8_t get_sw_b() {
	
	/*static uint8_t count_sw_b = 0;*/
	
	if(sw_b()) {
 242:	0e 94 1d 01 	call	0x23a	; 0x23a <sw_b>
 246:	88 23       	and	r24, r24
 248:	c9 f0       	breq	.+50     	; 0x27c <get_sw_b+0x3a>
 24a:	2f ef       	ldi	r18, 0xFF	; 255
 24c:	89 ef       	ldi	r24, 0xF9	; 249
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	21 50       	subi	r18, 0x01	; 1
 252:	80 40       	sbci	r24, 0x00	; 0
 254:	90 40       	sbci	r25, 0x00	; 0
 256:	e1 f7       	brne	.-8      	; 0x250 <get_sw_b+0xe>
 258:	00 c0       	rjmp	.+0      	; 0x25a <get_sw_b+0x18>
 25a:	00 00       	nop
		_delay_ms(20);  // De-bounce Time
		while(sw_b());
 25c:	0e 94 1d 01 	call	0x23a	; 0x23a <sw_b>
 260:	81 11       	cpse	r24, r1
 262:	fc cf       	rjmp	.-8      	; 0x25c <get_sw_b+0x1a>
		count_sw_b++;	// Increment the counter
 264:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count_sw_b>
 268:	8f 5f       	subi	r24, 0xFF	; 255
 26a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <count_sw_b>
		
		if(count_sw_b > 2)	count_sw_b = 1; // Initial Value is 1
 26e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count_sw_b>
 272:	83 30       	cpi	r24, 0x03	; 3
 274:	18 f0       	brcs	.+6      	; 0x27c <get_sw_b+0x3a>
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <count_sw_b>
	}
	
	return count_sw_b;
 27c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count_sw_b>
}
 280:	08 95       	ret

00000282 <sw_c>:

uint8_t sw_c() {
	if(IO_PORTD_IN & (1 << SW_C)) {
 282:	89 b1       	in	r24, 0x09	; 9
		return 1;
	} else {
		return 0;
	}
}
 284:	81 70       	andi	r24, 0x01	; 1
 286:	08 95       	ret

00000288 <get_sw_c>:

uint8_t get_sw_c() {
	
	/*static uint8_t count_sw_c = 0;*/
	
	if(sw_c()) {
 288:	0e 94 41 01 	call	0x282	; 0x282 <sw_c>
 28c:	88 23       	and	r24, r24
 28e:	c9 f0       	breq	.+50     	; 0x2c2 <get_sw_c+0x3a>
 290:	2f ef       	ldi	r18, 0xFF	; 255
 292:	89 ef       	ldi	r24, 0xF9	; 249
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	21 50       	subi	r18, 0x01	; 1
 298:	80 40       	sbci	r24, 0x00	; 0
 29a:	90 40       	sbci	r25, 0x00	; 0
 29c:	e1 f7       	brne	.-8      	; 0x296 <get_sw_c+0xe>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <get_sw_c+0x18>
 2a0:	00 00       	nop
		_delay_ms(20);  // De-bounce Time
		while(sw_c());
 2a2:	0e 94 41 01 	call	0x282	; 0x282 <sw_c>
 2a6:	81 11       	cpse	r24, r1
 2a8:	fc cf       	rjmp	.-8      	; 0x2a2 <get_sw_c+0x1a>
		count_sw_c++;	// Increment the counter
 2aa:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <count_sw_c>
 2ae:	8f 5f       	subi	r24, 0xFF	; 255
 2b0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <count_sw_c>
		
		if(count_sw_c > 4)	count_sw_c = 1; // Initial Value is 1
 2b4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <count_sw_c>
 2b8:	85 30       	cpi	r24, 0x05	; 5
 2ba:	18 f0       	brcs	.+6      	; 0x2c2 <get_sw_c+0x3a>
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <count_sw_c>
	}
	
	return count_sw_c;
 2c2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <count_sw_c>
}
 2c6:	08 95       	ret

000002c8 <led_heater_on>:

void led_heater_on() {
	IO_PORTD_OUT |= (1 << H_LED_CNTL);
 2c8:	5c 9a       	sbi	0x0b, 4	; 11
 2ca:	08 95       	ret

000002cc <led_heater_off>:
	return;
}

void led_heater_off() {
	IO_PORTD_OUT &= ~(1 << H_LED_CNTL);
 2cc:	5c 98       	cbi	0x0b, 4	; 11
 2ce:	08 95       	ret

000002d0 <led_fan_on>:
	return;
}

void led_fan_on() {
	IO_PORTD_OUT |= (1 << F_LED_CNTL);
 2d0:	5b 9a       	sbi	0x0b, 3	; 11
 2d2:	08 95       	ret

000002d4 <led_fan_off>:
	return;
}

void led_fan_off() {
	IO_PORTD_OUT &= ~(1 << F_LED_CNTL);
 2d4:	5b 98       	cbi	0x0b, 3	; 11
 2d6:	08 95       	ret

000002d8 <led_sig_on>:
	return;
}

void led_sig_on() {
	IO_PORTB_OUT |= (1 << LED_SIG);
 2d8:	2a 9a       	sbi	0x05, 2	; 5
 2da:	08 95       	ret

000002dc <led_sig_off>:
	return;
}

void led_sig_off() {
	IO_PORTB_OUT &= ~(1 << LED_SIG);
 2dc:	2a 98       	cbi	0x05, 2	; 5
 2de:	08 95       	ret

000002e0 <main>:
	return;
}

int main(void) {    
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
 2e4:	cd b7       	in	r28, 0x3d	; 61
 2e6:	de b7       	in	r29, 0x3e	; 62
 2e8:	29 97       	sbiw	r28, 0x09	; 9
 2ea:	0f b6       	in	r0, 0x3f	; 63
 2ec:	f8 94       	cli
 2ee:	de bf       	out	0x3e, r29	; 62
 2f0:	0f be       	out	0x3f, r0	; 63
 2f2:	cd bf       	out	0x3d, r28	; 61
	
	pwm_init();
 2f4:	0e 94 a5 00 	call	0x14a	; 0x14a <pwm_init>
	init_timerModule();
 2f8:	0e 94 92 00 	call	0x124	; 0x124 <init_timerModule>
	sei();
 2fc:	78 94       	sei
	init_adc();
 2fe:	0e 94 d6 00 	call	0x1ac	; 0x1ac <init_adc>
	init_io();
 302:	0e 94 c4 00 	call	0x188	; 0x188 <init_io>
	uint8_t swc_val = 0;
	uint8_t swc_prev_val = 0;

	unsigned long time_val_heater_start = 0;
	unsigned long time_val_fan_start = 0;
	unsigned long time_val_led_start = 0;
 306:	81 2c       	mov	r8, r1
 308:	91 2c       	mov	r9, r1
 30a:	54 01       	movw	r10, r8

	uint8_t swc_val = 0;
	uint8_t swc_prev_val = 0;

	unsigned long time_val_heater_start = 0;
	unsigned long time_val_fan_start = 0;
 30c:	21 2c       	mov	r2, r1
 30e:	31 2c       	mov	r3, r1
 310:	21 01       	movw	r4, r2
	uint8_t swb_prev_val = 0;

	uint8_t swc_val = 0;
	uint8_t swc_prev_val = 0;

	unsigned long time_val_heater_start = 0;
 312:	19 82       	std	Y+1, r1	; 0x01
 314:	1a 82       	std	Y+2, r1	; 0x02
 316:	1b 82       	std	Y+3, r1	; 0x03
 318:	1c 82       	std	Y+4, r1	; 0x04

	uint8_t swb_val = 0;
	uint8_t swb_prev_val = 0;

	uint8_t swc_val = 0;
	uint8_t swc_prev_val = 0;
 31a:	d1 2c       	mov	r13, r1
	
	uint8_t swa_val = 0;
	uint8_t swa_prev_val = 0;

	uint8_t swb_val = 0;
	uint8_t swb_prev_val = 0;
 31c:	71 2c       	mov	r7, r1
	sei();
	init_adc();
	init_io();
	
	uint8_t swa_val = 0;
	uint8_t swa_prev_val = 0;
 31e:	c1 2c       	mov	r12, r1
		
		// --------------- Temperature sensing and Control ----------
		// ---- Check sensor each 120 seconds -------------------------
		if(flag_check_sensor) {
			flag_check_sensor = 0;
			PORTC ^= (1 << PORTC0);
 320:	66 24       	eor	r6, r6
 322:	63 94       	inc	r6
	float temp_avg  = 0.0;
	double temp_sum = 0.0;

    while (1) {		
		
		swa_val = get_sw_a();
 324:	0e 94 fd 00 	call	0x1fa	; 0x1fa <get_sw_a>
 328:	e8 2e       	mov	r14, r24

		// ------- Heater Control -------------
		if(swa_val != swa_prev_val) {
 32a:	c8 16       	cp	r12, r24
 32c:	09 f4       	brne	.+2      	; 0x330 <main+0x50>
 32e:	4f c0       	rjmp	.+158    	; 0x3ce <main+0xee>
}

void pwm_fan(uint8_t p) {
	/*OCR1A = (uint16_t)((p / 100) *  TOP_VAL);*/
	/*OCR1A = TOP_VAL;*/
	OCR1A = p;
 330:	a8 e8       	ldi	r26, 0x88	; 136
 332:	b0 e0       	ldi	r27, 0x00	; 0
 334:	11 96       	adiw	r26, 0x01	; 1
 336:	1c 92       	st	X, r1
 338:	1e 92       	st	-X, r1
		// ------- Heater Control -------------
		if(swa_val != swa_prev_val) {
			
			// --- Clear all other stuffs (fan/led)-----
			pwm_fan(PWM_FAN_PERCENT_OFF);
			led_fan_off();
 33a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <led_fan_off>
			led_sig_off();
 33e:	0e 94 6e 01 	call	0x2dc	; 0x2dc <led_sig_off>

			// Clear the tap history
			count_sw_b = 0; swb_prev_val = 0;
 342:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <count_sw_b>
			count_sw_c = 0; swc_prev_val = 0;
 346:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <count_sw_c>
	if((milliseconds % SENSOR_CHECK_TIME) == 0)
		flag_check_sensor = 1;
}

unsigned long millis(void) {
	return milliseconds;
 34a:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <milliseconds>
 34e:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <milliseconds+0x1>
 352:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <milliseconds+0x2>
 356:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <milliseconds+0x3>
 35a:	29 83       	std	Y+1, r18	; 0x01
 35c:	3a 83       	std	Y+2, r19	; 0x02
 35e:	4b 83       	std	Y+3, r20	; 0x03
 360:	5c 83       	std	Y+4, r21	; 0x04
			
			// ---- Proceed to heater work
			time_val_heater_start = millis(); 
			swa_prev_val = swa_val;

			switch (swa_val) {
 362:	32 e0       	ldi	r19, 0x02	; 2
 364:	e3 16       	cp	r14, r19
 366:	a9 f0       	breq	.+42     	; 0x392 <main+0xb2>
 368:	3e 15       	cp	r19, r14
 36a:	20 f0       	brcs	.+8      	; 0x374 <main+0x94>
 36c:	41 e0       	ldi	r20, 0x01	; 1
 36e:	e4 16       	cp	r14, r20
 370:	41 f0       	breq	.+16     	; 0x382 <main+0xa2>
 372:	26 c0       	rjmp	.+76     	; 0x3c0 <main+0xe0>
 374:	53 e0       	ldi	r21, 0x03	; 3
 376:	e5 16       	cp	r14, r21
 378:	a1 f0       	breq	.+40     	; 0x3a2 <main+0xc2>
 37a:	84 e0       	ldi	r24, 0x04	; 4
 37c:	e8 16       	cp	r14, r24
 37e:	c9 f0       	breq	.+50     	; 0x3b2 <main+0xd2>
 380:	1f c0       	rjmp	.+62     	; 0x3c0 <main+0xe0>
	return;
}

void pwm_heater(uint8_t p) {
	/*OCR0A = (uint8_t)((p / 100) * 255);*/
	OCR0A = p;
 382:	93 e3       	ldi	r25, 0x33	; 51
 384:	97 bd       	out	0x27, r25	; 39
			swa_prev_val = swa_val;

			switch (swa_val) {
				case 1:
					pwm_heater(PWM_HEATER_PERCENT_LOW);
					led_heater_on();
 386:	0e 94 64 01 	call	0x2c8	; 0x2c8 <led_heater_on>
			count_sw_b = 0; swb_prev_val = 0;
			count_sw_c = 0; swc_prev_val = 0;
			
			// ---- Proceed to heater work
			time_val_heater_start = millis(); 
			swa_prev_val = swa_val;
 38a:	ce 2c       	mov	r12, r14
			led_fan_off();
			led_sig_off();

			// Clear the tap history
			count_sw_b = 0; swb_prev_val = 0;
			count_sw_c = 0; swc_prev_val = 0;
 38c:	d1 2c       	mov	r13, r1
			pwm_fan(PWM_FAN_PERCENT_OFF);
			led_fan_off();
			led_sig_off();

			// Clear the tap history
			count_sw_b = 0; swb_prev_val = 0;
 38e:	71 2c       	mov	r7, r1

			switch (swa_val) {
				case 1:
					pwm_heater(PWM_HEATER_PERCENT_LOW);
					led_heater_on();
				break;
 390:	1f c0       	rjmp	.+62     	; 0x3d0 <main+0xf0>
	return;
}

void pwm_heater(uint8_t p) {
	/*OCR0A = (uint8_t)((p / 100) * 255);*/
	OCR0A = p;
 392:	a6 e6       	ldi	r26, 0x66	; 102
 394:	a7 bd       	out	0x27, r26	; 39
					led_heater_on();
				break;
				
				case 2:
					pwm_heater(PWM_HEATER_PERCENT_MID);
					led_heater_on();
 396:	0e 94 64 01 	call	0x2c8	; 0x2c8 <led_heater_on>
			count_sw_b = 0; swb_prev_val = 0;
			count_sw_c = 0; swc_prev_val = 0;
			
			// ---- Proceed to heater work
			time_val_heater_start = millis(); 
			swa_prev_val = swa_val;
 39a:	ce 2c       	mov	r12, r14
			led_fan_off();
			led_sig_off();

			// Clear the tap history
			count_sw_b = 0; swb_prev_val = 0;
			count_sw_c = 0; swc_prev_val = 0;
 39c:	d1 2c       	mov	r13, r1
			pwm_fan(PWM_FAN_PERCENT_OFF);
			led_fan_off();
			led_sig_off();

			// Clear the tap history
			count_sw_b = 0; swb_prev_val = 0;
 39e:	71 2c       	mov	r7, r1
				break;
				
				case 2:
					pwm_heater(PWM_HEATER_PERCENT_MID);
					led_heater_on();
				break;
 3a0:	17 c0       	rjmp	.+46     	; 0x3d0 <main+0xf0>
	return;
}

void pwm_heater(uint8_t p) {
	/*OCR0A = (uint8_t)((p / 100) * 255);*/
	OCR0A = p;
 3a2:	b9 e9       	ldi	r27, 0x99	; 153
 3a4:	b7 bd       	out	0x27, r27	; 39
					led_heater_on();
				break;
				
				case 3:
					pwm_heater(PWM_HEATER_PERCENT_HIGH);
					led_heater_on();
 3a6:	0e 94 64 01 	call	0x2c8	; 0x2c8 <led_heater_on>
			count_sw_b = 0; swb_prev_val = 0;
			count_sw_c = 0; swc_prev_val = 0;
			
			// ---- Proceed to heater work
			time_val_heater_start = millis(); 
			swa_prev_val = swa_val;
 3aa:	ce 2c       	mov	r12, r14
			led_fan_off();
			led_sig_off();

			// Clear the tap history
			count_sw_b = 0; swb_prev_val = 0;
			count_sw_c = 0; swc_prev_val = 0;
 3ac:	d1 2c       	mov	r13, r1
			pwm_fan(PWM_FAN_PERCENT_OFF);
			led_fan_off();
			led_sig_off();

			// Clear the tap history
			count_sw_b = 0; swb_prev_val = 0;
 3ae:	71 2c       	mov	r7, r1
				break;
				
				case 3:
					pwm_heater(PWM_HEATER_PERCENT_HIGH);
					led_heater_on();
				break;
 3b0:	0f c0       	rjmp	.+30     	; 0x3d0 <main+0xf0>
	return;
}

void pwm_heater(uint8_t p) {
	/*OCR0A = (uint8_t)((p / 100) * 255);*/
	OCR0A = p;
 3b2:	17 bc       	out	0x27, r1	; 39
					led_heater_on();
				break;
				
				case 4:
					pwm_heater(PWM_HEATER_PERCENT_OFF);
					led_heater_off();
 3b4:	0e 94 66 01 	call	0x2cc	; 0x2cc <led_heater_off>
			count_sw_b = 0; swb_prev_val = 0;
			count_sw_c = 0; swc_prev_val = 0;
			
			// ---- Proceed to heater work
			time_val_heater_start = millis(); 
			swa_prev_val = swa_val;
 3b8:	ce 2c       	mov	r12, r14
			led_fan_off();
			led_sig_off();

			// Clear the tap history
			count_sw_b = 0; swb_prev_val = 0;
			count_sw_c = 0; swc_prev_val = 0;
 3ba:	d1 2c       	mov	r13, r1
			pwm_fan(PWM_FAN_PERCENT_OFF);
			led_fan_off();
			led_sig_off();

			// Clear the tap history
			count_sw_b = 0; swb_prev_val = 0;
 3bc:	71 2c       	mov	r7, r1
				break;
				
				case 4:
					pwm_heater(PWM_HEATER_PERCENT_OFF);
					led_heater_off();
				break;
 3be:	08 c0       	rjmp	.+16     	; 0x3d0 <main+0xf0>
	return;
}

void pwm_heater(uint8_t p) {
	/*OCR0A = (uint8_t)((p / 100) * 255);*/
	OCR0A = p;
 3c0:	17 bc       	out	0x27, r1	; 39
					led_heater_off();
				break;
				
				default:
					pwm_heater(PWM_HEATER_PERCENT_OFF);
					led_heater_off();
 3c2:	0e 94 66 01 	call	0x2cc	; 0x2cc <led_heater_off>
			count_sw_b = 0; swb_prev_val = 0;
			count_sw_c = 0; swc_prev_val = 0;
			
			// ---- Proceed to heater work
			time_val_heater_start = millis(); 
			swa_prev_val = swa_val;
 3c6:	ce 2c       	mov	r12, r14
			led_fan_off();
			led_sig_off();

			// Clear the tap history
			count_sw_b = 0; swb_prev_val = 0;
			count_sw_c = 0; swc_prev_val = 0;
 3c8:	d1 2c       	mov	r13, r1
			pwm_fan(PWM_FAN_PERCENT_OFF);
			led_fan_off();
			led_sig_off();

			// Clear the tap history
			count_sw_b = 0; swb_prev_val = 0;
 3ca:	71 2c       	mov	r7, r1
				break;
				
				default:
					pwm_heater(PWM_HEATER_PERCENT_OFF);
					led_heater_off();
				break;
 3cc:	01 c0       	rjmp	.+2      	; 0x3d0 <main+0xf0>
 3ce:	c8 2e       	mov	r12, r24
	if((milliseconds % SENSOR_CHECK_TIME) == 0)
		flag_check_sensor = 1;
}

unsigned long millis(void) {
	return milliseconds;
 3d0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <milliseconds>
 3d4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <milliseconds+0x1>
 3d8:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <milliseconds+0x2>
 3dc:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <milliseconds+0x3>
					led_heater_off();
				break;
			}
		}

		if((millis() - time_val_heater_start) > TIMER_VAL_HEATER) {
 3e0:	29 81       	ldd	r18, Y+1	; 0x01
 3e2:	3a 81       	ldd	r19, Y+2	; 0x02
 3e4:	4b 81       	ldd	r20, Y+3	; 0x03
 3e6:	5c 81       	ldd	r21, Y+4	; 0x04
 3e8:	82 1b       	sub	r24, r18
 3ea:	93 0b       	sbc	r25, r19
 3ec:	a4 0b       	sbc	r26, r20
 3ee:	b5 0b       	sbc	r27, r21
 3f0:	81 35       	cpi	r24, 0x51	; 81
 3f2:	93 4c       	sbci	r25, 0xC3	; 195
 3f4:	a1 05       	cpc	r26, r1
 3f6:	b1 05       	cpc	r27, r1
 3f8:	30 f0       	brcs	.+12     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
	return;
}

void pwm_heater(uint8_t p) {
	/*OCR0A = (uint8_t)((p / 100) * 255);*/
	OCR0A = p;
 3fa:	17 bc       	out	0x27, r1	; 39
			}
		}

		if((millis() - time_val_heater_start) > TIMER_VAL_HEATER) {
			pwm_heater(PWM_HEATER_PERCENT_OFF);
			led_heater_off();
 3fc:	0e 94 66 01 	call	0x2cc	; 0x2cc <led_heater_off>
			count_sw_a = 0; swa_prev_val = 0;
 400:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <count_sw_a>
 404:	c1 2c       	mov	r12, r1

		// ------- End Heater Control -------------
	

		//----------- LED Control -----------------
		swb_val = get_sw_b();
 406:	0e 94 21 01 	call	0x242	; 0x242 <get_sw_b>
 40a:	8d 83       	std	Y+5, r24	; 0x05
		
		if(swb_val != swb_prev_val) {
 40c:	78 16       	cp	r7, r24
 40e:	59 f1       	breq	.+86     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
	return;
}

void pwm_heater(uint8_t p) {
	/*OCR0A = (uint8_t)((p / 100) * 255);*/
	OCR0A = p;
 410:	17 bc       	out	0x27, r1	; 39
		
		if(swb_val != swb_prev_val) {
			
			// --- Clear all other stuffs (heater/led)-----
			pwm_heater(PWM_HEATER_PERCENT_OFF);
			led_heater_off();
 412:	0e 94 66 01 	call	0x2cc	; 0x2cc <led_heater_off>
}

void pwm_fan(uint8_t p) {
	/*OCR1A = (uint16_t)((p / 100) *  TOP_VAL);*/
	/*OCR1A = TOP_VAL;*/
	OCR1A = p;
 416:	a8 e8       	ldi	r26, 0x88	; 136
 418:	b0 e0       	ldi	r27, 0x00	; 0
 41a:	11 96       	adiw	r26, 0x01	; 1
 41c:	1c 92       	st	X, r1
 41e:	1e 92       	st	-X, r1
			// --- Clear all other stuffs (heater/led)-----
			pwm_heater(PWM_HEATER_PERCENT_OFF);
			led_heater_off();
			
			pwm_fan(PWM_FAN_PERCENT_OFF);
			led_fan_off();
 420:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <led_fan_off>
			

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
 424:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <count_sw_a>
			count_sw_c = 0; swc_prev_val = 0;
 428:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <count_sw_c>
	if((milliseconds % SENSOR_CHECK_TIME) == 0)
		flag_check_sensor = 1;
}

unsigned long millis(void) {
	return milliseconds;
 42c:	80 90 04 01 	lds	r8, 0x0104	; 0x800104 <milliseconds>
 430:	90 90 05 01 	lds	r9, 0x0105	; 0x800105 <milliseconds+0x1>
 434:	a0 90 06 01 	lds	r10, 0x0106	; 0x800106 <milliseconds+0x2>
 438:	b0 90 07 01 	lds	r11, 0x0107	; 0x800107 <milliseconds+0x3>
			
			// ---- Proceed to LED work
			time_val_led_start = millis();
			swb_prev_val = swb_val;

			switch (swb_val) {
 43c:	bd 81       	ldd	r27, Y+5	; 0x05
 43e:	b1 30       	cpi	r27, 0x01	; 1
 440:	19 f0       	breq	.+6      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 442:	b2 30       	cpi	r27, 0x02	; 2
 444:	31 f0       	breq	.+12     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 446:	0a c0       	rjmp	.+20     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
				case 1:
					led_sig_on();
 448:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <led_sig_on>
			led_fan_off();
			

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
			count_sw_c = 0; swc_prev_val = 0;
 44c:	19 86       	std	Y+9, r1	; 0x09
			pwm_fan(PWM_FAN_PERCENT_OFF);
			led_fan_off();
			

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
 44e:	c1 2c       	mov	r12, r1
			swb_prev_val = swb_val;

			switch (swb_val) {
				case 1:
					led_sig_on();
				break;
 450:	0b c0       	rjmp	.+22     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
				
				case 2:
					led_sig_off();
 452:	0e 94 6e 01 	call	0x2dc	; 0x2dc <led_sig_off>
			led_fan_off();
			

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
			count_sw_c = 0; swc_prev_val = 0;
 456:	19 86       	std	Y+9, r1	; 0x09
			pwm_fan(PWM_FAN_PERCENT_OFF);
			led_fan_off();
			

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
 458:	c1 2c       	mov	r12, r1
					led_sig_on();
				break;
				
				case 2:
					led_sig_off();
				break;
 45a:	06 c0       	rjmp	.+12     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
				
				default:
					led_sig_off();
 45c:	0e 94 6e 01 	call	0x2dc	; 0x2dc <led_sig_off>
			led_fan_off();
			

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
			count_sw_c = 0; swc_prev_val = 0;
 460:	19 86       	std	Y+9, r1	; 0x09
			pwm_fan(PWM_FAN_PERCENT_OFF);
			led_fan_off();
			

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
 462:	c1 2c       	mov	r12, r1
					led_sig_off();
				break;
				
				default:
					led_sig_off();
				break;
 464:	01 c0       	rjmp	.+2      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 466:	d9 86       	std	Y+9, r13	; 0x09
	if((milliseconds % SENSOR_CHECK_TIME) == 0)
		flag_check_sensor = 1;
}

unsigned long millis(void) {
	return milliseconds;
 468:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <milliseconds>
 46c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <milliseconds+0x1>
 470:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <milliseconds+0x2>
 474:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <milliseconds+0x3>
					led_sig_off();
				break;
			}
		}

		if((millis() - time_val_led_start) > TIMER_VAL_LED) {
 478:	88 19       	sub	r24, r8
 47a:	99 09       	sbc	r25, r9
 47c:	aa 09       	sbc	r26, r10
 47e:	bb 09       	sbc	r27, r11
 480:	81 33       	cpi	r24, 0x31	; 49
 482:	95 47       	sbci	r25, 0x75	; 117
 484:	a1 05       	cpc	r26, r1
 486:	b1 05       	cpc	r27, r1
 488:	28 f0       	brcs	.+10     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
			led_sig_off();
 48a:	0e 94 6e 01 	call	0x2dc	; 0x2dc <led_sig_off>
			count_sw_b = 0; swb_prev_val = 0;
 48e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <count_sw_b>
 492:	1d 82       	std	Y+5, r1	; 0x05
		}
		// ------- End SIG LED control ---------------------------------


		//----------- Fan Control -----------------
		swc_val = get_sw_c();
 494:	0e 94 44 01 	call	0x288	; 0x288 <get_sw_c>
 498:	d8 2e       	mov	r13, r24
		if(swc_val != swc_prev_val) {
 49a:	f9 85       	ldd	r31, Y+9	; 0x09
 49c:	f8 17       	cp	r31, r24
 49e:	09 f4       	brne	.+2      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 4a0:	58 c0       	rjmp	.+176    	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
	return;
}

void pwm_heater(uint8_t p) {
	/*OCR0A = (uint8_t)((p / 100) * 255);*/
	OCR0A = p;
 4a2:	17 bc       	out	0x27, r1	; 39
		swc_val = get_sw_c();
		if(swc_val != swc_prev_val) {
	
			// --- Clear all other stuffs (heater/led)-----
			pwm_heater(PWM_HEATER_PERCENT_OFF);
			led_heater_off();
 4a4:	0e 94 66 01 	call	0x2cc	; 0x2cc <led_heater_off>
			led_sig_off();
 4a8:	0e 94 6e 01 	call	0x2dc	; 0x2dc <led_sig_off>

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
 4ac:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <count_sw_a>
			count_sw_b = 0; swb_prev_val = 0;
 4b0:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <count_sw_b>
	if((milliseconds % SENSOR_CHECK_TIME) == 0)
		flag_check_sensor = 1;
}

unsigned long millis(void) {
	return milliseconds;
 4b4:	20 90 04 01 	lds	r2, 0x0104	; 0x800104 <milliseconds>
 4b8:	30 90 05 01 	lds	r3, 0x0105	; 0x800105 <milliseconds+0x1>
 4bc:	40 90 06 01 	lds	r4, 0x0106	; 0x800106 <milliseconds+0x2>
 4c0:	50 90 07 01 	lds	r5, 0x0107	; 0x800107 <milliseconds+0x3>
	
			// ---- Proceed to fan work
			time_val_fan_start = millis();
			swc_prev_val = swc_val;

			switch (swc_val) {
 4c4:	22 e0       	ldi	r18, 0x02	; 2
 4c6:	d2 16       	cp	r13, r18
 4c8:	c9 f0       	breq	.+50     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
 4ca:	2d 15       	cp	r18, r13
 4cc:	20 f0       	brcs	.+8      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 4ce:	31 e0       	ldi	r19, 0x01	; 1
 4d0:	d3 16       	cp	r13, r19
 4d2:	41 f0       	breq	.+16     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4d4:	35 c0       	rjmp	.+106    	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
 4d6:	43 e0       	ldi	r20, 0x03	; 3
 4d8:	d4 16       	cp	r13, r20
 4da:	e1 f0       	breq	.+56     	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 4dc:	54 e0       	ldi	r21, 0x04	; 4
 4de:	d5 16       	cp	r13, r21
 4e0:	29 f1       	breq	.+74     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
 4e2:	2e c0       	rjmp	.+92     	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
}

void pwm_fan(uint8_t p) {
	/*OCR1A = (uint16_t)((p / 100) *  TOP_VAL);*/
	/*OCR1A = TOP_VAL;*/
	OCR1A = p;
 4e4:	e4 e5       	ldi	r30, 0x54	; 84
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	a8 e8       	ldi	r26, 0x88	; 136
 4ea:	b0 e0       	ldi	r27, 0x00	; 0
 4ec:	11 96       	adiw	r26, 0x01	; 1
 4ee:	fc 93       	st	X, r31
 4f0:	ee 93       	st	-X, r30
			swc_prev_val = swc_val;

			switch (swc_val) {
				case 1:
					pwm_fan(PWM_FAN_PERCENT_33);
					led_fan_on();
 4f2:	0e 94 68 01 	call	0x2d0	; 0x2d0 <led_fan_on>
			led_heater_off();
			led_sig_off();

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
			count_sw_b = 0; swb_prev_val = 0;
 4f6:	71 2c       	mov	r7, r1
			pwm_heater(PWM_HEATER_PERCENT_OFF);
			led_heater_off();
			led_sig_off();

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
 4f8:	c1 2c       	mov	r12, r1

			switch (swc_val) {
				case 1:
					pwm_fan(PWM_FAN_PERCENT_33);
					led_fan_on();
				break;
 4fa:	2c c0       	rjmp	.+88     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
}

void pwm_fan(uint8_t p) {
	/*OCR1A = (uint16_t)((p / 100) *  TOP_VAL);*/
	/*OCR1A = TOP_VAL;*/
	OCR1A = p;
 4fc:	e6 ea       	ldi	r30, 0xA6	; 166
 4fe:	f0 e0       	ldi	r31, 0x00	; 0
 500:	a8 e8       	ldi	r26, 0x88	; 136
 502:	b0 e0       	ldi	r27, 0x00	; 0
 504:	11 96       	adiw	r26, 0x01	; 1
 506:	fc 93       	st	X, r31
 508:	ee 93       	st	-X, r30
					led_fan_on();
				break;
		
				case 2:
					pwm_fan(PWM_FAN_PERCENT_66);
					led_fan_on();
 50a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <led_fan_on>
			led_heater_off();
			led_sig_off();

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
			count_sw_b = 0; swb_prev_val = 0;
 50e:	71 2c       	mov	r7, r1
			pwm_heater(PWM_HEATER_PERCENT_OFF);
			led_heater_off();
			led_sig_off();

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
 510:	c1 2c       	mov	r12, r1
				break;
		
				case 2:
					pwm_fan(PWM_FAN_PERCENT_66);
					led_fan_on();
				break;
 512:	20 c0       	rjmp	.+64     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
}

void pwm_fan(uint8_t p) {
	/*OCR1A = (uint16_t)((p / 100) *  TOP_VAL);*/
	/*OCR1A = TOP_VAL;*/
	OCR1A = p;
 514:	ef ef       	ldi	r30, 0xFF	; 255
 516:	f0 e0       	ldi	r31, 0x00	; 0
 518:	a8 e8       	ldi	r26, 0x88	; 136
 51a:	b0 e0       	ldi	r27, 0x00	; 0
 51c:	11 96       	adiw	r26, 0x01	; 1
 51e:	fc 93       	st	X, r31
 520:	ee 93       	st	-X, r30
					led_fan_on();
				break;
		
				case 3:
					pwm_fan(PWM_FAN_PERCENT_100);
					led_fan_on();
 522:	0e 94 68 01 	call	0x2d0	; 0x2d0 <led_fan_on>
			led_heater_off();
			led_sig_off();

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
			count_sw_b = 0; swb_prev_val = 0;
 526:	71 2c       	mov	r7, r1
			pwm_heater(PWM_HEATER_PERCENT_OFF);
			led_heater_off();
			led_sig_off();

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
 528:	c1 2c       	mov	r12, r1
				break;
		
				case 3:
					pwm_fan(PWM_FAN_PERCENT_100);
					led_fan_on();
				break;
 52a:	14 c0       	rjmp	.+40     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
}

void pwm_fan(uint8_t p) {
	/*OCR1A = (uint16_t)((p / 100) *  TOP_VAL);*/
	/*OCR1A = TOP_VAL;*/
	OCR1A = p;
 52c:	a8 e8       	ldi	r26, 0x88	; 136
 52e:	b0 e0       	ldi	r27, 0x00	; 0
 530:	11 96       	adiw	r26, 0x01	; 1
 532:	1c 92       	st	X, r1
 534:	1e 92       	st	-X, r1
					led_fan_on();
				break;
		
				case 4:
					pwm_fan(PWM_FAN_PERCENT_OFF);
					led_fan_off();
 536:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <led_fan_off>
			led_heater_off();
			led_sig_off();

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
			count_sw_b = 0; swb_prev_val = 0;
 53a:	71 2c       	mov	r7, r1
			pwm_heater(PWM_HEATER_PERCENT_OFF);
			led_heater_off();
			led_sig_off();

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
 53c:	c1 2c       	mov	r12, r1
				break;
		
				case 4:
					pwm_fan(PWM_FAN_PERCENT_OFF);
					led_fan_off();
				break;
 53e:	0a c0       	rjmp	.+20     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
}

void pwm_fan(uint8_t p) {
	/*OCR1A = (uint16_t)((p / 100) *  TOP_VAL);*/
	/*OCR1A = TOP_VAL;*/
	OCR1A = p;
 540:	e8 e8       	ldi	r30, 0x88	; 136
 542:	f0 e0       	ldi	r31, 0x00	; 0
 544:	11 82       	std	Z+1, r1	; 0x01
 546:	10 82       	st	Z, r1
					led_fan_off();
				break;
		
				default:
					pwm_fan(PWM_FAN_PERCENT_OFF);
					led_fan_off();
 548:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <led_fan_off>
			led_heater_off();
			led_sig_off();

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
			count_sw_b = 0; swb_prev_val = 0;
 54c:	71 2c       	mov	r7, r1
			pwm_heater(PWM_HEATER_PERCENT_OFF);
			led_heater_off();
			led_sig_off();

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
 54e:	c1 2c       	mov	r12, r1
				break;
		
				default:
					pwm_fan(PWM_FAN_PERCENT_OFF);
					led_fan_off();
				break;
 550:	01 c0       	rjmp	.+2      	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
 552:	7d 80       	ldd	r7, Y+5	; 0x05
	if((milliseconds % SENSOR_CHECK_TIME) == 0)
		flag_check_sensor = 1;
}

unsigned long millis(void) {
	return milliseconds;
 554:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <milliseconds>
 558:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <milliseconds+0x1>
 55c:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <milliseconds+0x2>
 560:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <milliseconds+0x3>
					led_fan_off();
				break;
			}
		}

		if((millis() - time_val_fan_start) > TIMER_VAL_FAN) {
 564:	82 19       	sub	r24, r2
 566:	93 09       	sbc	r25, r3
 568:	a4 09       	sbc	r26, r4
 56a:	b5 09       	sbc	r27, r5
 56c:	81 33       	cpi	r24, 0x31	; 49
 56e:	95 47       	sbci	r25, 0x75	; 117
 570:	a1 05       	cpc	r26, r1
 572:	b1 05       	cpc	r27, r1
 574:	50 f0       	brcs	.+20     	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
}

void pwm_fan(uint8_t p) {
	/*OCR1A = (uint16_t)((p / 100) *  TOP_VAL);*/
	/*OCR1A = TOP_VAL;*/
	OCR1A = p;
 576:	a8 e8       	ldi	r26, 0x88	; 136
 578:	b0 e0       	ldi	r27, 0x00	; 0
 57a:	11 96       	adiw	r26, 0x01	; 1
 57c:	1c 92       	st	X, r1
 57e:	1e 92       	st	-X, r1
			}
		}

		if((millis() - time_val_fan_start) > TIMER_VAL_FAN) {
			pwm_fan(PWM_FAN_PERCENT_OFF);
			led_fan_off();
 580:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <led_fan_off>
			count_sw_c = 0; swc_prev_val = 0;
 584:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <count_sw_c>
 588:	d1 2c       	mov	r13, r1
		// ------- End fan control ---------------------------------
	
		
		// --------------- Temperature sensing and Control ----------
		// ---- Check sensor each 120 seconds -------------------------
		if(flag_check_sensor) {
 58a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 58e:	88 23       	and	r24, r24
 590:	09 f4       	brne	.+2      	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
 592:	c8 ce       	rjmp	.-624    	; 0x324 <main+0x44>
			flag_check_sensor = 0;
 594:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			PORTC ^= (1 << PORTC0);
 598:	88 b1       	in	r24, 0x08	; 8
 59a:	86 25       	eor	r24, r6
 59c:	88 b9       	out	0x08, r24	; 8
 59e:	b5 e0       	ldi	r27, 0x05	; 5
 5a0:	f1 2c       	mov	r15, r1
 5a2:	00 e0       	ldi	r16, 0x00	; 0
 5a4:	10 e0       	ldi	r17, 0x00	; 0
 5a6:	19 86       	std	Y+9, r1	; 0x09
 5a8:	bd 83       	std	Y+5, r27	; 0x05
			
			for(uint8_t i = 0; i < 5; i++) {
				temp_sum += get_temp();
 5aa:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <get_temp>
 5ae:	9b 01       	movw	r18, r22
 5b0:	ac 01       	movw	r20, r24
 5b2:	6f 2d       	mov	r22, r15
 5b4:	70 2f       	mov	r23, r16
 5b6:	81 2f       	mov	r24, r17
 5b8:	99 85       	ldd	r25, Y+9	; 0x09
 5ba:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__addsf3>
 5be:	f6 2e       	mov	r15, r22
 5c0:	07 2f       	mov	r16, r23
 5c2:	18 2f       	mov	r17, r24
 5c4:	99 87       	std	Y+9, r25	; 0x09
 5c6:	fd 81       	ldd	r31, Y+5	; 0x05
 5c8:	f1 50       	subi	r31, 0x01	; 1
 5ca:	fd 83       	std	Y+5, r31	; 0x05
		// ---- Check sensor each 120 seconds -------------------------
		if(flag_check_sensor) {
			flag_check_sensor = 0;
			PORTC ^= (1 << PORTC0);
			
			for(uint8_t i = 0; i < 5; i++) {
 5cc:	f1 11       	cpse	r31, r1
 5ce:	ed cf       	rjmp	.-38     	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
				temp_sum += get_temp();
			}

			temp_avg = temp_sum / 5;
 5d0:	20 e0       	ldi	r18, 0x00	; 0
 5d2:	30 e0       	ldi	r19, 0x00	; 0
 5d4:	40 ea       	ldi	r20, 0xA0	; 160
 5d6:	50 e4       	ldi	r21, 0x40	; 64
 5d8:	0e 94 c9 03 	call	0x792	; 0x792 <__divsf3>
 5dc:	6d 83       	std	Y+5, r22	; 0x05
 5de:	7e 83       	std	Y+6, r23	; 0x06
 5e0:	8f 83       	std	Y+7, r24	; 0x07
 5e2:	98 87       	std	Y+8, r25	; 0x08
			
			temp_sum = 0.0;


			if(temp_avg < TEMP_CRITICAL_VAL) {
 5e4:	20 e0       	ldi	r18, 0x00	; 0
 5e6:	30 e0       	ldi	r19, 0x00	; 0
 5e8:	40 ea       	ldi	r20, 0xA0	; 160
 5ea:	52 e4       	ldi	r21, 0x42	; 66
 5ec:	0e 94 c4 03 	call	0x788	; 0x788 <__cmpsf2>
 5f0:	88 23       	and	r24, r24
 5f2:	0c f0       	brlt	.+2      	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
 5f4:	58 c0       	rjmp	.+176    	; 0x6a6 <__LOCK_REGION_LENGTH__+0x2a6>

				switch (swa_val) {
 5f6:	22 e0       	ldi	r18, 0x02	; 2
 5f8:	e2 16       	cp	r14, r18
 5fa:	19 f1       	breq	.+70     	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
 5fc:	2e 15       	cp	r18, r14
 5fe:	20 f0       	brcs	.+8      	; 0x608 <__LOCK_REGION_LENGTH__+0x208>
 600:	31 e0       	ldi	r19, 0x01	; 1
 602:	e3 16       	cp	r14, r19
 604:	49 f0       	breq	.+18     	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
 606:	4b c0       	rjmp	.+150    	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
 608:	43 e0       	ldi	r20, 0x03	; 3
 60a:	e4 16       	cp	r14, r20
 60c:	79 f1       	breq	.+94     	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
 60e:	54 e0       	ldi	r21, 0x04	; 4
 610:	e5 16       	cp	r14, r21
 612:	09 f4       	brne	.+2      	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
 614:	40 c0       	rjmp	.+128    	; 0x696 <__LOCK_REGION_LENGTH__+0x296>
 616:	43 c0       	rjmp	.+134    	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>

					case 1:
						if(temp_avg >= TEMP_LOW_VAL) {
 618:	20 e0       	ldi	r18, 0x00	; 0
 61a:	30 e0       	ldi	r19, 0x00	; 0
 61c:	40 ef       	ldi	r20, 0xF0	; 240
 61e:	51 e4       	ldi	r21, 0x41	; 65
 620:	6d 81       	ldd	r22, Y+5	; 0x05
 622:	7e 81       	ldd	r23, Y+6	; 0x06
 624:	8f 81       	ldd	r24, Y+7	; 0x07
 626:	98 85       	ldd	r25, Y+8	; 0x08
 628:	0e 94 ed 04 	call	0x9da	; 0x9da <__gesf2>
 62c:	88 23       	and	r24, r24
 62e:	24 f0       	brlt	.+8      	; 0x638 <__LOCK_REGION_LENGTH__+0x238>
	return;
}

void pwm_heater(uint8_t p) {
	/*OCR0A = (uint8_t)((p / 100) * 255);*/
	OCR0A = p;
 630:	17 bc       	out	0x27, r1	; 39
				switch (swa_val) {

					case 1:
						if(temp_avg >= TEMP_LOW_VAL) {
							pwm_heater(PWM_HEATER_PERCENT_OFF);
							led_heater_off();
 632:	0e 94 66 01 	call	0x2cc	; 0x2cc <led_heater_off>
 636:	76 ce       	rjmp	.-788    	; 0x324 <main+0x44>
	return;
}

void pwm_heater(uint8_t p) {
	/*OCR0A = (uint8_t)((p / 100) * 255);*/
	OCR0A = p;
 638:	83 e3       	ldi	r24, 0x33	; 51
 63a:	87 bd       	out	0x27, r24	; 39
						if(temp_avg >= TEMP_LOW_VAL) {
							pwm_heater(PWM_HEATER_PERCENT_OFF);
							led_heater_off();
						} else {
							pwm_heater(PWM_HEATER_PERCENT_LOW);
							led_heater_on();
 63c:	0e 94 64 01 	call	0x2c8	; 0x2c8 <led_heater_on>
 640:	71 ce       	rjmp	.-798    	; 0x324 <main+0x44>
						}
					break;
						
					case 2:
						if(temp_avg >= TEMP_MID_VAL) {
 642:	20 e0       	ldi	r18, 0x00	; 0
 644:	30 e0       	ldi	r19, 0x00	; 0
 646:	48 e4       	ldi	r20, 0x48	; 72
 648:	52 e4       	ldi	r21, 0x42	; 66
 64a:	6d 81       	ldd	r22, Y+5	; 0x05
 64c:	7e 81       	ldd	r23, Y+6	; 0x06
 64e:	8f 81       	ldd	r24, Y+7	; 0x07
 650:	98 85       	ldd	r25, Y+8	; 0x08
 652:	0e 94 ed 04 	call	0x9da	; 0x9da <__gesf2>
 656:	88 23       	and	r24, r24
 658:	24 f0       	brlt	.+8      	; 0x662 <__LOCK_REGION_LENGTH__+0x262>
	return;
}

void pwm_heater(uint8_t p) {
	/*OCR0A = (uint8_t)((p / 100) * 255);*/
	OCR0A = p;
 65a:	17 bc       	out	0x27, r1	; 39
					break;
						
					case 2:
						if(temp_avg >= TEMP_MID_VAL) {
							pwm_heater(PWM_HEATER_PERCENT_OFF);
							led_heater_off();
 65c:	0e 94 66 01 	call	0x2cc	; 0x2cc <led_heater_off>
 660:	61 ce       	rjmp	.-830    	; 0x324 <main+0x44>
	return;
}

void pwm_heater(uint8_t p) {
	/*OCR0A = (uint8_t)((p / 100) * 255);*/
	OCR0A = p;
 662:	96 e6       	ldi	r25, 0x66	; 102
 664:	97 bd       	out	0x27, r25	; 39
						if(temp_avg >= TEMP_MID_VAL) {
							pwm_heater(PWM_HEATER_PERCENT_OFF);
							led_heater_off();
						} else {
							pwm_heater(PWM_HEATER_PERCENT_MID);
							led_heater_on();
 666:	0e 94 64 01 	call	0x2c8	; 0x2c8 <led_heater_on>
 66a:	5c ce       	rjmp	.-840    	; 0x324 <main+0x44>
						}
					break;
						
					case 3:
						if(temp_avg >= TEMP_HIGH_VAL) {
 66c:	20 e0       	ldi	r18, 0x00	; 0
 66e:	30 e0       	ldi	r19, 0x00	; 0
 670:	4c e8       	ldi	r20, 0x8C	; 140
 672:	52 e4       	ldi	r21, 0x42	; 66
 674:	6d 81       	ldd	r22, Y+5	; 0x05
 676:	7e 81       	ldd	r23, Y+6	; 0x06
 678:	8f 81       	ldd	r24, Y+7	; 0x07
 67a:	98 85       	ldd	r25, Y+8	; 0x08
 67c:	0e 94 ed 04 	call	0x9da	; 0x9da <__gesf2>
 680:	88 23       	and	r24, r24
 682:	24 f0       	brlt	.+8      	; 0x68c <__LOCK_REGION_LENGTH__+0x28c>
	return;
}

void pwm_heater(uint8_t p) {
	/*OCR0A = (uint8_t)((p / 100) * 255);*/
	OCR0A = p;
 684:	17 bc       	out	0x27, r1	; 39
					break;
						
					case 3:
						if(temp_avg >= TEMP_HIGH_VAL) {
							pwm_heater(PWM_HEATER_PERCENT_OFF);
							led_heater_off();
 686:	0e 94 66 01 	call	0x2cc	; 0x2cc <led_heater_off>
 68a:	4c ce       	rjmp	.-872    	; 0x324 <main+0x44>
	return;
}

void pwm_heater(uint8_t p) {
	/*OCR0A = (uint8_t)((p / 100) * 255);*/
	OCR0A = p;
 68c:	a9 e9       	ldi	r26, 0x99	; 153
 68e:	a7 bd       	out	0x27, r26	; 39
						if(temp_avg >= TEMP_HIGH_VAL) {
							pwm_heater(PWM_HEATER_PERCENT_OFF);
							led_heater_off();
						} else {
							pwm_heater(PWM_HEATER_PERCENT_HIGH);
							led_heater_on();
 690:	0e 94 64 01 	call	0x2c8	; 0x2c8 <led_heater_on>
 694:	47 ce       	rjmp	.-882    	; 0x324 <main+0x44>
	return;
}

void pwm_heater(uint8_t p) {
	/*OCR0A = (uint8_t)((p / 100) * 255);*/
	OCR0A = p;
 696:	17 bc       	out	0x27, r1	; 39
						}
					break;
						
					case 4:
						pwm_heater(PWM_HEATER_PERCENT_OFF);
						led_heater_off();
 698:	0e 94 66 01 	call	0x2cc	; 0x2cc <led_heater_off>
					break;
 69c:	43 ce       	rjmp	.-890    	; 0x324 <main+0x44>
	return;
}

void pwm_heater(uint8_t p) {
	/*OCR0A = (uint8_t)((p / 100) * 255);*/
	OCR0A = p;
 69e:	17 bc       	out	0x27, r1	; 39
						led_heater_off();
					break;
						
					default:
						pwm_heater(PWM_HEATER_PERCENT_OFF);
						led_heater_off();
 6a0:	0e 94 66 01 	call	0x2cc	; 0x2cc <led_heater_off>
					break;
 6a4:	3f ce       	rjmp	.-898    	; 0x324 <main+0x44>
	return;
}

void pwm_heater(uint8_t p) {
	/*OCR0A = (uint8_t)((p / 100) * 255);*/
	OCR0A = p;
 6a6:	17 bc       	out	0x27, r1	; 39
						led_heater_off();
					break;
				}
			} else {
				pwm_heater(PWM_HEATER_PERCENT_OFF);
				led_heater_off();
 6a8:	0e 94 66 01 	call	0x2cc	; 0x2cc <led_heater_off>
 6ac:	3b ce       	rjmp	.-906    	; 0x324 <main+0x44>

000006ae <__subsf3>:
 6ae:	50 58       	subi	r21, 0x80	; 128

000006b0 <__addsf3>:
 6b0:	bb 27       	eor	r27, r27
 6b2:	aa 27       	eor	r26, r26
 6b4:	0e 94 6f 03 	call	0x6de	; 0x6de <__addsf3x>
 6b8:	0c 94 b3 04 	jmp	0x966	; 0x966 <__fp_round>
 6bc:	0e 94 a5 04 	call	0x94a	; 0x94a <__fp_pscA>
 6c0:	38 f0       	brcs	.+14     	; 0x6d0 <__addsf3+0x20>
 6c2:	0e 94 ac 04 	call	0x958	; 0x958 <__fp_pscB>
 6c6:	20 f0       	brcs	.+8      	; 0x6d0 <__addsf3+0x20>
 6c8:	39 f4       	brne	.+14     	; 0x6d8 <__addsf3+0x28>
 6ca:	9f 3f       	cpi	r25, 0xFF	; 255
 6cc:	19 f4       	brne	.+6      	; 0x6d4 <__addsf3+0x24>
 6ce:	26 f4       	brtc	.+8      	; 0x6d8 <__addsf3+0x28>
 6d0:	0c 94 a2 04 	jmp	0x944	; 0x944 <__fp_nan>
 6d4:	0e f4       	brtc	.+2      	; 0x6d8 <__addsf3+0x28>
 6d6:	e0 95       	com	r30
 6d8:	e7 fb       	bst	r30, 7
 6da:	0c 94 9c 04 	jmp	0x938	; 0x938 <__fp_inf>

000006de <__addsf3x>:
 6de:	e9 2f       	mov	r30, r25
 6e0:	0e 94 c4 04 	call	0x988	; 0x988 <__fp_split3>
 6e4:	58 f3       	brcs	.-42     	; 0x6bc <__addsf3+0xc>
 6e6:	ba 17       	cp	r27, r26
 6e8:	62 07       	cpc	r22, r18
 6ea:	73 07       	cpc	r23, r19
 6ec:	84 07       	cpc	r24, r20
 6ee:	95 07       	cpc	r25, r21
 6f0:	20 f0       	brcs	.+8      	; 0x6fa <__addsf3x+0x1c>
 6f2:	79 f4       	brne	.+30     	; 0x712 <__addsf3x+0x34>
 6f4:	a6 f5       	brtc	.+104    	; 0x75e <__addsf3x+0x80>
 6f6:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <__fp_zero>
 6fa:	0e f4       	brtc	.+2      	; 0x6fe <__addsf3x+0x20>
 6fc:	e0 95       	com	r30
 6fe:	0b 2e       	mov	r0, r27
 700:	ba 2f       	mov	r27, r26
 702:	a0 2d       	mov	r26, r0
 704:	0b 01       	movw	r0, r22
 706:	b9 01       	movw	r22, r18
 708:	90 01       	movw	r18, r0
 70a:	0c 01       	movw	r0, r24
 70c:	ca 01       	movw	r24, r20
 70e:	a0 01       	movw	r20, r0
 710:	11 24       	eor	r1, r1
 712:	ff 27       	eor	r31, r31
 714:	59 1b       	sub	r21, r25
 716:	99 f0       	breq	.+38     	; 0x73e <__addsf3x+0x60>
 718:	59 3f       	cpi	r21, 0xF9	; 249
 71a:	50 f4       	brcc	.+20     	; 0x730 <__addsf3x+0x52>
 71c:	50 3e       	cpi	r21, 0xE0	; 224
 71e:	68 f1       	brcs	.+90     	; 0x77a <__addsf3x+0x9c>
 720:	1a 16       	cp	r1, r26
 722:	f0 40       	sbci	r31, 0x00	; 0
 724:	a2 2f       	mov	r26, r18
 726:	23 2f       	mov	r18, r19
 728:	34 2f       	mov	r19, r20
 72a:	44 27       	eor	r20, r20
 72c:	58 5f       	subi	r21, 0xF8	; 248
 72e:	f3 cf       	rjmp	.-26     	; 0x716 <__addsf3x+0x38>
 730:	46 95       	lsr	r20
 732:	37 95       	ror	r19
 734:	27 95       	ror	r18
 736:	a7 95       	ror	r26
 738:	f0 40       	sbci	r31, 0x00	; 0
 73a:	53 95       	inc	r21
 73c:	c9 f7       	brne	.-14     	; 0x730 <__addsf3x+0x52>
 73e:	7e f4       	brtc	.+30     	; 0x75e <__addsf3x+0x80>
 740:	1f 16       	cp	r1, r31
 742:	ba 0b       	sbc	r27, r26
 744:	62 0b       	sbc	r22, r18
 746:	73 0b       	sbc	r23, r19
 748:	84 0b       	sbc	r24, r20
 74a:	ba f0       	brmi	.+46     	; 0x77a <__addsf3x+0x9c>
 74c:	91 50       	subi	r25, 0x01	; 1
 74e:	a1 f0       	breq	.+40     	; 0x778 <__addsf3x+0x9a>
 750:	ff 0f       	add	r31, r31
 752:	bb 1f       	adc	r27, r27
 754:	66 1f       	adc	r22, r22
 756:	77 1f       	adc	r23, r23
 758:	88 1f       	adc	r24, r24
 75a:	c2 f7       	brpl	.-16     	; 0x74c <__addsf3x+0x6e>
 75c:	0e c0       	rjmp	.+28     	; 0x77a <__addsf3x+0x9c>
 75e:	ba 0f       	add	r27, r26
 760:	62 1f       	adc	r22, r18
 762:	73 1f       	adc	r23, r19
 764:	84 1f       	adc	r24, r20
 766:	48 f4       	brcc	.+18     	; 0x77a <__addsf3x+0x9c>
 768:	87 95       	ror	r24
 76a:	77 95       	ror	r23
 76c:	67 95       	ror	r22
 76e:	b7 95       	ror	r27
 770:	f7 95       	ror	r31
 772:	9e 3f       	cpi	r25, 0xFE	; 254
 774:	08 f0       	brcs	.+2      	; 0x778 <__addsf3x+0x9a>
 776:	b0 cf       	rjmp	.-160    	; 0x6d8 <__addsf3+0x28>
 778:	93 95       	inc	r25
 77a:	88 0f       	add	r24, r24
 77c:	08 f0       	brcs	.+2      	; 0x780 <__addsf3x+0xa2>
 77e:	99 27       	eor	r25, r25
 780:	ee 0f       	add	r30, r30
 782:	97 95       	ror	r25
 784:	87 95       	ror	r24
 786:	08 95       	ret

00000788 <__cmpsf2>:
 788:	0e 94 78 04 	call	0x8f0	; 0x8f0 <__fp_cmp>
 78c:	08 f4       	brcc	.+2      	; 0x790 <__cmpsf2+0x8>
 78e:	81 e0       	ldi	r24, 0x01	; 1
 790:	08 95       	ret

00000792 <__divsf3>:
 792:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__divsf3x>
 796:	0c 94 b3 04 	jmp	0x966	; 0x966 <__fp_round>
 79a:	0e 94 ac 04 	call	0x958	; 0x958 <__fp_pscB>
 79e:	58 f0       	brcs	.+22     	; 0x7b6 <__divsf3+0x24>
 7a0:	0e 94 a5 04 	call	0x94a	; 0x94a <__fp_pscA>
 7a4:	40 f0       	brcs	.+16     	; 0x7b6 <__divsf3+0x24>
 7a6:	29 f4       	brne	.+10     	; 0x7b2 <__divsf3+0x20>
 7a8:	5f 3f       	cpi	r21, 0xFF	; 255
 7aa:	29 f0       	breq	.+10     	; 0x7b6 <__divsf3+0x24>
 7ac:	0c 94 9c 04 	jmp	0x938	; 0x938 <__fp_inf>
 7b0:	51 11       	cpse	r21, r1
 7b2:	0c 94 e7 04 	jmp	0x9ce	; 0x9ce <__fp_szero>
 7b6:	0c 94 a2 04 	jmp	0x944	; 0x944 <__fp_nan>

000007ba <__divsf3x>:
 7ba:	0e 94 c4 04 	call	0x988	; 0x988 <__fp_split3>
 7be:	68 f3       	brcs	.-38     	; 0x79a <__divsf3+0x8>

000007c0 <__divsf3_pse>:
 7c0:	99 23       	and	r25, r25
 7c2:	b1 f3       	breq	.-20     	; 0x7b0 <__divsf3+0x1e>
 7c4:	55 23       	and	r21, r21
 7c6:	91 f3       	breq	.-28     	; 0x7ac <__divsf3+0x1a>
 7c8:	95 1b       	sub	r25, r21
 7ca:	55 0b       	sbc	r21, r21
 7cc:	bb 27       	eor	r27, r27
 7ce:	aa 27       	eor	r26, r26
 7d0:	62 17       	cp	r22, r18
 7d2:	73 07       	cpc	r23, r19
 7d4:	84 07       	cpc	r24, r20
 7d6:	38 f0       	brcs	.+14     	; 0x7e6 <__divsf3_pse+0x26>
 7d8:	9f 5f       	subi	r25, 0xFF	; 255
 7da:	5f 4f       	sbci	r21, 0xFF	; 255
 7dc:	22 0f       	add	r18, r18
 7de:	33 1f       	adc	r19, r19
 7e0:	44 1f       	adc	r20, r20
 7e2:	aa 1f       	adc	r26, r26
 7e4:	a9 f3       	breq	.-22     	; 0x7d0 <__divsf3_pse+0x10>
 7e6:	35 d0       	rcall	.+106    	; 0x852 <__divsf3_pse+0x92>
 7e8:	0e 2e       	mov	r0, r30
 7ea:	3a f0       	brmi	.+14     	; 0x7fa <__divsf3_pse+0x3a>
 7ec:	e0 e8       	ldi	r30, 0x80	; 128
 7ee:	32 d0       	rcall	.+100    	; 0x854 <__divsf3_pse+0x94>
 7f0:	91 50       	subi	r25, 0x01	; 1
 7f2:	50 40       	sbci	r21, 0x00	; 0
 7f4:	e6 95       	lsr	r30
 7f6:	00 1c       	adc	r0, r0
 7f8:	ca f7       	brpl	.-14     	; 0x7ec <__divsf3_pse+0x2c>
 7fa:	2b d0       	rcall	.+86     	; 0x852 <__divsf3_pse+0x92>
 7fc:	fe 2f       	mov	r31, r30
 7fe:	29 d0       	rcall	.+82     	; 0x852 <__divsf3_pse+0x92>
 800:	66 0f       	add	r22, r22
 802:	77 1f       	adc	r23, r23
 804:	88 1f       	adc	r24, r24
 806:	bb 1f       	adc	r27, r27
 808:	26 17       	cp	r18, r22
 80a:	37 07       	cpc	r19, r23
 80c:	48 07       	cpc	r20, r24
 80e:	ab 07       	cpc	r26, r27
 810:	b0 e8       	ldi	r27, 0x80	; 128
 812:	09 f0       	breq	.+2      	; 0x816 <__divsf3_pse+0x56>
 814:	bb 0b       	sbc	r27, r27
 816:	80 2d       	mov	r24, r0
 818:	bf 01       	movw	r22, r30
 81a:	ff 27       	eor	r31, r31
 81c:	93 58       	subi	r25, 0x83	; 131
 81e:	5f 4f       	sbci	r21, 0xFF	; 255
 820:	3a f0       	brmi	.+14     	; 0x830 <__divsf3_pse+0x70>
 822:	9e 3f       	cpi	r25, 0xFE	; 254
 824:	51 05       	cpc	r21, r1
 826:	78 f0       	brcs	.+30     	; 0x846 <__divsf3_pse+0x86>
 828:	0c 94 9c 04 	jmp	0x938	; 0x938 <__fp_inf>
 82c:	0c 94 e7 04 	jmp	0x9ce	; 0x9ce <__fp_szero>
 830:	5f 3f       	cpi	r21, 0xFF	; 255
 832:	e4 f3       	brlt	.-8      	; 0x82c <__divsf3_pse+0x6c>
 834:	98 3e       	cpi	r25, 0xE8	; 232
 836:	d4 f3       	brlt	.-12     	; 0x82c <__divsf3_pse+0x6c>
 838:	86 95       	lsr	r24
 83a:	77 95       	ror	r23
 83c:	67 95       	ror	r22
 83e:	b7 95       	ror	r27
 840:	f7 95       	ror	r31
 842:	9f 5f       	subi	r25, 0xFF	; 255
 844:	c9 f7       	brne	.-14     	; 0x838 <__divsf3_pse+0x78>
 846:	88 0f       	add	r24, r24
 848:	91 1d       	adc	r25, r1
 84a:	96 95       	lsr	r25
 84c:	87 95       	ror	r24
 84e:	97 f9       	bld	r25, 7
 850:	08 95       	ret
 852:	e1 e0       	ldi	r30, 0x01	; 1
 854:	66 0f       	add	r22, r22
 856:	77 1f       	adc	r23, r23
 858:	88 1f       	adc	r24, r24
 85a:	bb 1f       	adc	r27, r27
 85c:	62 17       	cp	r22, r18
 85e:	73 07       	cpc	r23, r19
 860:	84 07       	cpc	r24, r20
 862:	ba 07       	cpc	r27, r26
 864:	20 f0       	brcs	.+8      	; 0x86e <__divsf3_pse+0xae>
 866:	62 1b       	sub	r22, r18
 868:	73 0b       	sbc	r23, r19
 86a:	84 0b       	sbc	r24, r20
 86c:	ba 0b       	sbc	r27, r26
 86e:	ee 1f       	adc	r30, r30
 870:	88 f7       	brcc	.-30     	; 0x854 <__divsf3_pse+0x94>
 872:	e0 95       	com	r30
 874:	08 95       	ret

00000876 <__floatunsisf>:
 876:	e8 94       	clt
 878:	09 c0       	rjmp	.+18     	; 0x88c <__floatsisf+0x12>

0000087a <__floatsisf>:
 87a:	97 fb       	bst	r25, 7
 87c:	3e f4       	brtc	.+14     	; 0x88c <__floatsisf+0x12>
 87e:	90 95       	com	r25
 880:	80 95       	com	r24
 882:	70 95       	com	r23
 884:	61 95       	neg	r22
 886:	7f 4f       	sbci	r23, 0xFF	; 255
 888:	8f 4f       	sbci	r24, 0xFF	; 255
 88a:	9f 4f       	sbci	r25, 0xFF	; 255
 88c:	99 23       	and	r25, r25
 88e:	a9 f0       	breq	.+42     	; 0x8ba <__floatsisf+0x40>
 890:	f9 2f       	mov	r31, r25
 892:	96 e9       	ldi	r25, 0x96	; 150
 894:	bb 27       	eor	r27, r27
 896:	93 95       	inc	r25
 898:	f6 95       	lsr	r31
 89a:	87 95       	ror	r24
 89c:	77 95       	ror	r23
 89e:	67 95       	ror	r22
 8a0:	b7 95       	ror	r27
 8a2:	f1 11       	cpse	r31, r1
 8a4:	f8 cf       	rjmp	.-16     	; 0x896 <__floatsisf+0x1c>
 8a6:	fa f4       	brpl	.+62     	; 0x8e6 <__floatsisf+0x6c>
 8a8:	bb 0f       	add	r27, r27
 8aa:	11 f4       	brne	.+4      	; 0x8b0 <__floatsisf+0x36>
 8ac:	60 ff       	sbrs	r22, 0
 8ae:	1b c0       	rjmp	.+54     	; 0x8e6 <__floatsisf+0x6c>
 8b0:	6f 5f       	subi	r22, 0xFF	; 255
 8b2:	7f 4f       	sbci	r23, 0xFF	; 255
 8b4:	8f 4f       	sbci	r24, 0xFF	; 255
 8b6:	9f 4f       	sbci	r25, 0xFF	; 255
 8b8:	16 c0       	rjmp	.+44     	; 0x8e6 <__floatsisf+0x6c>
 8ba:	88 23       	and	r24, r24
 8bc:	11 f0       	breq	.+4      	; 0x8c2 <__floatsisf+0x48>
 8be:	96 e9       	ldi	r25, 0x96	; 150
 8c0:	11 c0       	rjmp	.+34     	; 0x8e4 <__floatsisf+0x6a>
 8c2:	77 23       	and	r23, r23
 8c4:	21 f0       	breq	.+8      	; 0x8ce <__floatsisf+0x54>
 8c6:	9e e8       	ldi	r25, 0x8E	; 142
 8c8:	87 2f       	mov	r24, r23
 8ca:	76 2f       	mov	r23, r22
 8cc:	05 c0       	rjmp	.+10     	; 0x8d8 <__floatsisf+0x5e>
 8ce:	66 23       	and	r22, r22
 8d0:	71 f0       	breq	.+28     	; 0x8ee <__floatsisf+0x74>
 8d2:	96 e8       	ldi	r25, 0x86	; 134
 8d4:	86 2f       	mov	r24, r22
 8d6:	70 e0       	ldi	r23, 0x00	; 0
 8d8:	60 e0       	ldi	r22, 0x00	; 0
 8da:	2a f0       	brmi	.+10     	; 0x8e6 <__floatsisf+0x6c>
 8dc:	9a 95       	dec	r25
 8de:	66 0f       	add	r22, r22
 8e0:	77 1f       	adc	r23, r23
 8e2:	88 1f       	adc	r24, r24
 8e4:	da f7       	brpl	.-10     	; 0x8dc <__floatsisf+0x62>
 8e6:	88 0f       	add	r24, r24
 8e8:	96 95       	lsr	r25
 8ea:	87 95       	ror	r24
 8ec:	97 f9       	bld	r25, 7
 8ee:	08 95       	ret

000008f0 <__fp_cmp>:
 8f0:	99 0f       	add	r25, r25
 8f2:	00 08       	sbc	r0, r0
 8f4:	55 0f       	add	r21, r21
 8f6:	aa 0b       	sbc	r26, r26
 8f8:	e0 e8       	ldi	r30, 0x80	; 128
 8fa:	fe ef       	ldi	r31, 0xFE	; 254
 8fc:	16 16       	cp	r1, r22
 8fe:	17 06       	cpc	r1, r23
 900:	e8 07       	cpc	r30, r24
 902:	f9 07       	cpc	r31, r25
 904:	c0 f0       	brcs	.+48     	; 0x936 <__stack+0x37>
 906:	12 16       	cp	r1, r18
 908:	13 06       	cpc	r1, r19
 90a:	e4 07       	cpc	r30, r20
 90c:	f5 07       	cpc	r31, r21
 90e:	98 f0       	brcs	.+38     	; 0x936 <__stack+0x37>
 910:	62 1b       	sub	r22, r18
 912:	73 0b       	sbc	r23, r19
 914:	84 0b       	sbc	r24, r20
 916:	95 0b       	sbc	r25, r21
 918:	39 f4       	brne	.+14     	; 0x928 <__stack+0x29>
 91a:	0a 26       	eor	r0, r26
 91c:	61 f0       	breq	.+24     	; 0x936 <__stack+0x37>
 91e:	23 2b       	or	r18, r19
 920:	24 2b       	or	r18, r20
 922:	25 2b       	or	r18, r21
 924:	21 f4       	brne	.+8      	; 0x92e <__stack+0x2f>
 926:	08 95       	ret
 928:	0a 26       	eor	r0, r26
 92a:	09 f4       	brne	.+2      	; 0x92e <__stack+0x2f>
 92c:	a1 40       	sbci	r26, 0x01	; 1
 92e:	a6 95       	lsr	r26
 930:	8f ef       	ldi	r24, 0xFF	; 255
 932:	81 1d       	adc	r24, r1
 934:	81 1d       	adc	r24, r1
 936:	08 95       	ret

00000938 <__fp_inf>:
 938:	97 f9       	bld	r25, 7
 93a:	9f 67       	ori	r25, 0x7F	; 127
 93c:	80 e8       	ldi	r24, 0x80	; 128
 93e:	70 e0       	ldi	r23, 0x00	; 0
 940:	60 e0       	ldi	r22, 0x00	; 0
 942:	08 95       	ret

00000944 <__fp_nan>:
 944:	9f ef       	ldi	r25, 0xFF	; 255
 946:	80 ec       	ldi	r24, 0xC0	; 192
 948:	08 95       	ret

0000094a <__fp_pscA>:
 94a:	00 24       	eor	r0, r0
 94c:	0a 94       	dec	r0
 94e:	16 16       	cp	r1, r22
 950:	17 06       	cpc	r1, r23
 952:	18 06       	cpc	r1, r24
 954:	09 06       	cpc	r0, r25
 956:	08 95       	ret

00000958 <__fp_pscB>:
 958:	00 24       	eor	r0, r0
 95a:	0a 94       	dec	r0
 95c:	12 16       	cp	r1, r18
 95e:	13 06       	cpc	r1, r19
 960:	14 06       	cpc	r1, r20
 962:	05 06       	cpc	r0, r21
 964:	08 95       	ret

00000966 <__fp_round>:
 966:	09 2e       	mov	r0, r25
 968:	03 94       	inc	r0
 96a:	00 0c       	add	r0, r0
 96c:	11 f4       	brne	.+4      	; 0x972 <__fp_round+0xc>
 96e:	88 23       	and	r24, r24
 970:	52 f0       	brmi	.+20     	; 0x986 <__fp_round+0x20>
 972:	bb 0f       	add	r27, r27
 974:	40 f4       	brcc	.+16     	; 0x986 <__fp_round+0x20>
 976:	bf 2b       	or	r27, r31
 978:	11 f4       	brne	.+4      	; 0x97e <__fp_round+0x18>
 97a:	60 ff       	sbrs	r22, 0
 97c:	04 c0       	rjmp	.+8      	; 0x986 <__fp_round+0x20>
 97e:	6f 5f       	subi	r22, 0xFF	; 255
 980:	7f 4f       	sbci	r23, 0xFF	; 255
 982:	8f 4f       	sbci	r24, 0xFF	; 255
 984:	9f 4f       	sbci	r25, 0xFF	; 255
 986:	08 95       	ret

00000988 <__fp_split3>:
 988:	57 fd       	sbrc	r21, 7
 98a:	90 58       	subi	r25, 0x80	; 128
 98c:	44 0f       	add	r20, r20
 98e:	55 1f       	adc	r21, r21
 990:	59 f0       	breq	.+22     	; 0x9a8 <__fp_splitA+0x10>
 992:	5f 3f       	cpi	r21, 0xFF	; 255
 994:	71 f0       	breq	.+28     	; 0x9b2 <__fp_splitA+0x1a>
 996:	47 95       	ror	r20

00000998 <__fp_splitA>:
 998:	88 0f       	add	r24, r24
 99a:	97 fb       	bst	r25, 7
 99c:	99 1f       	adc	r25, r25
 99e:	61 f0       	breq	.+24     	; 0x9b8 <__fp_splitA+0x20>
 9a0:	9f 3f       	cpi	r25, 0xFF	; 255
 9a2:	79 f0       	breq	.+30     	; 0x9c2 <__fp_splitA+0x2a>
 9a4:	87 95       	ror	r24
 9a6:	08 95       	ret
 9a8:	12 16       	cp	r1, r18
 9aa:	13 06       	cpc	r1, r19
 9ac:	14 06       	cpc	r1, r20
 9ae:	55 1f       	adc	r21, r21
 9b0:	f2 cf       	rjmp	.-28     	; 0x996 <__fp_split3+0xe>
 9b2:	46 95       	lsr	r20
 9b4:	f1 df       	rcall	.-30     	; 0x998 <__fp_splitA>
 9b6:	08 c0       	rjmp	.+16     	; 0x9c8 <__fp_splitA+0x30>
 9b8:	16 16       	cp	r1, r22
 9ba:	17 06       	cpc	r1, r23
 9bc:	18 06       	cpc	r1, r24
 9be:	99 1f       	adc	r25, r25
 9c0:	f1 cf       	rjmp	.-30     	; 0x9a4 <__fp_splitA+0xc>
 9c2:	86 95       	lsr	r24
 9c4:	71 05       	cpc	r23, r1
 9c6:	61 05       	cpc	r22, r1
 9c8:	08 94       	sec
 9ca:	08 95       	ret

000009cc <__fp_zero>:
 9cc:	e8 94       	clt

000009ce <__fp_szero>:
 9ce:	bb 27       	eor	r27, r27
 9d0:	66 27       	eor	r22, r22
 9d2:	77 27       	eor	r23, r23
 9d4:	cb 01       	movw	r24, r22
 9d6:	97 f9       	bld	r25, 7
 9d8:	08 95       	ret

000009da <__gesf2>:
 9da:	0e 94 78 04 	call	0x8f0	; 0x8f0 <__fp_cmp>
 9de:	08 f4       	brcc	.+2      	; 0x9e2 <__gesf2+0x8>
 9e0:	8f ef       	ldi	r24, 0xFF	; 255
 9e2:	08 95       	ret

000009e4 <__udivmodsi4>:
 9e4:	a1 e2       	ldi	r26, 0x21	; 33
 9e6:	1a 2e       	mov	r1, r26
 9e8:	aa 1b       	sub	r26, r26
 9ea:	bb 1b       	sub	r27, r27
 9ec:	fd 01       	movw	r30, r26
 9ee:	0d c0       	rjmp	.+26     	; 0xa0a <__udivmodsi4_ep>

000009f0 <__udivmodsi4_loop>:
 9f0:	aa 1f       	adc	r26, r26
 9f2:	bb 1f       	adc	r27, r27
 9f4:	ee 1f       	adc	r30, r30
 9f6:	ff 1f       	adc	r31, r31
 9f8:	a2 17       	cp	r26, r18
 9fa:	b3 07       	cpc	r27, r19
 9fc:	e4 07       	cpc	r30, r20
 9fe:	f5 07       	cpc	r31, r21
 a00:	20 f0       	brcs	.+8      	; 0xa0a <__udivmodsi4_ep>
 a02:	a2 1b       	sub	r26, r18
 a04:	b3 0b       	sbc	r27, r19
 a06:	e4 0b       	sbc	r30, r20
 a08:	f5 0b       	sbc	r31, r21

00000a0a <__udivmodsi4_ep>:
 a0a:	66 1f       	adc	r22, r22
 a0c:	77 1f       	adc	r23, r23
 a0e:	88 1f       	adc	r24, r24
 a10:	99 1f       	adc	r25, r25
 a12:	1a 94       	dec	r1
 a14:	69 f7       	brne	.-38     	; 0x9f0 <__udivmodsi4_loop>
 a16:	60 95       	com	r22
 a18:	70 95       	com	r23
 a1a:	80 95       	com	r24
 a1c:	90 95       	com	r25
 a1e:	9b 01       	movw	r18, r22
 a20:	ac 01       	movw	r20, r24
 a22:	bd 01       	movw	r22, r26
 a24:	cf 01       	movw	r24, r30
 a26:	08 95       	ret

00000a28 <_exit>:
 a28:	f8 94       	cli

00000a2a <__stop_program>:
 a2a:	ff cf       	rjmp	.-2      	; 0xa2a <__stop_program>
