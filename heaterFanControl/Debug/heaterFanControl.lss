
heaterFanControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000ba8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b34  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800100  00800100  00000ba8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ba8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bd8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001040  00000000  00000000  00000ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000089c  00000000  00000000  00001d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009dd  00000000  00000000  000025c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  00002fa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000590  00000000  00000000  00003194  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000098a  00000000  00000000  00003724  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000040ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_7>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 31       	cpi	r26, 0x10	; 16
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 d6 01 	call	0x3ac	; 0x3ac <main>
  88:	0c 94 98 05 	jmp	0xb30	; 0xb30 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_7>:
	
	return ADC;
}

void pwm_heater(uint8_t p) {
	OCR0A = (uint8_t)(p * 0.01 * 255);
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	3f 93       	push	r19
  9e:	4f 93       	push	r20
  a0:	5f 93       	push	r21
  a2:	6f 93       	push	r22
  a4:	7f 93       	push	r23
  a6:	8f 93       	push	r24
  a8:	9f 93       	push	r25
  aa:	af 93       	push	r26
  ac:	bf 93       	push	r27
  ae:	ef 93       	push	r30
  b0:	ff 93       	push	r31
  b2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <milliseconds>
  b6:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <milliseconds+0x1>
  ba:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <milliseconds+0x2>
  be:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <milliseconds+0x3>
  c2:	01 96       	adiw	r24, 0x01	; 1
  c4:	a1 1d       	adc	r26, r1
  c6:	b1 1d       	adc	r27, r1
  c8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <milliseconds>
  cc:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <milliseconds+0x1>
  d0:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <milliseconds+0x2>
  d4:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <milliseconds+0x3>
  d8:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <milliseconds>
  dc:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <milliseconds+0x1>
  e0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <milliseconds+0x2>
  e4:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <milliseconds+0x3>
  e8:	28 e8       	ldi	r18, 0x88	; 136
  ea:	33 e1       	ldi	r19, 0x13	; 19
  ec:	40 e0       	ldi	r20, 0x00	; 0
  ee:	50 e0       	ldi	r21, 0x00	; 0
  f0:	0e 94 67 05 	call	0xace	; 0xace <__udivmodsi4>
  f4:	67 2b       	or	r22, r23
  f6:	68 2b       	or	r22, r24
  f8:	69 2b       	or	r22, r25
  fa:	19 f4       	brne	.+6      	; 0x102 <__vector_7+0x72>
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <flag_check_sensor>
 102:	ff 91       	pop	r31
 104:	ef 91       	pop	r30
 106:	bf 91       	pop	r27
 108:	af 91       	pop	r26
 10a:	9f 91       	pop	r25
 10c:	8f 91       	pop	r24
 10e:	7f 91       	pop	r23
 110:	6f 91       	pop	r22
 112:	5f 91       	pop	r21
 114:	4f 91       	pop	r20
 116:	3f 91       	pop	r19
 118:	2f 91       	pop	r18
 11a:	0f 90       	pop	r0
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	0f 90       	pop	r0
 120:	1f 90       	pop	r1
 122:	18 95       	reti

00000124 <init_timerModule>:
 124:	e0 e7       	ldi	r30, 0x70	; 112
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	82 60       	ori	r24, 0x02	; 2
 12c:	80 83       	st	Z, r24
 12e:	e0 eb       	ldi	r30, 0xB0	; 176
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	82 60       	ori	r24, 0x02	; 2
 136:	80 83       	st	Z, r24
 138:	e1 eb       	ldi	r30, 0xB1	; 177
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	82 60       	ori	r24, 0x02	; 2
 140:	80 83       	st	Z, r24
 142:	8c e7       	ldi	r24, 0x7C	; 124
 144:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 148:	08 95       	ret

0000014a <pwm_init>:
 14a:	56 9a       	sbi	0x0a, 6	; 10
 14c:	5e 98       	cbi	0x0b, 6	; 11
 14e:	81 e8       	ldi	r24, 0x81	; 129
 150:	84 bd       	out	0x24, r24	; 36
 152:	84 e0       	ldi	r24, 0x04	; 4
 154:	85 bd       	out	0x25, r24	; 37
 156:	16 bc       	out	0x26, r1	; 38
 158:	17 bc       	out	0x27, r1	; 39
 15a:	21 9a       	sbi	0x04, 1	; 4
 15c:	29 9a       	sbi	0x05, 1	; 5
 15e:	80 ec       	ldi	r24, 0xC0	; 192
 160:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 164:	81 e1       	ldi	r24, 0x11	; 17
 166:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 16a:	84 e1       	ldi	r24, 0x14	; 20
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <TOP_VAL+0x1>
 172:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <TOP_VAL>
 176:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 17a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 17e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 182:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 186:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 18a:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 18e:	08 95       	ret

00000190 <init_io>:
 190:	8a b1       	in	r24, 0x0a	; 10
 192:	88 61       	ori	r24, 0x18	; 24
 194:	8a b9       	out	0x0a, r24	; 10
 196:	8b b1       	in	r24, 0x0b	; 11
 198:	87 7e       	andi	r24, 0xE7	; 231
 19a:	8b b9       	out	0x0b, r24	; 11
 19c:	8a b1       	in	r24, 0x0a	; 10
 19e:	88 7f       	andi	r24, 0xF8	; 248
 1a0:	8a b9       	out	0x0a, r24	; 10
 1a2:	8b b1       	in	r24, 0x0b	; 11
 1a4:	87 60       	ori	r24, 0x07	; 7
 1a6:	8b b9       	out	0x0b, r24	; 11
 1a8:	22 9a       	sbi	0x04, 2	; 4
 1aa:	2a 98       	cbi	0x05, 2	; 5
 1ac:	08 95       	ret

000001ae <init_adc>:
 1ae:	ea e7       	ldi	r30, 0x7A	; 122
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	83 60       	ori	r24, 0x03	; 3
 1b6:	80 83       	st	Z, r24
 1b8:	80 81       	ld	r24, Z
 1ba:	80 68       	ori	r24, 0x80	; 128
 1bc:	80 83       	st	Z, r24
 1be:	ec e7       	ldi	r30, 0x7C	; 124
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	87 64       	ori	r24, 0x47	; 71
 1c6:	80 83       	st	Z, r24
 1c8:	08 95       	ret

000001ca <read_analog>:
 1ca:	ea e7       	ldi	r30, 0x7A	; 122
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	80 64       	ori	r24, 0x40	; 64
 1d2:	80 83       	st	Z, r24
 1d4:	80 81       	ld	r24, Z
 1d6:	84 ff       	sbrs	r24, 4
 1d8:	fd cf       	rjmp	.-6      	; 0x1d4 <read_analog+0xa>
 1da:	ea e7       	ldi	r30, 0x7A	; 122
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	80 61       	ori	r24, 0x10	; 16
 1e2:	80 83       	st	Z, r24
 1e4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 1e8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 1ec:	08 95       	ret

000001ee <pwm_fan>:
	return;
}

void pwm_fan(uint8_t p) {
 1ee:	cf 92       	push	r12
 1f0:	df 92       	push	r13
 1f2:	ef 92       	push	r14
 1f4:	ff 92       	push	r15
	OCR1A = (uint8_t)(p  * 0.01 *  TOP_VAL);
 1f6:	68 2f       	mov	r22, r24
 1f8:	70 e0       	ldi	r23, 0x00	; 0
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__floatsisf>
 202:	2a e0       	ldi	r18, 0x0A	; 10
 204:	37 ed       	ldi	r19, 0xD7	; 215
 206:	43 e2       	ldi	r20, 0x23	; 35
 208:	5c e3       	ldi	r21, 0x3C	; 60
 20a:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__mulsf3>
 20e:	6b 01       	movw	r12, r22
 210:	7c 01       	movw	r14, r24
 212:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <TOP_VAL>
 216:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <TOP_VAL+0x1>
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__floatunsisf>
 222:	9b 01       	movw	r18, r22
 224:	ac 01       	movw	r20, r24
 226:	c7 01       	movw	r24, r14
 228:	b6 01       	movw	r22, r12
 22a:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__mulsf3>
 22e:	0e 94 3d 04 	call	0x87a	; 0x87a <__fixunssfsi>
 232:	70 e0       	ldi	r23, 0x00	; 0
 234:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 238:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	return;
}
 23c:	ff 90       	pop	r15
 23e:	ef 90       	pop	r14
 240:	df 90       	pop	r13
 242:	cf 90       	pop	r12
 244:	08 95       	ret

00000246 <get_temp>:
	
	uint16_t analog_val = 0;
	float temperature = 0.0;
	float v_out = 0.0;
	
	analog_val = read_analog();
 246:	0e 94 e5 00 	call	0x1ca	; 0x1ca <read_analog>
	
	// Get output voltage in mV
	v_out = analog_val  * 4.8828125;
	
	// Temperature calculation goes follows
	temperature = (v_out - 500.0);
 24a:	bc 01       	movw	r22, r24
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__floatunsisf>
 254:	20 e0       	ldi	r18, 0x00	; 0
 256:	30 e4       	ldi	r19, 0x40	; 64
 258:	4c e9       	ldi	r20, 0x9C	; 156
 25a:	50 e4       	ldi	r21, 0x40	; 64
 25c:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__mulsf3>
 260:	20 e0       	ldi	r18, 0x00	; 0
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	4a ef       	ldi	r20, 0xFA	; 250
 266:	53 e4       	ldi	r21, 0x43	; 67
 268:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__subsf3>
	
	temperature = temperature / 10.0;

	return (uint8_t)temperature;
 26c:	20 e0       	ldi	r18, 0x00	; 0
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	40 e2       	ldi	r20, 0x20	; 32
 272:	51 e4       	ldi	r21, 0x41	; 65
 274:	0e 94 cb 03 	call	0x796	; 0x796 <__divsf3>
 278:	0e 94 3d 04 	call	0x87a	; 0x87a <__fixunssfsi>
 27c:	86 2f       	mov	r24, r22
}
 27e:	08 95       	ret

00000280 <sw_a>:

uint8_t sw_a() {
	if(IO_PORTD_IN & (1 << SW_A)) {
 280:	89 b1       	in	r24, 0x09	; 9
		return 1;
	} else {
		return 0;
	}
}
 282:	81 70       	andi	r24, 0x01	; 1
 284:	08 95       	ret

00000286 <get_sw_a>:

uint8_t get_sw_a() {
	static uint8_t switch_state = LOW;
	static uint8_t switch_state_prev = LOW;
		
	switch_state = sw_a();
 286:	0e 94 40 01 	call	0x280	; 0x280 <sw_a>
 28a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <switch_state.1773>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28e:	87 e8       	ldi	r24, 0x87	; 135
 290:	93 e1       	ldi	r25, 0x13	; 19
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <get_sw_a+0xc>
 296:	00 c0       	rjmp	.+0      	; 0x298 <get_sw_a+0x12>
 298:	00 00       	nop
		
	_delay_ms(20);  // De-bounce Time
		
	if(((switch_state == HIGH) && (switch_state_prev == LOW)) \
 29a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <switch_state.1773>
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	29 f4       	brne	.+10     	; 0x2ac <get_sw_a+0x26>
 2a2:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <switch_state_prev.1774>
 2a6:	99 23       	and	r25, r25
 2a8:	39 f0       	breq	.+14     	; 0x2b8 <get_sw_a+0x32>
 2aa:	0d c0       	rjmp	.+26     	; 0x2c6 <get_sw_a+0x40>
		|| ((switch_state == LOW) && (switch_state_prev == HIGH))) {
 2ac:	81 11       	cpse	r24, r1
 2ae:	0b c0       	rjmp	.+22     	; 0x2c6 <get_sw_a+0x40>
 2b0:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <switch_state_prev.1774>
 2b4:	91 30       	cpi	r25, 0x01	; 1
 2b6:	39 f4       	brne	.+14     	; 0x2c6 <get_sw_a+0x40>
		switch_state_prev = switch_state;
 2b8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <switch_state_prev.1774>
		count_sw_a++;	// Increment the counter
 2bc:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <count_sw_a>
 2c0:	8f 5f       	subi	r24, 0xFF	; 255
 2c2:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <count_sw_a>
	}
		
	if(count_sw_a > 4)	count_sw_a = 1; // Initial Value is 1
 2c6:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <count_sw_a>
 2ca:	85 30       	cpi	r24, 0x05	; 5
 2cc:	18 f0       	brcs	.+6      	; 0x2d4 <get_sw_a+0x4e>
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <count_sw_a>
		
	return count_sw_a;
 2d4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <count_sw_a>
}
 2d8:	08 95       	ret

000002da <sw_b>:

uint8_t sw_b() {
	if(IO_PORTD_IN & (1 << SW_B)) {
 2da:	89 b1       	in	r24, 0x09	; 9
		return 1;
	} else {
		return 0;
	}
}
 2dc:	86 95       	lsr	r24
 2de:	81 70       	andi	r24, 0x01	; 1
 2e0:	08 95       	ret

000002e2 <get_sw_b>:
uint8_t get_sw_b() {
	
	static uint8_t switch_state = LOW;
	static uint8_t switch_state_prev = LOW;
	
	switch_state = sw_b();
 2e2:	0e 94 6d 01 	call	0x2da	; 0x2da <sw_b>
 2e6:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <switch_state.1779>
 2ea:	87 e8       	ldi	r24, 0x87	; 135
 2ec:	93 e1       	ldi	r25, 0x13	; 19
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <get_sw_b+0xc>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <get_sw_b+0x12>
 2f4:	00 00       	nop
	
	_delay_ms(20);  // De-bounce Time
	
	if(((switch_state == HIGH) && (switch_state_prev == LOW)) \
 2f6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <switch_state.1779>
 2fa:	81 30       	cpi	r24, 0x01	; 1
 2fc:	29 f4       	brne	.+10     	; 0x308 <get_sw_b+0x26>
 2fe:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <switch_state_prev.1780>
 302:	99 23       	and	r25, r25
 304:	39 f0       	breq	.+14     	; 0x314 <get_sw_b+0x32>
 306:	0d c0       	rjmp	.+26     	; 0x322 <get_sw_b+0x40>
		|| ((switch_state == LOW) && (switch_state_prev == HIGH))) {
 308:	81 11       	cpse	r24, r1
 30a:	0b c0       	rjmp	.+22     	; 0x322 <get_sw_b+0x40>
 30c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <switch_state_prev.1780>
 310:	91 30       	cpi	r25, 0x01	; 1
 312:	39 f4       	brne	.+14     	; 0x322 <get_sw_b+0x40>
		switch_state_prev = switch_state;
 314:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <switch_state_prev.1780>
		count_sw_b++;	// Increment the counter
 318:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <count_sw_b>
 31c:	8f 5f       	subi	r24, 0xFF	; 255
 31e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <count_sw_b>
	}
	
	if(count_sw_b > 2)	count_sw_b = 1; // Initial Value is 1
 322:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <count_sw_b>
 326:	83 30       	cpi	r24, 0x03	; 3
 328:	18 f0       	brcs	.+6      	; 0x330 <get_sw_b+0x4e>
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <count_sw_b>
	
	return count_sw_b;	
 330:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <count_sw_b>
}
 334:	08 95       	ret

00000336 <sw_c>:

uint8_t sw_c() {
	if(IO_PORTD_IN & (1 << SW_C)) {
 336:	89 b1       	in	r24, 0x09	; 9
		return 1;
	} else {
		return 0;
	}
}
 338:	82 fb       	bst	r24, 2
 33a:	88 27       	eor	r24, r24
 33c:	80 f9       	bld	r24, 0
 33e:	08 95       	ret

00000340 <get_sw_c>:
uint8_t get_sw_c() {
	
	static uint8_t switch_state = LOW;
	static uint8_t switch_state_prev = LOW;
	
	switch_state = sw_c();
 340:	0e 94 9b 01 	call	0x336	; 0x336 <sw_c>
 344:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <switch_state.1785>
 348:	87 e8       	ldi	r24, 0x87	; 135
 34a:	93 e1       	ldi	r25, 0x13	; 19
 34c:	01 97       	sbiw	r24, 0x01	; 1
 34e:	f1 f7       	brne	.-4      	; 0x34c <get_sw_c+0xc>
 350:	00 c0       	rjmp	.+0      	; 0x352 <get_sw_c+0x12>
 352:	00 00       	nop
	
	_delay_ms(20);  // De-bounce Time
	
	if(((switch_state == HIGH) && (switch_state_prev == LOW)) \
 354:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <switch_state.1785>
 358:	81 30       	cpi	r24, 0x01	; 1
 35a:	29 f4       	brne	.+10     	; 0x366 <get_sw_c+0x26>
 35c:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 360:	99 23       	and	r25, r25
 362:	39 f0       	breq	.+14     	; 0x372 <get_sw_c+0x32>
 364:	0d c0       	rjmp	.+26     	; 0x380 <get_sw_c+0x40>
		|| ((switch_state == LOW) && (switch_state_prev == HIGH))) {
 366:	81 11       	cpse	r24, r1
 368:	0b c0       	rjmp	.+22     	; 0x380 <get_sw_c+0x40>
 36a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 36e:	91 30       	cpi	r25, 0x01	; 1
 370:	39 f4       	brne	.+14     	; 0x380 <get_sw_c+0x40>
		switch_state_prev = switch_state;
 372:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		count_sw_c++;	// Increment the counter
 376:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <count_sw_c>
 37a:	8f 5f       	subi	r24, 0xFF	; 255
 37c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <count_sw_c>
	}
	
	if(count_sw_c > 4)	count_sw_c = 1; // Initial Value is 1
 380:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <count_sw_c>
 384:	85 30       	cpi	r24, 0x05	; 5
 386:	18 f0       	brcs	.+6      	; 0x38e <get_sw_c+0x4e>
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <count_sw_c>
	
	return count_sw_c;
 38e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <count_sw_c>
}
 392:	08 95       	ret

00000394 <led_heater_on>:

void led_heater_on() {
	IO_PORTD_OUT |= (1 << H_LED_CNTL);
 394:	5c 9a       	sbi	0x0b, 4	; 11
 396:	08 95       	ret

00000398 <led_heater_off>:
	return;
}

void led_heater_off() {
	IO_PORTD_OUT &= ~(1 << H_LED_CNTL);
 398:	5c 98       	cbi	0x0b, 4	; 11
 39a:	08 95       	ret

0000039c <led_fan_on>:
	return;
}

void led_fan_on() {
	IO_PORTD_OUT |= (1 << F_LED_CNTL);
 39c:	5b 9a       	sbi	0x0b, 3	; 11
 39e:	08 95       	ret

000003a0 <led_fan_off>:
	return;
}

void led_fan_off() {
	IO_PORTD_OUT &= ~(1 << F_LED_CNTL);
 3a0:	5b 98       	cbi	0x0b, 3	; 11
 3a2:	08 95       	ret

000003a4 <led_sig_on>:
	return;
}

void led_sig_on() {
	IO_PORTB_OUT |= (1 << LED_SIG);
 3a4:	2a 9a       	sbi	0x05, 2	; 5
 3a6:	08 95       	ret

000003a8 <led_sig_off>:
	return;
}

void led_sig_off() {
	IO_PORTB_OUT &= ~(1 << LED_SIG);
 3a8:	2a 98       	cbi	0x05, 2	; 5
 3aa:	08 95       	ret

000003ac <main>:
	return;
}

int main(void) {    
 3ac:	cf 93       	push	r28
 3ae:	df 93       	push	r29
 3b0:	00 d0       	rcall	.+0      	; 0x3b2 <main+0x6>
 3b2:	1f 92       	push	r1
 3b4:	cd b7       	in	r28, 0x3d	; 61
 3b6:	de b7       	in	r29, 0x3e	; 62
	
	init_timerModule();
 3b8:	0e 94 92 00 	call	0x124	; 0x124 <init_timerModule>
	init_adc();
 3bc:	0e 94 d7 00 	call	0x1ae	; 0x1ae <init_adc>
	init_io();
 3c0:	0e 94 c8 00 	call	0x190	; 0x190 <init_io>
	pwm_init();
 3c4:	0e 94 a5 00 	call	0x14a	; 0x14a <pwm_init>
	sei();
 3c8:	78 94       	sei
	uint8_t swc_val = 0;
	uint8_t swc_prev_val = 0;

	unsigned long time_val_heater_start = 0;
	unsigned long time_val_fan_start = 0;
	unsigned long time_val_led_start = 0;
 3ca:	41 2c       	mov	r4, r1
 3cc:	51 2c       	mov	r5, r1
 3ce:	32 01       	movw	r6, r4

	uint8_t swc_val = 0;
	uint8_t swc_prev_val = 0;

	unsigned long time_val_heater_start = 0;
	unsigned long time_val_fan_start = 0;
 3d0:	81 2c       	mov	r8, r1
 3d2:	91 2c       	mov	r9, r1
 3d4:	54 01       	movw	r10, r8
	uint8_t swb_prev_val = 0;

	uint8_t swc_val = 0;
	uint8_t swc_prev_val = 0;

	unsigned long time_val_heater_start = 0;
 3d6:	c1 2c       	mov	r12, r1
 3d8:	d1 2c       	mov	r13, r1
 3da:	76 01       	movw	r14, r12

	uint8_t swb_val = 0;
	uint8_t swb_prev_val = 0;

	uint8_t swc_val = 0;
	uint8_t swc_prev_val = 0;
 3dc:	31 2c       	mov	r3, r1
	
	uint8_t swa_val = 0;
	uint8_t swa_prev_val = 0;

	uint8_t swb_val = 0;
	uint8_t swb_prev_val = 0;
 3de:	19 82       	std	Y+1, r1	; 0x01
	init_io();
	pwm_init();
	sei();
	
	uint8_t swa_val = 0;
	uint8_t swa_prev_val = 0;
 3e0:	21 2c       	mov	r2, r1
	uint8_t temp_avg  = 0;
	uint16_t temp_sum = 0;

    while (1) {		
		
		swa_val = get_sw_a();
 3e2:	0e 94 43 01 	call	0x286	; 0x286 <get_sw_a>
 3e6:	8b 83       	std	Y+3, r24	; 0x03

		// ------- Heater Control -------------
		if(swa_val != swa_prev_val) {
 3e8:	28 16       	cp	r2, r24
 3ea:	09 f4       	brne	.+2      	; 0x3ee <main+0x42>
 3ec:	46 c0       	rjmp	.+140    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
			
			// --- Clear all other stuffs (fan/led)-----
			pwm_fan(PWM_FAN_PERCENT_OFF);
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	0e 94 f7 00 	call	0x1ee	; 0x1ee <pwm_fan>
			led_fan_off();
 3f4:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <led_fan_off>
			led_sig_off();
 3f8:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <led_sig_off>

			// Clear the tap history
			count_sw_b = 0; swb_prev_val = 0;
 3fc:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <count_sw_b>
			count_sw_c = 0; swc_prev_val = 0;
 400:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <count_sw_c>
	if((milliseconds % SENSOR_CHECK_TIME) == 0)
		flag_check_sensor = 1;
}

unsigned long millis(void) {
	return milliseconds;
 404:	c0 90 0c 01 	lds	r12, 0x010C	; 0x80010c <milliseconds>
 408:	d0 90 0d 01 	lds	r13, 0x010D	; 0x80010d <milliseconds+0x1>
 40c:	e0 90 0e 01 	lds	r14, 0x010E	; 0x80010e <milliseconds+0x2>
 410:	f0 90 0f 01 	lds	r15, 0x010F	; 0x80010f <milliseconds+0x3>
			
			// ---- Proceed to heater work
			time_val_heater_start = millis(); 
			swa_prev_val = swa_val;

			switch (swa_val) {
 414:	2b 81       	ldd	r18, Y+3	; 0x03
 416:	22 30       	cpi	r18, 0x02	; 2
 418:	91 f0       	breq	.+36     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 41a:	18 f4       	brcc	.+6      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 41c:	21 30       	cpi	r18, 0x01	; 1
 41e:	39 f0       	breq	.+14     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 420:	25 c0       	rjmp	.+74     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 422:	8b 81       	ldd	r24, Y+3	; 0x03
 424:	83 30       	cpi	r24, 0x03	; 3
 426:	99 f0       	breq	.+38     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 428:	84 30       	cpi	r24, 0x04	; 4
 42a:	c9 f0       	breq	.+50     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 42c:	1f c0       	rjmp	.+62     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
	
	return ADC;
}

void pwm_heater(uint8_t p) {
	OCR0A = (uint8_t)(p * 0.01 * 255);
 42e:	92 e3       	ldi	r25, 0x32	; 50
 430:	97 bd       	out	0x27, r25	; 39
			swa_prev_val = swa_val;

			switch (swa_val) {
				case 1:
					pwm_heater(PWM_HEATER_PERCENT_LOW);
					led_heater_on();
 432:	0e 94 ca 01 	call	0x394	; 0x394 <led_heater_on>
			count_sw_b = 0; swb_prev_val = 0;
			count_sw_c = 0; swc_prev_val = 0;
			
			// ---- Proceed to heater work
			time_val_heater_start = millis(); 
			swa_prev_val = swa_val;
 436:	2b 80       	ldd	r2, Y+3	; 0x03
			led_fan_off();
			led_sig_off();

			// Clear the tap history
			count_sw_b = 0; swb_prev_val = 0;
			count_sw_c = 0; swc_prev_val = 0;
 438:	31 2c       	mov	r3, r1
			pwm_fan(PWM_FAN_PERCENT_OFF);
			led_fan_off();
			led_sig_off();

			// Clear the tap history
			count_sw_b = 0; swb_prev_val = 0;
 43a:	19 82       	std	Y+1, r1	; 0x01

			switch (swa_val) {
				case 1:
					pwm_heater(PWM_HEATER_PERCENT_LOW);
					led_heater_on();
				break;
 43c:	1f c0       	rjmp	.+62     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
	
	return ADC;
}

void pwm_heater(uint8_t p) {
	OCR0A = (uint8_t)(p * 0.01 * 255);
 43e:	25 e6       	ldi	r18, 0x65	; 101
 440:	27 bd       	out	0x27, r18	; 39
					led_heater_on();
				break;
				
				case 2:
					pwm_heater(PWM_HEATER_PERCENT_MID);
					led_heater_on();
 442:	0e 94 ca 01 	call	0x394	; 0x394 <led_heater_on>
			count_sw_b = 0; swb_prev_val = 0;
			count_sw_c = 0; swc_prev_val = 0;
			
			// ---- Proceed to heater work
			time_val_heater_start = millis(); 
			swa_prev_val = swa_val;
 446:	2b 80       	ldd	r2, Y+3	; 0x03
			led_fan_off();
			led_sig_off();

			// Clear the tap history
			count_sw_b = 0; swb_prev_val = 0;
			count_sw_c = 0; swc_prev_val = 0;
 448:	31 2c       	mov	r3, r1
			pwm_fan(PWM_FAN_PERCENT_OFF);
			led_fan_off();
			led_sig_off();

			// Clear the tap history
			count_sw_b = 0; swb_prev_val = 0;
 44a:	19 82       	std	Y+1, r1	; 0x01
				break;
				
				case 2:
					pwm_heater(PWM_HEATER_PERCENT_MID);
					led_heater_on();
				break;
 44c:	17 c0       	rjmp	.+46     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
	
	return ADC;
}

void pwm_heater(uint8_t p) {
	OCR0A = (uint8_t)(p * 0.01 * 255);
 44e:	88 e9       	ldi	r24, 0x98	; 152
 450:	87 bd       	out	0x27, r24	; 39
					led_heater_on();
				break;
				
				case 3:
					pwm_heater(PWM_HEATER_PERCENT_HIGH);
					led_heater_on();
 452:	0e 94 ca 01 	call	0x394	; 0x394 <led_heater_on>
			count_sw_b = 0; swb_prev_val = 0;
			count_sw_c = 0; swc_prev_val = 0;
			
			// ---- Proceed to heater work
			time_val_heater_start = millis(); 
			swa_prev_val = swa_val;
 456:	2b 80       	ldd	r2, Y+3	; 0x03
			led_fan_off();
			led_sig_off();

			// Clear the tap history
			count_sw_b = 0; swb_prev_val = 0;
			count_sw_c = 0; swc_prev_val = 0;
 458:	31 2c       	mov	r3, r1
			pwm_fan(PWM_FAN_PERCENT_OFF);
			led_fan_off();
			led_sig_off();

			// Clear the tap history
			count_sw_b = 0; swb_prev_val = 0;
 45a:	19 82       	std	Y+1, r1	; 0x01
				break;
				
				case 3:
					pwm_heater(PWM_HEATER_PERCENT_HIGH);
					led_heater_on();
				break;
 45c:	0f c0       	rjmp	.+30     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
	
	return ADC;
}

void pwm_heater(uint8_t p) {
	OCR0A = (uint8_t)(p * 0.01 * 255);
 45e:	17 bc       	out	0x27, r1	; 39
					led_heater_on();
				break;
				
				case 4:
					pwm_heater(PWM_HEATER_PERCENT_OFF);
					led_heater_off();
 460:	0e 94 cc 01 	call	0x398	; 0x398 <led_heater_off>
			count_sw_b = 0; swb_prev_val = 0;
			count_sw_c = 0; swc_prev_val = 0;
			
			// ---- Proceed to heater work
			time_val_heater_start = millis(); 
			swa_prev_val = swa_val;
 464:	2b 80       	ldd	r2, Y+3	; 0x03
			led_fan_off();
			led_sig_off();

			// Clear the tap history
			count_sw_b = 0; swb_prev_val = 0;
			count_sw_c = 0; swc_prev_val = 0;
 466:	31 2c       	mov	r3, r1
			pwm_fan(PWM_FAN_PERCENT_OFF);
			led_fan_off();
			led_sig_off();

			// Clear the tap history
			count_sw_b = 0; swb_prev_val = 0;
 468:	19 82       	std	Y+1, r1	; 0x01
				break;
				
				case 4:
					pwm_heater(PWM_HEATER_PERCENT_OFF);
					led_heater_off();
				break;
 46a:	08 c0       	rjmp	.+16     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
	
	return ADC;
}

void pwm_heater(uint8_t p) {
	OCR0A = (uint8_t)(p * 0.01 * 255);
 46c:	17 bc       	out	0x27, r1	; 39
					led_heater_off();
				break;
				
				default:
					pwm_heater(PWM_HEATER_PERCENT_OFF);
					led_heater_off();
 46e:	0e 94 cc 01 	call	0x398	; 0x398 <led_heater_off>
			count_sw_b = 0; swb_prev_val = 0;
			count_sw_c = 0; swc_prev_val = 0;
			
			// ---- Proceed to heater work
			time_val_heater_start = millis(); 
			swa_prev_val = swa_val;
 472:	2b 80       	ldd	r2, Y+3	; 0x03
			led_fan_off();
			led_sig_off();

			// Clear the tap history
			count_sw_b = 0; swb_prev_val = 0;
			count_sw_c = 0; swc_prev_val = 0;
 474:	31 2c       	mov	r3, r1
			pwm_fan(PWM_FAN_PERCENT_OFF);
			led_fan_off();
			led_sig_off();

			// Clear the tap history
			count_sw_b = 0; swb_prev_val = 0;
 476:	19 82       	std	Y+1, r1	; 0x01
				break;
				
				default:
					pwm_heater(PWM_HEATER_PERCENT_OFF);
					led_heater_off();
				break;
 478:	01 c0       	rjmp	.+2      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 47a:	2b 80       	ldd	r2, Y+3	; 0x03
	if((milliseconds % SENSOR_CHECK_TIME) == 0)
		flag_check_sensor = 1;
}

unsigned long millis(void) {
	return milliseconds;
 47c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <milliseconds>
 480:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <milliseconds+0x1>
 484:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <milliseconds+0x2>
 488:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <milliseconds+0x3>
					led_heater_off();
				break;
			}
		}

		if((millis() - time_val_heater_start) > TIMER_VAL_HEATER) {
 48c:	8c 19       	sub	r24, r12
 48e:	9d 09       	sbc	r25, r13
 490:	ae 09       	sbc	r26, r14
 492:	bf 09       	sbc	r27, r15
 494:	81 35       	cpi	r24, 0x51	; 81
 496:	93 4c       	sbci	r25, 0xC3	; 195
 498:	a1 05       	cpc	r26, r1
 49a:	b1 05       	cpc	r27, r1
 49c:	30 f0       	brcs	.+12     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
	
	return ADC;
}

void pwm_heater(uint8_t p) {
	OCR0A = (uint8_t)(p * 0.01 * 255);
 49e:	17 bc       	out	0x27, r1	; 39
			}
		}

		if((millis() - time_val_heater_start) > TIMER_VAL_HEATER) {
			pwm_heater(PWM_HEATER_PERCENT_OFF);
			led_heater_off();
 4a0:	0e 94 cc 01 	call	0x398	; 0x398 <led_heater_off>
			count_sw_a = 0; swa_prev_val = 0;
 4a4:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <count_sw_a>
 4a8:	21 2c       	mov	r2, r1
		}
		// ------- End Heater Control -------------
	

		//----------- LED Control -----------------
		swb_val = get_sw_b();
 4aa:	0e 94 71 01 	call	0x2e2	; 0x2e2 <get_sw_b>
 4ae:	8a 83       	std	Y+2, r24	; 0x02
		
		if(swb_val != swb_prev_val) {
 4b0:	99 81       	ldd	r25, Y+1	; 0x01
 4b2:	98 17       	cp	r25, r24
 4b4:	49 f1       	breq	.+82     	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
	
	return ADC;
}

void pwm_heater(uint8_t p) {
	OCR0A = (uint8_t)(p * 0.01 * 255);
 4b6:	17 bc       	out	0x27, r1	; 39
		
		if(swb_val != swb_prev_val) {
			
			// --- Clear all other stuffs (heater/fan)-----
			pwm_heater(PWM_HEATER_PERCENT_OFF);
			led_heater_off();
 4b8:	0e 94 cc 01 	call	0x398	; 0x398 <led_heater_off>
			
			pwm_fan(PWM_FAN_PERCENT_OFF);
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	0e 94 f7 00 	call	0x1ee	; 0x1ee <pwm_fan>
			led_fan_off();
 4c2:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <led_fan_off>
			

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
 4c6:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <count_sw_a>
			count_sw_c = 0; swc_prev_val = 0;
 4ca:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <count_sw_c>
	if((milliseconds % SENSOR_CHECK_TIME) == 0)
		flag_check_sensor = 1;
}

unsigned long millis(void) {
	return milliseconds;
 4ce:	40 90 0c 01 	lds	r4, 0x010C	; 0x80010c <milliseconds>
 4d2:	50 90 0d 01 	lds	r5, 0x010D	; 0x80010d <milliseconds+0x1>
 4d6:	60 90 0e 01 	lds	r6, 0x010E	; 0x80010e <milliseconds+0x2>
 4da:	70 90 0f 01 	lds	r7, 0x010F	; 0x80010f <milliseconds+0x3>
			
			// ---- Proceed to LED work
			time_val_led_start = millis();
			swb_prev_val = swb_val;

			switch (swb_val) {
 4de:	2a 81       	ldd	r18, Y+2	; 0x02
 4e0:	21 30       	cpi	r18, 0x01	; 1
 4e2:	19 f0       	breq	.+6      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
 4e4:	22 30       	cpi	r18, 0x02	; 2
 4e6:	31 f0       	breq	.+12     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 4e8:	0a c0       	rjmp	.+20     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
				case 1:
					led_sig_on();
 4ea:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <led_sig_on>
			led_fan_off();
			

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
			count_sw_c = 0; swc_prev_val = 0;
 4ee:	10 e0       	ldi	r17, 0x00	; 0
			pwm_fan(PWM_FAN_PERCENT_OFF);
			led_fan_off();
			

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
 4f0:	21 2c       	mov	r2, r1
			swb_prev_val = swb_val;

			switch (swb_val) {
				case 1:
					led_sig_on();
				break;
 4f2:	0b c0       	rjmp	.+22     	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
				
				case 2:
					led_sig_off();
 4f4:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <led_sig_off>
			led_fan_off();
			

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
			count_sw_c = 0; swc_prev_val = 0;
 4f8:	10 e0       	ldi	r17, 0x00	; 0
			pwm_fan(PWM_FAN_PERCENT_OFF);
			led_fan_off();
			

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
 4fa:	21 2c       	mov	r2, r1
					led_sig_on();
				break;
				
				case 2:
					led_sig_off();
				break;
 4fc:	06 c0       	rjmp	.+12     	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
				
				default:
					led_sig_off();
 4fe:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <led_sig_off>
			led_fan_off();
			

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
			count_sw_c = 0; swc_prev_val = 0;
 502:	10 e0       	ldi	r17, 0x00	; 0
			pwm_fan(PWM_FAN_PERCENT_OFF);
			led_fan_off();
			

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
 504:	21 2c       	mov	r2, r1
					led_sig_off();
				break;
				
				default:
					led_sig_off();
				break;
 506:	01 c0       	rjmp	.+2      	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 508:	13 2d       	mov	r17, r3
	if((milliseconds % SENSOR_CHECK_TIME) == 0)
		flag_check_sensor = 1;
}

unsigned long millis(void) {
	return milliseconds;
 50a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <milliseconds>
 50e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <milliseconds+0x1>
 512:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <milliseconds+0x2>
 516:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <milliseconds+0x3>
					led_sig_off();
				break;
			}
		}

		if((millis() - time_val_led_start) > TIMER_VAL_LED) {
 51a:	84 19       	sub	r24, r4
 51c:	95 09       	sbc	r25, r5
 51e:	a6 09       	sbc	r26, r6
 520:	b7 09       	sbc	r27, r7
 522:	81 33       	cpi	r24, 0x31	; 49
 524:	95 47       	sbci	r25, 0x75	; 117
 526:	a1 05       	cpc	r26, r1
 528:	b1 05       	cpc	r27, r1
 52a:	28 f0       	brcs	.+10     	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
			led_sig_off();
 52c:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <led_sig_off>
			count_sw_b = 0; swb_prev_val = 0;
 530:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <count_sw_b>
 534:	1a 82       	std	Y+2, r1	; 0x02
		}
		// ------- End SIG LED control ---------------------------------


		//----------- Fan Control -----------------
		swc_val = get_sw_c();
 536:	0e 94 a0 01 	call	0x340	; 0x340 <get_sw_c>
 53a:	38 2e       	mov	r3, r24
		if(swc_val != swc_prev_val) {
 53c:	18 17       	cp	r17, r24
 53e:	09 f4       	brne	.+2      	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
 540:	49 c0       	rjmp	.+146    	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
	
	return ADC;
}

void pwm_heater(uint8_t p) {
	OCR0A = (uint8_t)(p * 0.01 * 255);
 542:	17 bc       	out	0x27, r1	; 39
		swc_val = get_sw_c();
		if(swc_val != swc_prev_val) {
	
			// --- Clear all other stuffs (heater/led)-----
			pwm_heater(PWM_HEATER_PERCENT_OFF);
			led_heater_off();
 544:	0e 94 cc 01 	call	0x398	; 0x398 <led_heater_off>
			led_sig_off();
 548:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <led_sig_off>

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
 54c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <count_sw_a>
			count_sw_b = 0; swb_prev_val = 0;
 550:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <count_sw_b>
	if((milliseconds % SENSOR_CHECK_TIME) == 0)
		flag_check_sensor = 1;
}

unsigned long millis(void) {
	return milliseconds;
 554:	80 90 0c 01 	lds	r8, 0x010C	; 0x80010c <milliseconds>
 558:	90 90 0d 01 	lds	r9, 0x010D	; 0x80010d <milliseconds+0x1>
 55c:	a0 90 0e 01 	lds	r10, 0x010E	; 0x80010e <milliseconds+0x2>
 560:	b0 90 0f 01 	lds	r11, 0x010F	; 0x80010f <milliseconds+0x3>
	
			// ---- Proceed to fan work
			time_val_fan_start = millis();
			swc_prev_val = swc_val;

			switch (swc_val) {
 564:	82 e0       	ldi	r24, 0x02	; 2
 566:	38 16       	cp	r3, r24
 568:	a9 f0       	breq	.+42     	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
 56a:	83 15       	cp	r24, r3
 56c:	20 f0       	brcs	.+8      	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
 56e:	91 e0       	ldi	r25, 0x01	; 1
 570:	39 16       	cp	r3, r25
 572:	41 f0       	breq	.+16     	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
 574:	27 c0       	rjmp	.+78     	; 0x5c4 <__LOCK_REGION_LENGTH__+0x1c4>
 576:	23 e0       	ldi	r18, 0x03	; 3
 578:	32 16       	cp	r3, r18
 57a:	a1 f0       	breq	.+40     	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
 57c:	84 e0       	ldi	r24, 0x04	; 4
 57e:	38 16       	cp	r3, r24
 580:	c9 f0       	breq	.+50     	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
 582:	20 c0       	rjmp	.+64     	; 0x5c4 <__LOCK_REGION_LENGTH__+0x1c4>
				case 1:
					pwm_fan(PWM_FAN_PERCENT_LOW);
 584:	81 e2       	ldi	r24, 0x21	; 33
 586:	0e 94 f7 00 	call	0x1ee	; 0x1ee <pwm_fan>
					led_fan_on();
 58a:	0e 94 ce 01 	call	0x39c	; 0x39c <led_fan_on>
			led_heater_off();
			led_sig_off();

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
			count_sw_b = 0; swb_prev_val = 0;
 58e:	19 82       	std	Y+1, r1	; 0x01
			pwm_heater(PWM_HEATER_PERCENT_OFF);
			led_heater_off();
			led_sig_off();

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
 590:	21 2c       	mov	r2, r1

			switch (swc_val) {
				case 1:
					pwm_fan(PWM_FAN_PERCENT_LOW);
					led_fan_on();
				break;
 592:	22 c0       	rjmp	.+68     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
		
				case 2:
					pwm_fan(PWM_FAN_PERCENT_MID);
 594:	82 e4       	ldi	r24, 0x42	; 66
 596:	0e 94 f7 00 	call	0x1ee	; 0x1ee <pwm_fan>
					led_fan_on();
 59a:	0e 94 ce 01 	call	0x39c	; 0x39c <led_fan_on>
			led_heater_off();
			led_sig_off();

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
			count_sw_b = 0; swb_prev_val = 0;
 59e:	19 82       	std	Y+1, r1	; 0x01
			pwm_heater(PWM_HEATER_PERCENT_OFF);
			led_heater_off();
			led_sig_off();

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
 5a0:	21 2c       	mov	r2, r1
				break;
		
				case 2:
					pwm_fan(PWM_FAN_PERCENT_MID);
					led_fan_on();
				break;
 5a2:	1a c0       	rjmp	.+52     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
		
				case 3:
					pwm_fan(PWM_FAN_PERCENT_HIGH);
 5a4:	84 e6       	ldi	r24, 0x64	; 100
 5a6:	0e 94 f7 00 	call	0x1ee	; 0x1ee <pwm_fan>
					led_fan_on();
 5aa:	0e 94 ce 01 	call	0x39c	; 0x39c <led_fan_on>
			led_heater_off();
			led_sig_off();

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
			count_sw_b = 0; swb_prev_val = 0;
 5ae:	19 82       	std	Y+1, r1	; 0x01
			pwm_heater(PWM_HEATER_PERCENT_OFF);
			led_heater_off();
			led_sig_off();

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
 5b0:	21 2c       	mov	r2, r1
				break;
		
				case 3:
					pwm_fan(PWM_FAN_PERCENT_HIGH);
					led_fan_on();
				break;
 5b2:	12 c0       	rjmp	.+36     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
		
				case 4:
					pwm_fan(PWM_FAN_PERCENT_OFF);
 5b4:	80 e0       	ldi	r24, 0x00	; 0
 5b6:	0e 94 f7 00 	call	0x1ee	; 0x1ee <pwm_fan>
					led_fan_off();
 5ba:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <led_fan_off>
			led_heater_off();
			led_sig_off();

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
			count_sw_b = 0; swb_prev_val = 0;
 5be:	19 82       	std	Y+1, r1	; 0x01
			pwm_heater(PWM_HEATER_PERCENT_OFF);
			led_heater_off();
			led_sig_off();

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
 5c0:	21 2c       	mov	r2, r1
				break;
		
				case 4:
					pwm_fan(PWM_FAN_PERCENT_OFF);
					led_fan_off();
				break;
 5c2:	0a c0       	rjmp	.+20     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
		
				default:
					pwm_fan(PWM_FAN_PERCENT_OFF);
 5c4:	80 e0       	ldi	r24, 0x00	; 0
 5c6:	0e 94 f7 00 	call	0x1ee	; 0x1ee <pwm_fan>
					led_fan_off();
 5ca:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <led_fan_off>
			led_heater_off();
			led_sig_off();

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
			count_sw_b = 0; swb_prev_val = 0;
 5ce:	19 82       	std	Y+1, r1	; 0x01
			pwm_heater(PWM_HEATER_PERCENT_OFF);
			led_heater_off();
			led_sig_off();

			// Clear the tap history
			count_sw_a = 0; swa_prev_val = 0;
 5d0:	21 2c       	mov	r2, r1
				break;
		
				default:
					pwm_fan(PWM_FAN_PERCENT_OFF);
					led_fan_off();
				break;
 5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
 5d4:	9a 81       	ldd	r25, Y+2	; 0x02
 5d6:	99 83       	std	Y+1, r25	; 0x01
	if((milliseconds % SENSOR_CHECK_TIME) == 0)
		flag_check_sensor = 1;
}

unsigned long millis(void) {
	return milliseconds;
 5d8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <milliseconds>
 5dc:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <milliseconds+0x1>
 5e0:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <milliseconds+0x2>
 5e4:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <milliseconds+0x3>
					led_fan_off();
				break;
			}
		}

		if((millis() - time_val_fan_start) > TIMER_VAL_FAN) {
 5e8:	88 19       	sub	r24, r8
 5ea:	99 09       	sbc	r25, r9
 5ec:	aa 09       	sbc	r26, r10
 5ee:	bb 09       	sbc	r27, r11
 5f0:	81 33       	cpi	r24, 0x31	; 49
 5f2:	95 47       	sbci	r25, 0x75	; 117
 5f4:	a1 05       	cpc	r26, r1
 5f6:	b1 05       	cpc	r27, r1
 5f8:	40 f0       	brcs	.+16     	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
			pwm_fan(PWM_FAN_PERCENT_OFF);
 5fa:	80 e0       	ldi	r24, 0x00	; 0
 5fc:	0e 94 f7 00 	call	0x1ee	; 0x1ee <pwm_fan>
			led_fan_off();
 600:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <led_fan_off>
			count_sw_c = 0; swc_prev_val = 0;
 604:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <count_sw_c>
 608:	31 2c       	mov	r3, r1
		// ------- End fan control ---------------------------------
	
		
		// --------------- Temperature sensing and Control ----------
		// ---- Check sensor each 120 seconds -------------------------
		if(flag_check_sensor) {
 60a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <flag_check_sensor>
 60e:	88 23       	and	r24, r24
 610:	09 f4       	brne	.+2      	; 0x614 <__LOCK_REGION_LENGTH__+0x214>
 612:	e7 ce       	rjmp	.-562    	; 0x3e2 <main+0x36>
			flag_check_sensor = 0;
 614:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <flag_check_sensor>
 618:	85 e0       	ldi	r24, 0x05	; 5
 61a:	8a 83       	std	Y+2, r24	; 0x02
 61c:	00 e0       	ldi	r16, 0x00	; 0
 61e:	10 e0       	ldi	r17, 0x00	; 0
			
			for(uint8_t i = 0; i < 5; i++) {
				temp_sum += get_temp();
 620:	0e 94 23 01 	call	0x246	; 0x246 <get_temp>
 624:	08 0f       	add	r16, r24
 626:	11 1d       	adc	r17, r1
 628:	9a 81       	ldd	r25, Y+2	; 0x02
 62a:	91 50       	subi	r25, 0x01	; 1
 62c:	9a 83       	std	Y+2, r25	; 0x02
		// --------------- Temperature sensing and Control ----------
		// ---- Check sensor each 120 seconds -------------------------
		if(flag_check_sensor) {
			flag_check_sensor = 0;
			
			for(uint8_t i = 0; i < 5; i++) {
 62e:	91 11       	cpse	r25, r1
 630:	f7 cf       	rjmp	.-18     	; 0x620 <__LOCK_REGION_LENGTH__+0x220>
				temp_sum += get_temp();
			}

			temp_avg = temp_sum / 5;
 632:	98 01       	movw	r18, r16
 634:	ad ec       	ldi	r26, 0xCD	; 205
 636:	bc ec       	ldi	r27, 0xCC	; 204
 638:	0e 94 89 05 	call	0xb12	; 0xb12 <__umulhisi3>
 63c:	96 95       	lsr	r25
 63e:	87 95       	ror	r24
 640:	96 95       	lsr	r25
 642:	87 95       	ror	r24
			
			temp_sum = 0;

			if(temp_avg < TEMP_CRITICAL_VAL) {
 644:	80 35       	cpi	r24, 0x50	; 80
 646:	b0 f5       	brcc	.+108    	; 0x6b4 <__LOCK_REGION_LENGTH__+0x2b4>

				switch (swa_val) {
 648:	2b 81       	ldd	r18, Y+3	; 0x03
 64a:	22 30       	cpi	r18, 0x02	; 2
 64c:	a9 f0       	breq	.+42     	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
 64e:	18 f4       	brcc	.+6      	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
 650:	21 30       	cpi	r18, 0x01	; 1
 652:	39 f0       	breq	.+14     	; 0x662 <__LOCK_REGION_LENGTH__+0x262>
 654:	2b c0       	rjmp	.+86     	; 0x6ac <__LOCK_REGION_LENGTH__+0x2ac>
 656:	9b 81       	ldd	r25, Y+3	; 0x03
 658:	93 30       	cpi	r25, 0x03	; 3
 65a:	c9 f0       	breq	.+50     	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
 65c:	94 30       	cpi	r25, 0x04	; 4
 65e:	11 f1       	breq	.+68     	; 0x6a4 <__LOCK_REGION_LENGTH__+0x2a4>
 660:	25 c0       	rjmp	.+74     	; 0x6ac <__LOCK_REGION_LENGTH__+0x2ac>

					case 1:
						if(temp_avg >= TEMP_LOW_VAL) {
 662:	8e 31       	cpi	r24, 0x1E	; 30
 664:	20 f0       	brcs	.+8      	; 0x66e <__LOCK_REGION_LENGTH__+0x26e>
	
	return ADC;
}

void pwm_heater(uint8_t p) {
	OCR0A = (uint8_t)(p * 0.01 * 255);
 666:	17 bc       	out	0x27, r1	; 39
				switch (swa_val) {

					case 1:
						if(temp_avg >= TEMP_LOW_VAL) {
							pwm_heater(PWM_HEATER_PERCENT_OFF);
							led_heater_off();
 668:	0e 94 cc 01 	call	0x398	; 0x398 <led_heater_off>
 66c:	ba ce       	rjmp	.-652    	; 0x3e2 <main+0x36>
	
	return ADC;
}

void pwm_heater(uint8_t p) {
	OCR0A = (uint8_t)(p * 0.01 * 255);
 66e:	22 e3       	ldi	r18, 0x32	; 50
 670:	27 bd       	out	0x27, r18	; 39
						if(temp_avg >= TEMP_LOW_VAL) {
							pwm_heater(PWM_HEATER_PERCENT_OFF);
							led_heater_off();
						} else {
							pwm_heater(PWM_HEATER_PERCENT_LOW);
							led_heater_on();
 672:	0e 94 ca 01 	call	0x394	; 0x394 <led_heater_on>
 676:	b5 ce       	rjmp	.-662    	; 0x3e2 <main+0x36>
						}
					break;
						
					case 2:
						if(temp_avg >= TEMP_MID_VAL) {
 678:	82 33       	cpi	r24, 0x32	; 50
 67a:	20 f0       	brcs	.+8      	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
	
	return ADC;
}

void pwm_heater(uint8_t p) {
	OCR0A = (uint8_t)(p * 0.01 * 255);
 67c:	17 bc       	out	0x27, r1	; 39
					break;
						
					case 2:
						if(temp_avg >= TEMP_MID_VAL) {
							pwm_heater(PWM_HEATER_PERCENT_OFF);
							led_heater_off();
 67e:	0e 94 cc 01 	call	0x398	; 0x398 <led_heater_off>
 682:	af ce       	rjmp	.-674    	; 0x3e2 <main+0x36>
	
	return ADC;
}

void pwm_heater(uint8_t p) {
	OCR0A = (uint8_t)(p * 0.01 * 255);
 684:	85 e6       	ldi	r24, 0x65	; 101
 686:	87 bd       	out	0x27, r24	; 39
						if(temp_avg >= TEMP_MID_VAL) {
							pwm_heater(PWM_HEATER_PERCENT_OFF);
							led_heater_off();
						} else {
							pwm_heater(PWM_HEATER_PERCENT_MID);
							led_heater_on();
 688:	0e 94 ca 01 	call	0x394	; 0x394 <led_heater_on>
 68c:	aa ce       	rjmp	.-684    	; 0x3e2 <main+0x36>
						}
					break;
						
					case 3:
						if(temp_avg >= TEMP_HIGH_VAL) {
 68e:	86 34       	cpi	r24, 0x46	; 70
 690:	20 f0       	brcs	.+8      	; 0x69a <__LOCK_REGION_LENGTH__+0x29a>
	
	return ADC;
}

void pwm_heater(uint8_t p) {
	OCR0A = (uint8_t)(p * 0.01 * 255);
 692:	17 bc       	out	0x27, r1	; 39
					break;
						
					case 3:
						if(temp_avg >= TEMP_HIGH_VAL) {
							pwm_heater(PWM_HEATER_PERCENT_OFF);
							led_heater_off();
 694:	0e 94 cc 01 	call	0x398	; 0x398 <led_heater_off>
 698:	a4 ce       	rjmp	.-696    	; 0x3e2 <main+0x36>
	
	return ADC;
}

void pwm_heater(uint8_t p) {
	OCR0A = (uint8_t)(p * 0.01 * 255);
 69a:	98 e9       	ldi	r25, 0x98	; 152
 69c:	97 bd       	out	0x27, r25	; 39
						if(temp_avg >= TEMP_HIGH_VAL) {
							pwm_heater(PWM_HEATER_PERCENT_OFF);
							led_heater_off();
						} else {
							pwm_heater(PWM_HEATER_PERCENT_HIGH);
							led_heater_on();
 69e:	0e 94 ca 01 	call	0x394	; 0x394 <led_heater_on>
 6a2:	9f ce       	rjmp	.-706    	; 0x3e2 <main+0x36>
	
	return ADC;
}

void pwm_heater(uint8_t p) {
	OCR0A = (uint8_t)(p * 0.01 * 255);
 6a4:	17 bc       	out	0x27, r1	; 39
						}
					break;
						
					case 4:
						pwm_heater(PWM_HEATER_PERCENT_OFF);
						led_heater_off();
 6a6:	0e 94 cc 01 	call	0x398	; 0x398 <led_heater_off>
					break;
 6aa:	9b ce       	rjmp	.-714    	; 0x3e2 <main+0x36>
	
	return ADC;
}

void pwm_heater(uint8_t p) {
	OCR0A = (uint8_t)(p * 0.01 * 255);
 6ac:	17 bc       	out	0x27, r1	; 39
						led_heater_off();
					break;
						
					default:
						pwm_heater(PWM_HEATER_PERCENT_OFF);
						led_heater_off();
 6ae:	0e 94 cc 01 	call	0x398	; 0x398 <led_heater_off>
					break;
 6b2:	97 ce       	rjmp	.-722    	; 0x3e2 <main+0x36>
	
	return ADC;
}

void pwm_heater(uint8_t p) {
	OCR0A = (uint8_t)(p * 0.01 * 255);
 6b4:	17 bc       	out	0x27, r1	; 39
						led_heater_off();
					break;
				}
			} else {
				pwm_heater(PWM_HEATER_PERCENT_OFF);
				led_heater_off();
 6b6:	0e 94 cc 01 	call	0x398	; 0x398 <led_heater_off>
 6ba:	93 ce       	rjmp	.-730    	; 0x3e2 <main+0x36>

000006bc <__subsf3>:
 6bc:	50 58       	subi	r21, 0x80	; 128

000006be <__addsf3>:
 6be:	bb 27       	eor	r27, r27
 6c0:	aa 27       	eor	r26, r26
 6c2:	0e 94 76 03 	call	0x6ec	; 0x6ec <__addsf3x>
 6c6:	0c 94 c0 04 	jmp	0x980	; 0x980 <__fp_round>
 6ca:	0e 94 b2 04 	call	0x964	; 0x964 <__fp_pscA>
 6ce:	38 f0       	brcs	.+14     	; 0x6de <__addsf3+0x20>
 6d0:	0e 94 b9 04 	call	0x972	; 0x972 <__fp_pscB>
 6d4:	20 f0       	brcs	.+8      	; 0x6de <__addsf3+0x20>
 6d6:	39 f4       	brne	.+14     	; 0x6e6 <__addsf3+0x28>
 6d8:	9f 3f       	cpi	r25, 0xFF	; 255
 6da:	19 f4       	brne	.+6      	; 0x6e2 <__addsf3+0x24>
 6dc:	26 f4       	brtc	.+8      	; 0x6e6 <__addsf3+0x28>
 6de:	0c 94 af 04 	jmp	0x95e	; 0x95e <__fp_nan>
 6e2:	0e f4       	brtc	.+2      	; 0x6e6 <__addsf3+0x28>
 6e4:	e0 95       	com	r30
 6e6:	e7 fb       	bst	r30, 7
 6e8:	0c 94 a9 04 	jmp	0x952	; 0x952 <__fp_inf>

000006ec <__addsf3x>:
 6ec:	e9 2f       	mov	r30, r25
 6ee:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__fp_split3>
 6f2:	58 f3       	brcs	.-42     	; 0x6ca <__addsf3+0xc>
 6f4:	ba 17       	cp	r27, r26
 6f6:	62 07       	cpc	r22, r18
 6f8:	73 07       	cpc	r23, r19
 6fa:	84 07       	cpc	r24, r20
 6fc:	95 07       	cpc	r25, r21
 6fe:	20 f0       	brcs	.+8      	; 0x708 <__addsf3x+0x1c>
 700:	79 f4       	brne	.+30     	; 0x720 <__addsf3x+0x34>
 702:	a6 f5       	brtc	.+104    	; 0x76c <__addsf3x+0x80>
 704:	0c 94 f3 04 	jmp	0x9e6	; 0x9e6 <__fp_zero>
 708:	0e f4       	brtc	.+2      	; 0x70c <__addsf3x+0x20>
 70a:	e0 95       	com	r30
 70c:	0b 2e       	mov	r0, r27
 70e:	ba 2f       	mov	r27, r26
 710:	a0 2d       	mov	r26, r0
 712:	0b 01       	movw	r0, r22
 714:	b9 01       	movw	r22, r18
 716:	90 01       	movw	r18, r0
 718:	0c 01       	movw	r0, r24
 71a:	ca 01       	movw	r24, r20
 71c:	a0 01       	movw	r20, r0
 71e:	11 24       	eor	r1, r1
 720:	ff 27       	eor	r31, r31
 722:	59 1b       	sub	r21, r25
 724:	99 f0       	breq	.+38     	; 0x74c <__addsf3x+0x60>
 726:	59 3f       	cpi	r21, 0xF9	; 249
 728:	50 f4       	brcc	.+20     	; 0x73e <__addsf3x+0x52>
 72a:	50 3e       	cpi	r21, 0xE0	; 224
 72c:	68 f1       	brcs	.+90     	; 0x788 <__addsf3x+0x9c>
 72e:	1a 16       	cp	r1, r26
 730:	f0 40       	sbci	r31, 0x00	; 0
 732:	a2 2f       	mov	r26, r18
 734:	23 2f       	mov	r18, r19
 736:	34 2f       	mov	r19, r20
 738:	44 27       	eor	r20, r20
 73a:	58 5f       	subi	r21, 0xF8	; 248
 73c:	f3 cf       	rjmp	.-26     	; 0x724 <__addsf3x+0x38>
 73e:	46 95       	lsr	r20
 740:	37 95       	ror	r19
 742:	27 95       	ror	r18
 744:	a7 95       	ror	r26
 746:	f0 40       	sbci	r31, 0x00	; 0
 748:	53 95       	inc	r21
 74a:	c9 f7       	brne	.-14     	; 0x73e <__addsf3x+0x52>
 74c:	7e f4       	brtc	.+30     	; 0x76c <__addsf3x+0x80>
 74e:	1f 16       	cp	r1, r31
 750:	ba 0b       	sbc	r27, r26
 752:	62 0b       	sbc	r22, r18
 754:	73 0b       	sbc	r23, r19
 756:	84 0b       	sbc	r24, r20
 758:	ba f0       	brmi	.+46     	; 0x788 <__addsf3x+0x9c>
 75a:	91 50       	subi	r25, 0x01	; 1
 75c:	a1 f0       	breq	.+40     	; 0x786 <__addsf3x+0x9a>
 75e:	ff 0f       	add	r31, r31
 760:	bb 1f       	adc	r27, r27
 762:	66 1f       	adc	r22, r22
 764:	77 1f       	adc	r23, r23
 766:	88 1f       	adc	r24, r24
 768:	c2 f7       	brpl	.-16     	; 0x75a <__addsf3x+0x6e>
 76a:	0e c0       	rjmp	.+28     	; 0x788 <__addsf3x+0x9c>
 76c:	ba 0f       	add	r27, r26
 76e:	62 1f       	adc	r22, r18
 770:	73 1f       	adc	r23, r19
 772:	84 1f       	adc	r24, r20
 774:	48 f4       	brcc	.+18     	; 0x788 <__addsf3x+0x9c>
 776:	87 95       	ror	r24
 778:	77 95       	ror	r23
 77a:	67 95       	ror	r22
 77c:	b7 95       	ror	r27
 77e:	f7 95       	ror	r31
 780:	9e 3f       	cpi	r25, 0xFE	; 254
 782:	08 f0       	brcs	.+2      	; 0x786 <__addsf3x+0x9a>
 784:	b0 cf       	rjmp	.-160    	; 0x6e6 <__addsf3+0x28>
 786:	93 95       	inc	r25
 788:	88 0f       	add	r24, r24
 78a:	08 f0       	brcs	.+2      	; 0x78e <__addsf3x+0xa2>
 78c:	99 27       	eor	r25, r25
 78e:	ee 0f       	add	r30, r30
 790:	97 95       	ror	r25
 792:	87 95       	ror	r24
 794:	08 95       	ret

00000796 <__divsf3>:
 796:	0e 94 df 03 	call	0x7be	; 0x7be <__divsf3x>
 79a:	0c 94 c0 04 	jmp	0x980	; 0x980 <__fp_round>
 79e:	0e 94 b9 04 	call	0x972	; 0x972 <__fp_pscB>
 7a2:	58 f0       	brcs	.+22     	; 0x7ba <__divsf3+0x24>
 7a4:	0e 94 b2 04 	call	0x964	; 0x964 <__fp_pscA>
 7a8:	40 f0       	brcs	.+16     	; 0x7ba <__divsf3+0x24>
 7aa:	29 f4       	brne	.+10     	; 0x7b6 <__divsf3+0x20>
 7ac:	5f 3f       	cpi	r21, 0xFF	; 255
 7ae:	29 f0       	breq	.+10     	; 0x7ba <__divsf3+0x24>
 7b0:	0c 94 a9 04 	jmp	0x952	; 0x952 <__fp_inf>
 7b4:	51 11       	cpse	r21, r1
 7b6:	0c 94 f4 04 	jmp	0x9e8	; 0x9e8 <__fp_szero>
 7ba:	0c 94 af 04 	jmp	0x95e	; 0x95e <__fp_nan>

000007be <__divsf3x>:
 7be:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__fp_split3>
 7c2:	68 f3       	brcs	.-38     	; 0x79e <__divsf3+0x8>

000007c4 <__divsf3_pse>:
 7c4:	99 23       	and	r25, r25
 7c6:	b1 f3       	breq	.-20     	; 0x7b4 <__divsf3+0x1e>
 7c8:	55 23       	and	r21, r21
 7ca:	91 f3       	breq	.-28     	; 0x7b0 <__divsf3+0x1a>
 7cc:	95 1b       	sub	r25, r21
 7ce:	55 0b       	sbc	r21, r21
 7d0:	bb 27       	eor	r27, r27
 7d2:	aa 27       	eor	r26, r26
 7d4:	62 17       	cp	r22, r18
 7d6:	73 07       	cpc	r23, r19
 7d8:	84 07       	cpc	r24, r20
 7da:	38 f0       	brcs	.+14     	; 0x7ea <__divsf3_pse+0x26>
 7dc:	9f 5f       	subi	r25, 0xFF	; 255
 7de:	5f 4f       	sbci	r21, 0xFF	; 255
 7e0:	22 0f       	add	r18, r18
 7e2:	33 1f       	adc	r19, r19
 7e4:	44 1f       	adc	r20, r20
 7e6:	aa 1f       	adc	r26, r26
 7e8:	a9 f3       	breq	.-22     	; 0x7d4 <__divsf3_pse+0x10>
 7ea:	35 d0       	rcall	.+106    	; 0x856 <__divsf3_pse+0x92>
 7ec:	0e 2e       	mov	r0, r30
 7ee:	3a f0       	brmi	.+14     	; 0x7fe <__divsf3_pse+0x3a>
 7f0:	e0 e8       	ldi	r30, 0x80	; 128
 7f2:	32 d0       	rcall	.+100    	; 0x858 <__divsf3_pse+0x94>
 7f4:	91 50       	subi	r25, 0x01	; 1
 7f6:	50 40       	sbci	r21, 0x00	; 0
 7f8:	e6 95       	lsr	r30
 7fa:	00 1c       	adc	r0, r0
 7fc:	ca f7       	brpl	.-14     	; 0x7f0 <__divsf3_pse+0x2c>
 7fe:	2b d0       	rcall	.+86     	; 0x856 <__divsf3_pse+0x92>
 800:	fe 2f       	mov	r31, r30
 802:	29 d0       	rcall	.+82     	; 0x856 <__divsf3_pse+0x92>
 804:	66 0f       	add	r22, r22
 806:	77 1f       	adc	r23, r23
 808:	88 1f       	adc	r24, r24
 80a:	bb 1f       	adc	r27, r27
 80c:	26 17       	cp	r18, r22
 80e:	37 07       	cpc	r19, r23
 810:	48 07       	cpc	r20, r24
 812:	ab 07       	cpc	r26, r27
 814:	b0 e8       	ldi	r27, 0x80	; 128
 816:	09 f0       	breq	.+2      	; 0x81a <__divsf3_pse+0x56>
 818:	bb 0b       	sbc	r27, r27
 81a:	80 2d       	mov	r24, r0
 81c:	bf 01       	movw	r22, r30
 81e:	ff 27       	eor	r31, r31
 820:	93 58       	subi	r25, 0x83	; 131
 822:	5f 4f       	sbci	r21, 0xFF	; 255
 824:	3a f0       	brmi	.+14     	; 0x834 <__divsf3_pse+0x70>
 826:	9e 3f       	cpi	r25, 0xFE	; 254
 828:	51 05       	cpc	r21, r1
 82a:	78 f0       	brcs	.+30     	; 0x84a <__divsf3_pse+0x86>
 82c:	0c 94 a9 04 	jmp	0x952	; 0x952 <__fp_inf>
 830:	0c 94 f4 04 	jmp	0x9e8	; 0x9e8 <__fp_szero>
 834:	5f 3f       	cpi	r21, 0xFF	; 255
 836:	e4 f3       	brlt	.-8      	; 0x830 <__divsf3_pse+0x6c>
 838:	98 3e       	cpi	r25, 0xE8	; 232
 83a:	d4 f3       	brlt	.-12     	; 0x830 <__divsf3_pse+0x6c>
 83c:	86 95       	lsr	r24
 83e:	77 95       	ror	r23
 840:	67 95       	ror	r22
 842:	b7 95       	ror	r27
 844:	f7 95       	ror	r31
 846:	9f 5f       	subi	r25, 0xFF	; 255
 848:	c9 f7       	brne	.-14     	; 0x83c <__divsf3_pse+0x78>
 84a:	88 0f       	add	r24, r24
 84c:	91 1d       	adc	r25, r1
 84e:	96 95       	lsr	r25
 850:	87 95       	ror	r24
 852:	97 f9       	bld	r25, 7
 854:	08 95       	ret
 856:	e1 e0       	ldi	r30, 0x01	; 1
 858:	66 0f       	add	r22, r22
 85a:	77 1f       	adc	r23, r23
 85c:	88 1f       	adc	r24, r24
 85e:	bb 1f       	adc	r27, r27
 860:	62 17       	cp	r22, r18
 862:	73 07       	cpc	r23, r19
 864:	84 07       	cpc	r24, r20
 866:	ba 07       	cpc	r27, r26
 868:	20 f0       	brcs	.+8      	; 0x872 <__divsf3_pse+0xae>
 86a:	62 1b       	sub	r22, r18
 86c:	73 0b       	sbc	r23, r19
 86e:	84 0b       	sbc	r24, r20
 870:	ba 0b       	sbc	r27, r26
 872:	ee 1f       	adc	r30, r30
 874:	88 f7       	brcc	.-30     	; 0x858 <__divsf3_pse+0x94>
 876:	e0 95       	com	r30
 878:	08 95       	ret

0000087a <__fixunssfsi>:
 87a:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__fp_splitA>
 87e:	88 f0       	brcs	.+34     	; 0x8a2 <__fixunssfsi+0x28>
 880:	9f 57       	subi	r25, 0x7F	; 127
 882:	98 f0       	brcs	.+38     	; 0x8aa <__fixunssfsi+0x30>
 884:	b9 2f       	mov	r27, r25
 886:	99 27       	eor	r25, r25
 888:	b7 51       	subi	r27, 0x17	; 23
 88a:	b0 f0       	brcs	.+44     	; 0x8b8 <__fixunssfsi+0x3e>
 88c:	e1 f0       	breq	.+56     	; 0x8c6 <__fixunssfsi+0x4c>
 88e:	66 0f       	add	r22, r22
 890:	77 1f       	adc	r23, r23
 892:	88 1f       	adc	r24, r24
 894:	99 1f       	adc	r25, r25
 896:	1a f0       	brmi	.+6      	; 0x89e <__fixunssfsi+0x24>
 898:	ba 95       	dec	r27
 89a:	c9 f7       	brne	.-14     	; 0x88e <__fixunssfsi+0x14>
 89c:	14 c0       	rjmp	.+40     	; 0x8c6 <__fixunssfsi+0x4c>
 89e:	b1 30       	cpi	r27, 0x01	; 1
 8a0:	91 f0       	breq	.+36     	; 0x8c6 <__fixunssfsi+0x4c>
 8a2:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__fp_zero>
 8a6:	b1 e0       	ldi	r27, 0x01	; 1
 8a8:	08 95       	ret
 8aa:	0c 94 f3 04 	jmp	0x9e6	; 0x9e6 <__fp_zero>
 8ae:	67 2f       	mov	r22, r23
 8b0:	78 2f       	mov	r23, r24
 8b2:	88 27       	eor	r24, r24
 8b4:	b8 5f       	subi	r27, 0xF8	; 248
 8b6:	39 f0       	breq	.+14     	; 0x8c6 <__fixunssfsi+0x4c>
 8b8:	b9 3f       	cpi	r27, 0xF9	; 249
 8ba:	cc f3       	brlt	.-14     	; 0x8ae <__fixunssfsi+0x34>
 8bc:	86 95       	lsr	r24
 8be:	77 95       	ror	r23
 8c0:	67 95       	ror	r22
 8c2:	b3 95       	inc	r27
 8c4:	d9 f7       	brne	.-10     	; 0x8bc <__fixunssfsi+0x42>
 8c6:	3e f4       	brtc	.+14     	; 0x8d6 <__fixunssfsi+0x5c>
 8c8:	90 95       	com	r25
 8ca:	80 95       	com	r24
 8cc:	70 95       	com	r23
 8ce:	61 95       	neg	r22
 8d0:	7f 4f       	sbci	r23, 0xFF	; 255
 8d2:	8f 4f       	sbci	r24, 0xFF	; 255
 8d4:	9f 4f       	sbci	r25, 0xFF	; 255
 8d6:	08 95       	ret

000008d8 <__floatunsisf>:
 8d8:	e8 94       	clt
 8da:	09 c0       	rjmp	.+18     	; 0x8ee <__floatsisf+0x12>

000008dc <__floatsisf>:
 8dc:	97 fb       	bst	r25, 7
 8de:	3e f4       	brtc	.+14     	; 0x8ee <__floatsisf+0x12>
 8e0:	90 95       	com	r25
 8e2:	80 95       	com	r24
 8e4:	70 95       	com	r23
 8e6:	61 95       	neg	r22
 8e8:	7f 4f       	sbci	r23, 0xFF	; 255
 8ea:	8f 4f       	sbci	r24, 0xFF	; 255
 8ec:	9f 4f       	sbci	r25, 0xFF	; 255
 8ee:	99 23       	and	r25, r25
 8f0:	a9 f0       	breq	.+42     	; 0x91c <__stack+0x1d>
 8f2:	f9 2f       	mov	r31, r25
 8f4:	96 e9       	ldi	r25, 0x96	; 150
 8f6:	bb 27       	eor	r27, r27
 8f8:	93 95       	inc	r25
 8fa:	f6 95       	lsr	r31
 8fc:	87 95       	ror	r24
 8fe:	77 95       	ror	r23
 900:	67 95       	ror	r22
 902:	b7 95       	ror	r27
 904:	f1 11       	cpse	r31, r1
 906:	f8 cf       	rjmp	.-16     	; 0x8f8 <__floatsisf+0x1c>
 908:	fa f4       	brpl	.+62     	; 0x948 <__stack+0x49>
 90a:	bb 0f       	add	r27, r27
 90c:	11 f4       	brne	.+4      	; 0x912 <__stack+0x13>
 90e:	60 ff       	sbrs	r22, 0
 910:	1b c0       	rjmp	.+54     	; 0x948 <__stack+0x49>
 912:	6f 5f       	subi	r22, 0xFF	; 255
 914:	7f 4f       	sbci	r23, 0xFF	; 255
 916:	8f 4f       	sbci	r24, 0xFF	; 255
 918:	9f 4f       	sbci	r25, 0xFF	; 255
 91a:	16 c0       	rjmp	.+44     	; 0x948 <__stack+0x49>
 91c:	88 23       	and	r24, r24
 91e:	11 f0       	breq	.+4      	; 0x924 <__stack+0x25>
 920:	96 e9       	ldi	r25, 0x96	; 150
 922:	11 c0       	rjmp	.+34     	; 0x946 <__stack+0x47>
 924:	77 23       	and	r23, r23
 926:	21 f0       	breq	.+8      	; 0x930 <__stack+0x31>
 928:	9e e8       	ldi	r25, 0x8E	; 142
 92a:	87 2f       	mov	r24, r23
 92c:	76 2f       	mov	r23, r22
 92e:	05 c0       	rjmp	.+10     	; 0x93a <__stack+0x3b>
 930:	66 23       	and	r22, r22
 932:	71 f0       	breq	.+28     	; 0x950 <__stack+0x51>
 934:	96 e8       	ldi	r25, 0x86	; 134
 936:	86 2f       	mov	r24, r22
 938:	70 e0       	ldi	r23, 0x00	; 0
 93a:	60 e0       	ldi	r22, 0x00	; 0
 93c:	2a f0       	brmi	.+10     	; 0x948 <__stack+0x49>
 93e:	9a 95       	dec	r25
 940:	66 0f       	add	r22, r22
 942:	77 1f       	adc	r23, r23
 944:	88 1f       	adc	r24, r24
 946:	da f7       	brpl	.-10     	; 0x93e <__stack+0x3f>
 948:	88 0f       	add	r24, r24
 94a:	96 95       	lsr	r25
 94c:	87 95       	ror	r24
 94e:	97 f9       	bld	r25, 7
 950:	08 95       	ret

00000952 <__fp_inf>:
 952:	97 f9       	bld	r25, 7
 954:	9f 67       	ori	r25, 0x7F	; 127
 956:	80 e8       	ldi	r24, 0x80	; 128
 958:	70 e0       	ldi	r23, 0x00	; 0
 95a:	60 e0       	ldi	r22, 0x00	; 0
 95c:	08 95       	ret

0000095e <__fp_nan>:
 95e:	9f ef       	ldi	r25, 0xFF	; 255
 960:	80 ec       	ldi	r24, 0xC0	; 192
 962:	08 95       	ret

00000964 <__fp_pscA>:
 964:	00 24       	eor	r0, r0
 966:	0a 94       	dec	r0
 968:	16 16       	cp	r1, r22
 96a:	17 06       	cpc	r1, r23
 96c:	18 06       	cpc	r1, r24
 96e:	09 06       	cpc	r0, r25
 970:	08 95       	ret

00000972 <__fp_pscB>:
 972:	00 24       	eor	r0, r0
 974:	0a 94       	dec	r0
 976:	12 16       	cp	r1, r18
 978:	13 06       	cpc	r1, r19
 97a:	14 06       	cpc	r1, r20
 97c:	05 06       	cpc	r0, r21
 97e:	08 95       	ret

00000980 <__fp_round>:
 980:	09 2e       	mov	r0, r25
 982:	03 94       	inc	r0
 984:	00 0c       	add	r0, r0
 986:	11 f4       	brne	.+4      	; 0x98c <__fp_round+0xc>
 988:	88 23       	and	r24, r24
 98a:	52 f0       	brmi	.+20     	; 0x9a0 <__fp_round+0x20>
 98c:	bb 0f       	add	r27, r27
 98e:	40 f4       	brcc	.+16     	; 0x9a0 <__fp_round+0x20>
 990:	bf 2b       	or	r27, r31
 992:	11 f4       	brne	.+4      	; 0x998 <__fp_round+0x18>
 994:	60 ff       	sbrs	r22, 0
 996:	04 c0       	rjmp	.+8      	; 0x9a0 <__fp_round+0x20>
 998:	6f 5f       	subi	r22, 0xFF	; 255
 99a:	7f 4f       	sbci	r23, 0xFF	; 255
 99c:	8f 4f       	sbci	r24, 0xFF	; 255
 99e:	9f 4f       	sbci	r25, 0xFF	; 255
 9a0:	08 95       	ret

000009a2 <__fp_split3>:
 9a2:	57 fd       	sbrc	r21, 7
 9a4:	90 58       	subi	r25, 0x80	; 128
 9a6:	44 0f       	add	r20, r20
 9a8:	55 1f       	adc	r21, r21
 9aa:	59 f0       	breq	.+22     	; 0x9c2 <__fp_splitA+0x10>
 9ac:	5f 3f       	cpi	r21, 0xFF	; 255
 9ae:	71 f0       	breq	.+28     	; 0x9cc <__fp_splitA+0x1a>
 9b0:	47 95       	ror	r20

000009b2 <__fp_splitA>:
 9b2:	88 0f       	add	r24, r24
 9b4:	97 fb       	bst	r25, 7
 9b6:	99 1f       	adc	r25, r25
 9b8:	61 f0       	breq	.+24     	; 0x9d2 <__fp_splitA+0x20>
 9ba:	9f 3f       	cpi	r25, 0xFF	; 255
 9bc:	79 f0       	breq	.+30     	; 0x9dc <__fp_splitA+0x2a>
 9be:	87 95       	ror	r24
 9c0:	08 95       	ret
 9c2:	12 16       	cp	r1, r18
 9c4:	13 06       	cpc	r1, r19
 9c6:	14 06       	cpc	r1, r20
 9c8:	55 1f       	adc	r21, r21
 9ca:	f2 cf       	rjmp	.-28     	; 0x9b0 <__fp_split3+0xe>
 9cc:	46 95       	lsr	r20
 9ce:	f1 df       	rcall	.-30     	; 0x9b2 <__fp_splitA>
 9d0:	08 c0       	rjmp	.+16     	; 0x9e2 <__fp_splitA+0x30>
 9d2:	16 16       	cp	r1, r22
 9d4:	17 06       	cpc	r1, r23
 9d6:	18 06       	cpc	r1, r24
 9d8:	99 1f       	adc	r25, r25
 9da:	f1 cf       	rjmp	.-30     	; 0x9be <__fp_splitA+0xc>
 9dc:	86 95       	lsr	r24
 9de:	71 05       	cpc	r23, r1
 9e0:	61 05       	cpc	r22, r1
 9e2:	08 94       	sec
 9e4:	08 95       	ret

000009e6 <__fp_zero>:
 9e6:	e8 94       	clt

000009e8 <__fp_szero>:
 9e8:	bb 27       	eor	r27, r27
 9ea:	66 27       	eor	r22, r22
 9ec:	77 27       	eor	r23, r23
 9ee:	cb 01       	movw	r24, r22
 9f0:	97 f9       	bld	r25, 7
 9f2:	08 95       	ret

000009f4 <__mulsf3>:
 9f4:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__mulsf3x>
 9f8:	0c 94 c0 04 	jmp	0x980	; 0x980 <__fp_round>
 9fc:	0e 94 b2 04 	call	0x964	; 0x964 <__fp_pscA>
 a00:	38 f0       	brcs	.+14     	; 0xa10 <__mulsf3+0x1c>
 a02:	0e 94 b9 04 	call	0x972	; 0x972 <__fp_pscB>
 a06:	20 f0       	brcs	.+8      	; 0xa10 <__mulsf3+0x1c>
 a08:	95 23       	and	r25, r21
 a0a:	11 f0       	breq	.+4      	; 0xa10 <__mulsf3+0x1c>
 a0c:	0c 94 a9 04 	jmp	0x952	; 0x952 <__fp_inf>
 a10:	0c 94 af 04 	jmp	0x95e	; 0x95e <__fp_nan>
 a14:	11 24       	eor	r1, r1
 a16:	0c 94 f4 04 	jmp	0x9e8	; 0x9e8 <__fp_szero>

00000a1a <__mulsf3x>:
 a1a:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__fp_split3>
 a1e:	70 f3       	brcs	.-36     	; 0x9fc <__mulsf3+0x8>

00000a20 <__mulsf3_pse>:
 a20:	95 9f       	mul	r25, r21
 a22:	c1 f3       	breq	.-16     	; 0xa14 <__mulsf3+0x20>
 a24:	95 0f       	add	r25, r21
 a26:	50 e0       	ldi	r21, 0x00	; 0
 a28:	55 1f       	adc	r21, r21
 a2a:	62 9f       	mul	r22, r18
 a2c:	f0 01       	movw	r30, r0
 a2e:	72 9f       	mul	r23, r18
 a30:	bb 27       	eor	r27, r27
 a32:	f0 0d       	add	r31, r0
 a34:	b1 1d       	adc	r27, r1
 a36:	63 9f       	mul	r22, r19
 a38:	aa 27       	eor	r26, r26
 a3a:	f0 0d       	add	r31, r0
 a3c:	b1 1d       	adc	r27, r1
 a3e:	aa 1f       	adc	r26, r26
 a40:	64 9f       	mul	r22, r20
 a42:	66 27       	eor	r22, r22
 a44:	b0 0d       	add	r27, r0
 a46:	a1 1d       	adc	r26, r1
 a48:	66 1f       	adc	r22, r22
 a4a:	82 9f       	mul	r24, r18
 a4c:	22 27       	eor	r18, r18
 a4e:	b0 0d       	add	r27, r0
 a50:	a1 1d       	adc	r26, r1
 a52:	62 1f       	adc	r22, r18
 a54:	73 9f       	mul	r23, r19
 a56:	b0 0d       	add	r27, r0
 a58:	a1 1d       	adc	r26, r1
 a5a:	62 1f       	adc	r22, r18
 a5c:	83 9f       	mul	r24, r19
 a5e:	a0 0d       	add	r26, r0
 a60:	61 1d       	adc	r22, r1
 a62:	22 1f       	adc	r18, r18
 a64:	74 9f       	mul	r23, r20
 a66:	33 27       	eor	r19, r19
 a68:	a0 0d       	add	r26, r0
 a6a:	61 1d       	adc	r22, r1
 a6c:	23 1f       	adc	r18, r19
 a6e:	84 9f       	mul	r24, r20
 a70:	60 0d       	add	r22, r0
 a72:	21 1d       	adc	r18, r1
 a74:	82 2f       	mov	r24, r18
 a76:	76 2f       	mov	r23, r22
 a78:	6a 2f       	mov	r22, r26
 a7a:	11 24       	eor	r1, r1
 a7c:	9f 57       	subi	r25, 0x7F	; 127
 a7e:	50 40       	sbci	r21, 0x00	; 0
 a80:	9a f0       	brmi	.+38     	; 0xaa8 <__mulsf3_pse+0x88>
 a82:	f1 f0       	breq	.+60     	; 0xac0 <__mulsf3_pse+0xa0>
 a84:	88 23       	and	r24, r24
 a86:	4a f0       	brmi	.+18     	; 0xa9a <__mulsf3_pse+0x7a>
 a88:	ee 0f       	add	r30, r30
 a8a:	ff 1f       	adc	r31, r31
 a8c:	bb 1f       	adc	r27, r27
 a8e:	66 1f       	adc	r22, r22
 a90:	77 1f       	adc	r23, r23
 a92:	88 1f       	adc	r24, r24
 a94:	91 50       	subi	r25, 0x01	; 1
 a96:	50 40       	sbci	r21, 0x00	; 0
 a98:	a9 f7       	brne	.-22     	; 0xa84 <__mulsf3_pse+0x64>
 a9a:	9e 3f       	cpi	r25, 0xFE	; 254
 a9c:	51 05       	cpc	r21, r1
 a9e:	80 f0       	brcs	.+32     	; 0xac0 <__mulsf3_pse+0xa0>
 aa0:	0c 94 a9 04 	jmp	0x952	; 0x952 <__fp_inf>
 aa4:	0c 94 f4 04 	jmp	0x9e8	; 0x9e8 <__fp_szero>
 aa8:	5f 3f       	cpi	r21, 0xFF	; 255
 aaa:	e4 f3       	brlt	.-8      	; 0xaa4 <__mulsf3_pse+0x84>
 aac:	98 3e       	cpi	r25, 0xE8	; 232
 aae:	d4 f3       	brlt	.-12     	; 0xaa4 <__mulsf3_pse+0x84>
 ab0:	86 95       	lsr	r24
 ab2:	77 95       	ror	r23
 ab4:	67 95       	ror	r22
 ab6:	b7 95       	ror	r27
 ab8:	f7 95       	ror	r31
 aba:	e7 95       	ror	r30
 abc:	9f 5f       	subi	r25, 0xFF	; 255
 abe:	c1 f7       	brne	.-16     	; 0xab0 <__mulsf3_pse+0x90>
 ac0:	fe 2b       	or	r31, r30
 ac2:	88 0f       	add	r24, r24
 ac4:	91 1d       	adc	r25, r1
 ac6:	96 95       	lsr	r25
 ac8:	87 95       	ror	r24
 aca:	97 f9       	bld	r25, 7
 acc:	08 95       	ret

00000ace <__udivmodsi4>:
 ace:	a1 e2       	ldi	r26, 0x21	; 33
 ad0:	1a 2e       	mov	r1, r26
 ad2:	aa 1b       	sub	r26, r26
 ad4:	bb 1b       	sub	r27, r27
 ad6:	fd 01       	movw	r30, r26
 ad8:	0d c0       	rjmp	.+26     	; 0xaf4 <__udivmodsi4_ep>

00000ada <__udivmodsi4_loop>:
 ada:	aa 1f       	adc	r26, r26
 adc:	bb 1f       	adc	r27, r27
 ade:	ee 1f       	adc	r30, r30
 ae0:	ff 1f       	adc	r31, r31
 ae2:	a2 17       	cp	r26, r18
 ae4:	b3 07       	cpc	r27, r19
 ae6:	e4 07       	cpc	r30, r20
 ae8:	f5 07       	cpc	r31, r21
 aea:	20 f0       	brcs	.+8      	; 0xaf4 <__udivmodsi4_ep>
 aec:	a2 1b       	sub	r26, r18
 aee:	b3 0b       	sbc	r27, r19
 af0:	e4 0b       	sbc	r30, r20
 af2:	f5 0b       	sbc	r31, r21

00000af4 <__udivmodsi4_ep>:
 af4:	66 1f       	adc	r22, r22
 af6:	77 1f       	adc	r23, r23
 af8:	88 1f       	adc	r24, r24
 afa:	99 1f       	adc	r25, r25
 afc:	1a 94       	dec	r1
 afe:	69 f7       	brne	.-38     	; 0xada <__udivmodsi4_loop>
 b00:	60 95       	com	r22
 b02:	70 95       	com	r23
 b04:	80 95       	com	r24
 b06:	90 95       	com	r25
 b08:	9b 01       	movw	r18, r22
 b0a:	ac 01       	movw	r20, r24
 b0c:	bd 01       	movw	r22, r26
 b0e:	cf 01       	movw	r24, r30
 b10:	08 95       	ret

00000b12 <__umulhisi3>:
 b12:	a2 9f       	mul	r26, r18
 b14:	b0 01       	movw	r22, r0
 b16:	b3 9f       	mul	r27, r19
 b18:	c0 01       	movw	r24, r0
 b1a:	a3 9f       	mul	r26, r19
 b1c:	70 0d       	add	r23, r0
 b1e:	81 1d       	adc	r24, r1
 b20:	11 24       	eor	r1, r1
 b22:	91 1d       	adc	r25, r1
 b24:	b2 9f       	mul	r27, r18
 b26:	70 0d       	add	r23, r0
 b28:	81 1d       	adc	r24, r1
 b2a:	11 24       	eor	r1, r1
 b2c:	91 1d       	adc	r25, r1
 b2e:	08 95       	ret

00000b30 <_exit>:
 b30:	f8 94       	cli

00000b32 <__stop_program>:
 b32:	ff cf       	rjmp	.-2      	; 0xb32 <__stop_program>
