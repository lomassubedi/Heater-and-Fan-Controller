
heaterFanControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000045a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  0000045a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000045a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000048c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e38  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e0  00000000  00000000  000013cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000071c  00000000  00000000  00001bac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  000022c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000610  00000000  00000000  0000245c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003ab  00000000  00000000  00002a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00002e17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_7>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a7 30       	cpi	r26, 0x07	; 7
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 2f 01 	call	0x25e	; 0x25e <main>
  88:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_7>:
	IO_PORTD_OUT &= ~(1 << F_LED_CNTL);
	return;
}

void led_sig_on() {
	IO_PORTB_OUT |= (1 << LED_SIG);
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
  9e:	af 93       	push	r26
  a0:	bf 93       	push	r27
  a2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <milliseconds>
  a6:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <milliseconds+0x1>
  aa:	a0 91 05 01 	lds	r26, 0x0105	; 0x800105 <milliseconds+0x2>
  ae:	b0 91 06 01 	lds	r27, 0x0106	; 0x800106 <milliseconds+0x3>
  b2:	01 96       	adiw	r24, 0x01	; 1
  b4:	a1 1d       	adc	r26, r1
  b6:	b1 1d       	adc	r27, r1
  b8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <milliseconds>
  bc:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <milliseconds+0x1>
  c0:	a0 93 05 01 	sts	0x0105, r26	; 0x800105 <milliseconds+0x2>
  c4:	b0 93 06 01 	sts	0x0106, r27	; 0x800106 <milliseconds+0x3>
  c8:	bf 91       	pop	r27
  ca:	af 91       	pop	r26
  cc:	9f 91       	pop	r25
  ce:	8f 91       	pop	r24
  d0:	0f 90       	pop	r0
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	0f 90       	pop	r0
  d6:	1f 90       	pop	r1
  d8:	18 95       	reti

000000da <init_timerModule>:
  da:	e0 e7       	ldi	r30, 0x70	; 112
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	82 60       	ori	r24, 0x02	; 2
  e2:	80 83       	st	Z, r24
  e4:	e0 eb       	ldi	r30, 0xB0	; 176
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	82 60       	ori	r24, 0x02	; 2
  ec:	80 83       	st	Z, r24
  ee:	e1 eb       	ldi	r30, 0xB1	; 177
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	86 60       	ori	r24, 0x06	; 6
  f6:	80 83       	st	Z, r24
  f8:	8f e3       	ldi	r24, 0x3F	; 63
  fa:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
  fe:	08 95       	ret

00000100 <pwm_init>:
 100:	56 9a       	sbi	0x0a, 6	; 10
 102:	5e 98       	cbi	0x0b, 6	; 11
 104:	81 e8       	ldi	r24, 0x81	; 129
 106:	84 bd       	out	0x24, r24	; 36
 108:	83 e0       	ldi	r24, 0x03	; 3
 10a:	85 bd       	out	0x25, r24	; 37
 10c:	16 bc       	out	0x26, r1	; 38
 10e:	17 bc       	out	0x27, r1	; 39
 110:	21 9a       	sbi	0x04, 1	; 4
 112:	29 98       	cbi	0x05, 1	; 5
 114:	80 e8       	ldi	r24, 0x80	; 128
 116:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 11a:	83 e1       	ldi	r24, 0x13	; 19
 11c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 120:	8f ef       	ldi	r24, 0xFF	; 255
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 128:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 12c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 130:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 134:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 138:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 13c:	08 95       	ret

0000013e <init_io>:
 13e:	8a b1       	in	r24, 0x0a	; 10
 140:	88 61       	ori	r24, 0x18	; 24
 142:	8a b9       	out	0x0a, r24	; 10
 144:	8a b1       	in	r24, 0x0a	; 10
 146:	88 7f       	andi	r24, 0xF8	; 248
 148:	8a b9       	out	0x0a, r24	; 10
 14a:	34 b1       	in	r19, 0x04	; 4
 14c:	24 b1       	in	r18, 0x04	; 4
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <init_io+0x1a>
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	3a 95       	dec	r19
 15a:	e2 f7       	brpl	.-8      	; 0x154 <init_io+0x16>
 15c:	82 2b       	or	r24, r18
 15e:	84 b9       	out	0x04, r24	; 4
 160:	08 95       	ret

00000162 <init_adc>:
 162:	ea e7       	ldi	r30, 0x7A	; 122
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	87 68       	ori	r24, 0x87	; 135
 16a:	80 83       	st	Z, r24
 16c:	ec e7       	ldi	r30, 0x7C	; 124
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	87 64       	ori	r24, 0x47	; 71
 174:	80 83       	st	Z, r24
 176:	08 95       	ret

00000178 <sw_a>:
 178:	89 b1       	in	r24, 0x09	; 9
 17a:	82 fb       	bst	r24, 2
 17c:	88 27       	eor	r24, r24
 17e:	80 f9       	bld	r24, 0
 180:	08 95       	ret

00000182 <get_sw_a>:
 182:	0e 94 bc 00 	call	0x178	; 0x178 <sw_a>
 186:	88 23       	and	r24, r24
 188:	c1 f0       	breq	.+48     	; 0x1ba <get_sw_a+0x38>
 18a:	2f ef       	ldi	r18, 0xFF	; 255
 18c:	89 ef       	ldi	r24, 0xF9	; 249
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	21 50       	subi	r18, 0x01	; 1
 192:	80 40       	sbci	r24, 0x00	; 0
 194:	90 40       	sbci	r25, 0x00	; 0
 196:	e1 f7       	brne	.-8      	; 0x190 <get_sw_a+0xe>
 198:	00 c0       	rjmp	.+0      	; 0x19a <get_sw_a+0x18>
 19a:	00 00       	nop
 19c:	0e 94 bc 00 	call	0x178	; 0x178 <sw_a>
 1a0:	81 11       	cpse	r24, r1
 1a2:	fc cf       	rjmp	.-8      	; 0x19c <get_sw_a+0x1a>
 1a4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count_sw_a.1763>
 1a8:	8f 5f       	subi	r24, 0xFF	; 255
 1aa:	85 30       	cpi	r24, 0x05	; 5
 1ac:	18 f4       	brcc	.+6      	; 0x1b4 <get_sw_a+0x32>
 1ae:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <count_sw_a.1763>
 1b2:	03 c0       	rjmp	.+6      	; 0x1ba <get_sw_a+0x38>
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <count_sw_a.1763>
 1ba:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count_sw_a.1763>
 1be:	08 95       	ret

000001c0 <sw_b>:
 1c0:	89 b1       	in	r24, 0x09	; 9
 1c2:	86 95       	lsr	r24
 1c4:	81 70       	andi	r24, 0x01	; 1
 1c6:	08 95       	ret

000001c8 <get_sw_b>:
 1c8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <sw_b>
 1cc:	88 23       	and	r24, r24
 1ce:	c1 f0       	breq	.+48     	; 0x200 <get_sw_b+0x38>
 1d0:	2f ef       	ldi	r18, 0xFF	; 255
 1d2:	89 ef       	ldi	r24, 0xF9	; 249
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	21 50       	subi	r18, 0x01	; 1
 1d8:	80 40       	sbci	r24, 0x00	; 0
 1da:	90 40       	sbci	r25, 0x00	; 0
 1dc:	e1 f7       	brne	.-8      	; 0x1d6 <get_sw_b+0xe>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <get_sw_b+0x18>
 1e0:	00 00       	nop
 1e2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <sw_b>
 1e6:	81 11       	cpse	r24, r1
 1e8:	fc cf       	rjmp	.-8      	; 0x1e2 <get_sw_b+0x1a>
 1ea:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <count_sw_b.1771>
 1ee:	8f 5f       	subi	r24, 0xFF	; 255
 1f0:	85 30       	cpi	r24, 0x05	; 5
 1f2:	18 f4       	brcc	.+6      	; 0x1fa <get_sw_b+0x32>
 1f4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <count_sw_b.1771>
 1f8:	03 c0       	rjmp	.+6      	; 0x200 <get_sw_b+0x38>
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <count_sw_b.1771>
 200:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <count_sw_b.1771>
 204:	08 95       	ret

00000206 <sw_c>:
 206:	89 b1       	in	r24, 0x09	; 9
 208:	81 70       	andi	r24, 0x01	; 1
 20a:	08 95       	ret

0000020c <get_sw_c>:
 20c:	0e 94 03 01 	call	0x206	; 0x206 <sw_c>
 210:	88 23       	and	r24, r24
 212:	c1 f0       	breq	.+48     	; 0x244 <get_sw_c+0x38>
 214:	2f ef       	ldi	r18, 0xFF	; 255
 216:	89 ef       	ldi	r24, 0xF9	; 249
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	21 50       	subi	r18, 0x01	; 1
 21c:	80 40       	sbci	r24, 0x00	; 0
 21e:	90 40       	sbci	r25, 0x00	; 0
 220:	e1 f7       	brne	.-8      	; 0x21a <get_sw_c+0xe>
 222:	00 c0       	rjmp	.+0      	; 0x224 <get_sw_c+0x18>
 224:	00 00       	nop
 226:	0e 94 03 01 	call	0x206	; 0x206 <sw_c>
 22a:	81 11       	cpse	r24, r1
 22c:	fc cf       	rjmp	.-8      	; 0x226 <get_sw_c+0x1a>
 22e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 232:	8f 5f       	subi	r24, 0xFF	; 255
 234:	85 30       	cpi	r24, 0x05	; 5
 236:	18 f4       	brcc	.+6      	; 0x23e <get_sw_c+0x32>
 238:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 23c:	03 c0       	rjmp	.+6      	; 0x244 <get_sw_c+0x38>
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 244:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 248:	08 95       	ret

0000024a <led_heater_on>:
 24a:	5c 9a       	sbi	0x0b, 4	; 11
 24c:	08 95       	ret

0000024e <led_heater_off>:
 24e:	5c 98       	cbi	0x0b, 4	; 11
 250:	08 95       	ret

00000252 <led_fan_on>:
 252:	5b 9a       	sbi	0x0b, 3	; 11
 254:	08 95       	ret

00000256 <led_fan_off>:
 256:	5b 98       	cbi	0x0b, 3	; 11
 258:	08 95       	ret

0000025a <led_sig_off>:
	return;
}

void led_sig_off() {
	IO_PORTB_OUT &= ~(1 << LED_SIG);
 25a:	2a 98       	cbi	0x05, 2	; 5
 25c:	08 95       	ret

0000025e <main>:

uint8_t flag_start_read_temp_timer = 0;
uint8_t flag_reset_read_temp_timer = 0;

int main(void) {    
	pwm_init();
 25e:	0e 94 80 00 	call	0x100	; 0x100 <pwm_init>
	init_timerModule();
 262:	0e 94 6d 00 	call	0xda	; 0xda <init_timerModule>
	sei();
 266:	78 94       	sei
	init_adc();
 268:	0e 94 b1 00 	call	0x162	; 0x162 <init_adc>
	init_io();
 26c:	0e 94 9f 00 	call	0x13e	; 0x13e <init_io>
	
	DDRC = 0xFF;
 270:	8f ef       	ldi	r24, 0xFF	; 255
 272:	87 b9       	out	0x07, r24	; 7

	uint8_t swc_val = 0;
	uint8_t swc_prev_val = 0;

	unsigned long time_val_heater_start = 0;
	unsigned long time_val_fan_start = 0;
 274:	81 2c       	mov	r8, r1
 276:	91 2c       	mov	r9, r1
 278:	54 01       	movw	r10, r8
	uint8_t swb_prev_val = 0;

	uint8_t swc_val = 0;
	uint8_t swc_prev_val = 0;

	unsigned long time_val_heater_start = 0;
 27a:	c1 2c       	mov	r12, r1
 27c:	d1 2c       	mov	r13, r1
 27e:	76 01       	movw	r14, r12

	uint8_t swb_val = 0;
	uint8_t swb_prev_val = 0;

	uint8_t swc_val = 0;
	uint8_t swc_prev_val = 0;
 280:	21 2c       	mov	r2, r1
	init_io();
	
	DDRC = 0xFF;
	
	uint8_t swa_val = 0;
	uint8_t swa_prev_val = 0;
 282:	31 2c       	mov	r3, r1
}

void pwm_fan(uint8_t p) {
	/*OCR1A = (uint16_t)((p / 100) *  TOP_VAL);*/
	/*OCR1A = TOP_VAL;*/
	OCR1A = p;
 284:	c8 e8       	ldi	r28, 0x88	; 136
 286:	d0 e0       	ldi	r29, 0x00	; 0
 288:	0f 2e       	mov	r0, r31
 28a:	f6 ea       	ldi	r31, 0xA6	; 166
 28c:	4f 2e       	mov	r4, r31
 28e:	51 2c       	mov	r5, r1
 290:	f0 2d       	mov	r31, r0
 292:	66 24       	eor	r6, r6
 294:	6a 94       	dec	r6
 296:	71 2c       	mov	r7, r1
 298:	02 c0       	rjmp	.+4      	; 0x29e <main+0x40>
uint8_t flag_reset_timer_led_30min = 0;

uint8_t flag_start_read_temp_timer = 0;
uint8_t flag_reset_read_temp_timer = 0;

int main(void) {    
 29a:	20 2e       	mov	r2, r16
 29c:	31 2e       	mov	r3, r17
	unsigned long time_val_fan_start = 0;
	unsigned long time_val_led_start = 0;

    while (1) {		
		
		swa_val = get_sw_a();
 29e:	0e 94 c1 00 	call	0x182	; 0x182 <get_sw_a>
 2a2:	18 2f       	mov	r17, r24
		swb_val = get_sw_b();
 2a4:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <get_sw_b>
		swc_val = get_sw_c();
 2a8:	0e 94 06 01 	call	0x20c	; 0x20c <get_sw_c>
 2ac:	08 2f       	mov	r16, r24

		// ------- Heater Control -------------
		if(swa_val != swa_prev_val) {
 2ae:	31 16       	cp	r3, r17
 2b0:	b1 f1       	breq	.+108    	; 0x31e <main+0xc0>
}

void pwm_fan(uint8_t p) {
	/*OCR1A = (uint16_t)((p / 100) *  TOP_VAL);*/
	/*OCR1A = TOP_VAL;*/
	OCR1A = p;
 2b2:	19 82       	std	Y+1, r1	; 0x01
 2b4:	18 82       	st	Y, r1
		// ------- Heater Control -------------
		if(swa_val != swa_prev_val) {
			
			// --- Clear all other stuffs (fan/led)-----
			pwm_fan(PWM_FAN_PERCENT_OFF);
			led_fan_off();
 2b6:	0e 94 2b 01 	call	0x256	; 0x256 <led_fan_off>

			led_sig_off();
 2ba:	0e 94 2d 01 	call	0x25a	; 0x25a <led_sig_off>
ISR(TIMER2_COMPA_vect) {
	++milliseconds;
}

unsigned long millis(void) {
	return milliseconds;
 2be:	c0 90 03 01 	lds	r12, 0x0103	; 0x800103 <milliseconds>
 2c2:	d0 90 04 01 	lds	r13, 0x0104	; 0x800104 <milliseconds+0x1>
 2c6:	e0 90 05 01 	lds	r14, 0x0105	; 0x800105 <milliseconds+0x2>
 2ca:	f0 90 06 01 	lds	r15, 0x0106	; 0x800106 <milliseconds+0x3>
			
			// ---- Proceed to heater work
			time_val_heater_start = millis(); 
			swa_prev_val = swa_val;

			switch (swa_val) {
 2ce:	12 30       	cpi	r17, 0x02	; 2
 2d0:	71 f0       	breq	.+28     	; 0x2ee <main+0x90>
 2d2:	18 f4       	brcc	.+6      	; 0x2da <main+0x7c>
 2d4:	11 30       	cpi	r17, 0x01	; 1
 2d6:	31 f0       	breq	.+12     	; 0x2e4 <main+0x86>
 2d8:	1e c0       	rjmp	.+60     	; 0x316 <main+0xb8>
 2da:	13 30       	cpi	r17, 0x03	; 3
 2dc:	79 f0       	breq	.+30     	; 0x2fc <main+0x9e>
 2de:	14 30       	cpi	r17, 0x04	; 4
 2e0:	a1 f0       	breq	.+40     	; 0x30a <main+0xac>
 2e2:	19 c0       	rjmp	.+50     	; 0x316 <main+0xb8>
	return;
}

void pwm_heater(uint8_t p) {
	/*OCR0A = (uint8_t)((p / 100) * 255);*/
	OCR0A = p;
 2e4:	23 e3       	ldi	r18, 0x33	; 51
 2e6:	27 bd       	out	0x27, r18	; 39
			swa_prev_val = swa_val;

			switch (swa_val) {
				case 1:
				pwm_heater(PWM_HEATER_PERCENT_20);
				led_heater_on();
 2e8:	0e 94 25 01 	call	0x24a	; 0x24a <led_heater_on>
				break;
 2ec:	18 c0       	rjmp	.+48     	; 0x31e <main+0xc0>
	return;
}

void pwm_heater(uint8_t p) {
	/*OCR0A = (uint8_t)((p / 100) * 255);*/
	OCR0A = p;
 2ee:	86 e6       	ldi	r24, 0x66	; 102
 2f0:	87 bd       	out	0x27, r24	; 39
				led_heater_on();
				break;
				
				case 2:
				pwm_heater(PWM_HEATER_PERCENT_40);
				led_heater_on();
 2f2:	0e 94 25 01 	call	0x24a	; 0x24a <led_heater_on>
				PORTC = 0x02;
 2f6:	92 e0       	ldi	r25, 0x02	; 2
 2f8:	98 b9       	out	0x08, r25	; 8
				break;
 2fa:	11 c0       	rjmp	.+34     	; 0x31e <main+0xc0>
	return;
}

void pwm_heater(uint8_t p) {
	/*OCR0A = (uint8_t)((p / 100) * 255);*/
	OCR0A = p;
 2fc:	29 e9       	ldi	r18, 0x99	; 153
 2fe:	27 bd       	out	0x27, r18	; 39
				PORTC = 0x02;
				break;
				
				case 3:
				pwm_heater(PWM_HEATER_PERCENT_60);
				led_heater_on();
 300:	0e 94 25 01 	call	0x24a	; 0x24a <led_heater_on>
				PORTC = 0x03;
 304:	83 e0       	ldi	r24, 0x03	; 3
 306:	88 b9       	out	0x08, r24	; 8
				break;
 308:	0a c0       	rjmp	.+20     	; 0x31e <main+0xc0>
	return;
}

void pwm_heater(uint8_t p) {
	/*OCR0A = (uint8_t)((p / 100) * 255);*/
	OCR0A = p;
 30a:	17 bc       	out	0x27, r1	; 39
				PORTC = 0x03;
				break;
				
				case 4:
				pwm_heater(PWM_HEATER_PERCENT_OFF);
				led_heater_off();
 30c:	0e 94 27 01 	call	0x24e	; 0x24e <led_heater_off>
				PORTC = 0x04;
 310:	94 e0       	ldi	r25, 0x04	; 4
 312:	98 b9       	out	0x08, r25	; 8
				break;
 314:	04 c0       	rjmp	.+8      	; 0x31e <main+0xc0>
	return;
}

void pwm_heater(uint8_t p) {
	/*OCR0A = (uint8_t)((p / 100) * 255);*/
	OCR0A = p;
 316:	17 bc       	out	0x27, r1	; 39
				PORTC = 0x04;
				break;
				
				default:
				pwm_heater(PWM_HEATER_PERCENT_OFF);
				led_heater_off();
 318:	0e 94 27 01 	call	0x24e	; 0x24e <led_heater_off>
				PORTC = 0x00;
 31c:	18 b8       	out	0x08, r1	; 8
ISR(TIMER2_COMPA_vect) {
	++milliseconds;
}

unsigned long millis(void) {
	return milliseconds;
 31e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <milliseconds>
 322:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <milliseconds+0x1>
 326:	a0 91 05 01 	lds	r26, 0x0105	; 0x800105 <milliseconds+0x2>
 32a:	b0 91 06 01 	lds	r27, 0x0106	; 0x800106 <milliseconds+0x3>
				PORTC = 0x00;
				break;
			}
		}

		if((millis() - time_val_heater_start) > TIMER_VAL_HEATER) {
 32e:	8c 19       	sub	r24, r12
 330:	9d 09       	sbc	r25, r13
 332:	ae 09       	sbc	r26, r14
 334:	bf 09       	sbc	r27, r15
 336:	81 31       	cpi	r24, 0x11	; 17
 338:	97 42       	sbci	r25, 0x27	; 39
 33a:	a1 05       	cpc	r26, r1
 33c:	b1 05       	cpc	r27, r1
 33e:	18 f0       	brcs	.+6      	; 0x346 <main+0xe8>
	return;
}

void pwm_heater(uint8_t p) {
	/*OCR0A = (uint8_t)((p / 100) * 255);*/
	OCR0A = p;
 340:	17 bc       	out	0x27, r1	; 39
			}
		}

		if((millis() - time_val_heater_start) > TIMER_VAL_HEATER) {
			pwm_heater(PWM_HEATER_PERCENT_OFF);
			led_heater_off();
 342:	0e 94 27 01 	call	0x24e	; 0x24e <led_heater_off>
		// ------- End Heater Control -------------
		

		//----------- Fan Control -----------------

		if(swc_val != swc_prev_val) {
 346:	20 16       	cp	r2, r16
 348:	a9 f1       	breq	.+106    	; 0x3b4 <main+0x156>
	return;
}

void pwm_heater(uint8_t p) {
	/*OCR0A = (uint8_t)((p / 100) * 255);*/
	OCR0A = p;
 34a:	17 bc       	out	0x27, r1	; 39

		if(swc_val != swc_prev_val) {
	
			// --- Clear all other stuffs (heater/led)-----
			pwm_heater(PWM_HEATER_PERCENT_OFF);
			led_heater_off();
 34c:	0e 94 27 01 	call	0x24e	; 0x24e <led_heater_off>

			led_sig_off();
 350:	0e 94 2d 01 	call	0x25a	; 0x25a <led_sig_off>
ISR(TIMER2_COMPA_vect) {
	++milliseconds;
}

unsigned long millis(void) {
	return milliseconds;
 354:	80 90 03 01 	lds	r8, 0x0103	; 0x800103 <milliseconds>
 358:	90 90 04 01 	lds	r9, 0x0104	; 0x800104 <milliseconds+0x1>
 35c:	a0 90 05 01 	lds	r10, 0x0105	; 0x800105 <milliseconds+0x2>
 360:	b0 90 06 01 	lds	r11, 0x0106	; 0x800106 <milliseconds+0x3>
	
			// ---- Proceed to fan work
			time_val_fan_start = millis();
			swc_prev_val = swc_val;

			switch (swc_val) {
 364:	02 30       	cpi	r16, 0x02	; 2
 366:	81 f0       	breq	.+32     	; 0x388 <main+0x12a>
 368:	18 f4       	brcc	.+6      	; 0x370 <main+0x112>
 36a:	01 30       	cpi	r16, 0x01	; 1
 36c:	31 f0       	breq	.+12     	; 0x37a <main+0x11c>
 36e:	1d c0       	rjmp	.+58     	; 0x3aa <main+0x14c>
 370:	03 30       	cpi	r16, 0x03	; 3
 372:	79 f0       	breq	.+30     	; 0x392 <main+0x134>
 374:	04 30       	cpi	r16, 0x04	; 4
 376:	91 f0       	breq	.+36     	; 0x39c <main+0x13e>
 378:	18 c0       	rjmp	.+48     	; 0x3aa <main+0x14c>
}

void pwm_fan(uint8_t p) {
	/*OCR1A = (uint16_t)((p / 100) *  TOP_VAL);*/
	/*OCR1A = TOP_VAL;*/
	OCR1A = p;
 37a:	84 e5       	ldi	r24, 0x54	; 84
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	99 83       	std	Y+1, r25	; 0x01
 380:	88 83       	st	Y, r24
			swc_prev_val = swc_val;

			switch (swc_val) {
				case 1:
				pwm_fan(PWM_FAN_PERCENT_33);
				led_fan_on();
 382:	0e 94 29 01 	call	0x252	; 0x252 <led_fan_on>
				break;
 386:	16 c0       	rjmp	.+44     	; 0x3b4 <main+0x156>
}

void pwm_fan(uint8_t p) {
	/*OCR1A = (uint16_t)((p / 100) *  TOP_VAL);*/
	/*OCR1A = TOP_VAL;*/
	OCR1A = p;
 388:	59 82       	std	Y+1, r5	; 0x01
 38a:	48 82       	st	Y, r4
				led_fan_on();
				break;
		
				case 2:
				pwm_fan(PWM_FAN_PERCENT_66);
				led_fan_on();
 38c:	0e 94 29 01 	call	0x252	; 0x252 <led_fan_on>
				break;
 390:	11 c0       	rjmp	.+34     	; 0x3b4 <main+0x156>
}

void pwm_fan(uint8_t p) {
	/*OCR1A = (uint16_t)((p / 100) *  TOP_VAL);*/
	/*OCR1A = TOP_VAL;*/
	OCR1A = p;
 392:	79 82       	std	Y+1, r7	; 0x01
 394:	68 82       	st	Y, r6
				led_fan_on();
				break;
		
				case 3:
				pwm_fan(PWM_FAN_PERCENT_100);
				led_fan_on();
 396:	0e 94 29 01 	call	0x252	; 0x252 <led_fan_on>
				break;
 39a:	0c c0       	rjmp	.+24     	; 0x3b4 <main+0x156>
}

void pwm_fan(uint8_t p) {
	/*OCR1A = (uint16_t)((p / 100) *  TOP_VAL);*/
	/*OCR1A = TOP_VAL;*/
	OCR1A = p;
 39c:	19 82       	std	Y+1, r1	; 0x01
 39e:	18 82       	st	Y, r1
				led_fan_on();
				break;
		
				case 4:
				pwm_fan(PWM_FAN_PERCENT_OFF);
				led_fan_off();
 3a0:	0e 94 2b 01 	call	0x256	; 0x256 <led_fan_off>
				PORTC = 0x04;
 3a4:	94 e0       	ldi	r25, 0x04	; 4
 3a6:	98 b9       	out	0x08, r25	; 8
				break;
 3a8:	05 c0       	rjmp	.+10     	; 0x3b4 <main+0x156>
}

void pwm_fan(uint8_t p) {
	/*OCR1A = (uint16_t)((p / 100) *  TOP_VAL);*/
	/*OCR1A = TOP_VAL;*/
	OCR1A = p;
 3aa:	19 82       	std	Y+1, r1	; 0x01
 3ac:	18 82       	st	Y, r1
				PORTC = 0x04;
				break;
		
				default:
				pwm_fan(PWM_FAN_PERCENT_OFF);
				led_fan_off();
 3ae:	0e 94 2b 01 	call	0x256	; 0x256 <led_fan_off>
				PORTC = 0x00;
 3b2:	18 b8       	out	0x08, r1	; 8
ISR(TIMER2_COMPA_vect) {
	++milliseconds;
}

unsigned long millis(void) {
	return milliseconds;
 3b4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <milliseconds>
 3b8:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <milliseconds+0x1>
 3bc:	a0 91 05 01 	lds	r26, 0x0105	; 0x800105 <milliseconds+0x2>
 3c0:	b0 91 06 01 	lds	r27, 0x0106	; 0x800106 <milliseconds+0x3>
				PORTC = 0x00;
				break;
			}
		}

		if((millis() - time_val_fan_start) > TIMER_VAL_FAN) {
 3c4:	88 19       	sub	r24, r8
 3c6:	99 09       	sbc	r25, r9
 3c8:	aa 09       	sbc	r26, r10
 3ca:	bb 09       	sbc	r27, r11
 3cc:	81 31       	cpi	r24, 0x11	; 17
 3ce:	97 42       	sbci	r25, 0x27	; 39
 3d0:	a1 05       	cpc	r26, r1
 3d2:	b1 05       	cpc	r27, r1
 3d4:	08 f4       	brcc	.+2      	; 0x3d8 <main+0x17a>
 3d6:	61 cf       	rjmp	.-318    	; 0x29a <main+0x3c>
}

void pwm_fan(uint8_t p) {
	/*OCR1A = (uint16_t)((p / 100) *  TOP_VAL);*/
	/*OCR1A = TOP_VAL;*/
	OCR1A = p;
 3d8:	19 82       	std	Y+1, r1	; 0x01
 3da:	18 82       	st	Y, r1
			}
		}

		if((millis() - time_val_fan_start) > TIMER_VAL_FAN) {
			pwm_fan(PWM_FAN_PERCENT_OFF);
			led_fan_off();
 3dc:	0e 94 2b 01 	call	0x256	; 0x256 <led_fan_off>
 3e0:	5c cf       	rjmp	.-328    	; 0x29a <main+0x3c>

000003e2 <_exit>:
 3e2:	f8 94       	cli

000003e4 <__stop_program>:
 3e4:	ff cf       	rjmp	.-2      	; 0x3e4 <__stop_program>
