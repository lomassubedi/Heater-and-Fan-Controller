
heaterFanControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  00000264  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000095f  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000795  00000000  00000000  00000cbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004b2  00000000  00000000  00001450  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00001904  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045d  00000000  00000000  00001a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f4  00000000  00000000  00001e75  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00001f69  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_7>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 30       	cpi	r26, 0x05	; 5
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 ce 00 	call	0x19c	; 0x19c <main>
  88:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_7>:
	if(IO_PORTD_IN & (1 << SW_C)) {
		return 1;
	} else {
		return 0;
	}
}
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
  9e:	af 93       	push	r26
  a0:	bf 93       	push	r27
  a2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <milliseconds>
  a6:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <milliseconds+0x1>
  aa:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <milliseconds+0x2>
  ae:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <milliseconds+0x3>
  b2:	01 96       	adiw	r24, 0x01	; 1
  b4:	a1 1d       	adc	r26, r1
  b6:	b1 1d       	adc	r27, r1
  b8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <milliseconds>
  bc:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <milliseconds+0x1>
  c0:	a0 93 03 01 	sts	0x0103, r26	; 0x800103 <milliseconds+0x2>
  c4:	b0 93 04 01 	sts	0x0104, r27	; 0x800104 <milliseconds+0x3>
  c8:	bf 91       	pop	r27
  ca:	af 91       	pop	r26
  cc:	9f 91       	pop	r25
  ce:	8f 91       	pop	r24
  d0:	0f 90       	pop	r0
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	0f 90       	pop	r0
  d6:	1f 90       	pop	r1
  d8:	18 95       	reti

000000da <init_timerModule>:
  da:	e0 e7       	ldi	r30, 0x70	; 112
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	82 60       	ori	r24, 0x02	; 2
  e2:	80 83       	st	Z, r24
  e4:	e0 eb       	ldi	r30, 0xB0	; 176
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	82 60       	ori	r24, 0x02	; 2
  ec:	80 83       	st	Z, r24
  ee:	e1 eb       	ldi	r30, 0xB1	; 177
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	86 60       	ori	r24, 0x06	; 6
  f6:	80 83       	st	Z, r24
  f8:	8f e3       	ldi	r24, 0x3F	; 63
  fa:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
  fe:	08 95       	ret

00000100 <pwm_init>:
 100:	56 9a       	sbi	0x0a, 6	; 10
 102:	5e 98       	cbi	0x0b, 6	; 11
 104:	81 e8       	ldi	r24, 0x81	; 129
 106:	84 bd       	out	0x24, r24	; 36
 108:	83 e0       	ldi	r24, 0x03	; 3
 10a:	85 bd       	out	0x25, r24	; 37
 10c:	16 bc       	out	0x26, r1	; 38
 10e:	17 bc       	out	0x27, r1	; 39
 110:	21 9a       	sbi	0x04, 1	; 4
 112:	29 98       	cbi	0x05, 1	; 5
 114:	80 e8       	ldi	r24, 0x80	; 128
 116:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 11a:	83 e1       	ldi	r24, 0x13	; 19
 11c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 120:	8f ef       	ldi	r24, 0xFF	; 255
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 128:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 12c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 130:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 134:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 138:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 13c:	08 95       	ret

0000013e <init_adc>:
 13e:	ea e7       	ldi	r30, 0x7A	; 122
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	87 68       	ori	r24, 0x87	; 135
 146:	80 83       	st	Z, r24
 148:	ec e7       	ldi	r30, 0x7C	; 124
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	87 64       	ori	r24, 0x47	; 71
 150:	80 83       	st	Z, r24
 152:	08 95       	ret

00000154 <sw_a>:
 154:	89 b1       	in	r24, 0x09	; 9
 156:	82 fb       	bst	r24, 2
 158:	88 27       	eor	r24, r24
 15a:	80 f9       	bld	r24, 0
 15c:	08 95       	ret

0000015e <get_sw_a>:
 15e:	0e 94 aa 00 	call	0x154	; 0x154 <sw_a>
 162:	88 23       	and	r24, r24
 164:	c1 f0       	breq	.+48     	; 0x196 <get_sw_a+0x38>
 166:	2f ef       	ldi	r18, 0xFF	; 255
 168:	89 ef       	ldi	r24, 0xF9	; 249
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	21 50       	subi	r18, 0x01	; 1
 16e:	80 40       	sbci	r24, 0x00	; 0
 170:	90 40       	sbci	r25, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <get_sw_a+0xe>
 174:	00 c0       	rjmp	.+0      	; 0x176 <get_sw_a+0x18>
 176:	00 00       	nop
 178:	0e 94 aa 00 	call	0x154	; 0x154 <sw_a>
 17c:	81 11       	cpse	r24, r1
 17e:	fc cf       	rjmp	.-8      	; 0x178 <get_sw_a+0x1a>
 180:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 184:	8f 5f       	subi	r24, 0xFF	; 255
 186:	85 30       	cpi	r24, 0x05	; 5
 188:	18 f4       	brcc	.+6      	; 0x190 <get_sw_a+0x32>
 18a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 18e:	03 c0       	rjmp	.+6      	; 0x196 <get_sw_a+0x38>
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 196:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 19a:	08 95       	ret

0000019c <main>:

int main(void) {    
	pwm_init();
 19c:	0e 94 80 00 	call	0x100	; 0x100 <pwm_init>
	init_timerModule();
 1a0:	0e 94 6d 00 	call	0xda	; 0xda <init_timerModule>
	sei();
 1a4:	78 94       	sei
	init_adc();
 1a6:	0e 94 9f 00 	call	0x13e	; 0x13e <init_adc>
}

void pwm_fan(uint8_t p) {	
	/*OCR1A = (uint16_t)((p / 100) *  TOP_VAL);*/
	/*OCR1A = TOP_VAL;*/
	OCR1A = p;	
 1aa:	84 e5       	ldi	r24, 0x54	; 84
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1b2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	return;
}

void pwm_heater(uint8_t p) {				
	/*OCR0A = (uint8_t)((p / 100) * 255);*/
	OCR0A = p;
 1b6:	87 bd       	out	0x27, r24	; 39
	uint8_t count_sw_b = 0;	
	uint8_t count_sw_c = 0;

	pwm_fan(84);
	pwm_heater(84);
	DDRC = 0xFF;
 1b8:	8f ef       	ldi	r24, 0xFF	; 255
 1ba:	87 b9       	out	0x07, r24	; 7
	} else if(test == 2) {
		PORTC = 0x02;
	} else if(test == 3) {
		PORTC = 0x03;
	} else if(test == 4) {
		PORTC = 0x04;
 1bc:	04 e0       	ldi	r16, 0x04	; 4
	if(test == 1) {
		PORTC = 0x01;
	} else if(test == 2) {
		PORTC = 0x02;
	} else if(test == 3) {
		PORTC = 0x03;
 1be:	13 e0       	ldi	r17, 0x03	; 3
	test = get_sw_a();
	
	if(test == 1) {
		PORTC = 0x01;
	} else if(test == 2) {
		PORTC = 0x02;
 1c0:	d2 e0       	ldi	r29, 0x02	; 2
    while (1) {		
		
	test = get_sw_a();
	
	if(test == 1) {
		PORTC = 0x01;
 1c2:	c1 e0       	ldi	r28, 0x01	; 1
	pwm_heater(84);
	DDRC = 0xFF;
	
    while (1) {		
		
	test = get_sw_a();
 1c4:	0e 94 af 00 	call	0x15e	; 0x15e <get_sw_a>
	
	if(test == 1) {
 1c8:	81 30       	cpi	r24, 0x01	; 1
 1ca:	11 f4       	brne	.+4      	; 0x1d0 <main+0x34>
		PORTC = 0x01;
 1cc:	c8 b9       	out	0x08, r28	; 8
 1ce:	fa cf       	rjmp	.-12     	; 0x1c4 <main+0x28>
	} else if(test == 2) {
 1d0:	82 30       	cpi	r24, 0x02	; 2
 1d2:	11 f4       	brne	.+4      	; 0x1d8 <main+0x3c>
		PORTC = 0x02;
 1d4:	d8 b9       	out	0x08, r29	; 8
 1d6:	f6 cf       	rjmp	.-20     	; 0x1c4 <main+0x28>
	} else if(test == 3) {
 1d8:	83 30       	cpi	r24, 0x03	; 3
 1da:	11 f4       	brne	.+4      	; 0x1e0 <main+0x44>
		PORTC = 0x03;
 1dc:	18 b9       	out	0x08, r17	; 8
 1de:	f2 cf       	rjmp	.-28     	; 0x1c4 <main+0x28>
	} else if(test == 4) {
 1e0:	84 30       	cpi	r24, 0x04	; 4
 1e2:	11 f4       	brne	.+4      	; 0x1e8 <main+0x4c>
		PORTC = 0x04;
 1e4:	08 b9       	out	0x08, r16	; 8
 1e6:	ee cf       	rjmp	.-36     	; 0x1c4 <main+0x28>
	} else {
		PORTC = 0x00;
 1e8:	18 b8       	out	0x08, r1	; 8
 1ea:	ec cf       	rjmp	.-40     	; 0x1c4 <main+0x28>

000001ec <_exit>:
 1ec:	f8 94       	cli

000001ee <__stop_program>:
 1ee:	ff cf       	rjmp	.-2      	; 0x1ee <__stop_program>
